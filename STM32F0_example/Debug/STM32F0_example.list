
STM32F0_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000348  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000005c  20000000  08000410  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000005c  08000410  0002005c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001b9d  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000741  00000000  00000000  00011fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e22  00000000  00000000  00012716  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000268  00000000  00000000  00013538  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000258  00000000  00000000  000137a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000fc2  00000000  00000000  000139f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000d95  00000000  00000000  000149ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001574f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000004b8  00000000  00000000  000157cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00015c84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080003f0 	.word	0x080003f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080003f0 	.word	0x080003f0

08000108 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800010a:	680b      	ldr	r3, [r1, #0]
 800010c:	9301      	str	r3, [sp, #4]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800010e:	2300      	movs	r3, #0
    pos = ((uint32_t)0x01) << pinpos;
 8000110:	2501      	movs	r5, #1
 8000112:	409d      	lsls	r5, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000114:	9a01      	ldr	r2, [sp, #4]
 8000116:	402a      	ands	r2, r5

    if (currentpin == pos)
 8000118:	4295      	cmp	r5, r2
 800011a:	d12d      	bne.n	8000178 <GPIO_Init+0x70>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800011c:	790a      	ldrb	r2, [r1, #4]
 800011e:	1e54      	subs	r4, r2, #1
 8000120:	2c01      	cmp	r4, #1
 8000122:	d816      	bhi.n	8000152 <GPIO_Init+0x4a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000124:	6884      	ldr	r4, [r0, #8]
 8000126:	005f      	lsls	r7, r3, #1
 8000128:	0026      	movs	r6, r4
 800012a:	2403      	movs	r4, #3
 800012c:	40bc      	lsls	r4, r7
 800012e:	43a6      	bics	r6, r4
 8000130:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000132:	6884      	ldr	r4, [r0, #8]
 8000134:	46a4      	mov	ip, r4
 8000136:	794c      	ldrb	r4, [r1, #5]
 8000138:	40bc      	lsls	r4, r7
 800013a:	4667      	mov	r7, ip
 800013c:	433c      	orrs	r4, r7
 800013e:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000140:	8884      	ldrh	r4, [r0, #4]
 8000142:	43ac      	bics	r4, r5
 8000144:	8084      	strh	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000146:	798d      	ldrb	r5, [r1, #6]
 8000148:	8884      	ldrh	r4, [r0, #4]
 800014a:	409d      	lsls	r5, r3
 800014c:	432c      	orrs	r4, r5
 800014e:	b2a4      	uxth	r4, r4
 8000150:	8084      	strh	r4, [r0, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000152:	2403      	movs	r4, #3
 8000154:	005d      	lsls	r5, r3, #1
 8000156:	40ac      	lsls	r4, r5
 8000158:	43e4      	mvns	r4, r4

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800015a:	40aa      	lsls	r2, r5
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800015c:	6807      	ldr	r7, [r0, #0]
 800015e:	4027      	ands	r7, r4
 8000160:	6007      	str	r7, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000162:	6807      	ldr	r7, [r0, #0]
 8000164:	433a      	orrs	r2, r7
 8000166:	6002      	str	r2, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000168:	68c2      	ldr	r2, [r0, #12]
 800016a:	4014      	ands	r4, r2
 800016c:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800016e:	79ca      	ldrb	r2, [r1, #7]
 8000170:	68c4      	ldr	r4, [r0, #12]
 8000172:	40aa      	lsls	r2, r5
 8000174:	4322      	orrs	r2, r4
 8000176:	60c2      	str	r2, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000178:	3301      	adds	r3, #1
 800017a:	2b10      	cmp	r3, #16
 800017c:	d1c8      	bne.n	8000110 <GPIO_Init+0x8>
    }
  }
}
 800017e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08000180 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8000180:	6181      	str	r1, [r0, #24]
}
 8000182:	4770      	bx	lr

08000184 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000184:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8000186:	4770      	bx	lr

08000188 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800018a:	695a      	ldr	r2, [r3, #20]
  if (NewState != DISABLE)
 800018c:	2900      	cmp	r1, #0
 800018e:	d002      	beq.n	8000196 <RCC_AHBPeriphClockCmd+0xe>
    RCC->AHBENR |= RCC_AHBPeriph;
 8000190:	4310      	orrs	r0, r2
 8000192:	6158      	str	r0, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000194:	4770      	bx	lr
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000196:	4382      	bics	r2, r0
 8000198:	615a      	str	r2, [r3, #20]
}
 800019a:	e7fb      	b.n	8000194 <RCC_AHBPeriphClockCmd+0xc>
 800019c:	40021000 	.word	0x40021000

080001a0 <HC595_Pulse>:
		Data = Data << 1;
	}
}

void HC595_Pulse(void)
{
 80001a0:	b510      	push	{r4, lr}

	GPIO_SetBits(GPIOA,SCK); // Clock High
 80001a2:	2490      	movs	r4, #144	; 0x90
 80001a4:	05e4      	lsls	r4, r4, #23
 80001a6:	0020      	movs	r0, r4
 80001a8:	2104      	movs	r1, #4
 80001aa:	f7ff ffe9 	bl	8000180 <GPIO_SetBits>

	GPIO_ResetBits(GPIOA,SCK); // Clock Low
 80001ae:	2104      	movs	r1, #4
 80001b0:	0020      	movs	r0, r4
 80001b2:	f7ff ffe7 	bl	8000184 <GPIO_ResetBits>
}
 80001b6:	bd10      	pop	{r4, pc}

080001b8 <Shift_Out>:
{
 80001b8:	b570      	push	{r4, r5, r6, lr}
			GPIO_ResetBits(GPIOA,SDI); // Data Low
 80001ba:	2690      	movs	r6, #144	; 0x90
{
 80001bc:	0005      	movs	r5, r0
 80001be:	2408      	movs	r4, #8
			GPIO_ResetBits(GPIOA,SDI); // Data Low
 80001c0:	05f6      	lsls	r6, r6, #23
		if(Data & 0x80)
 80001c2:	b26b      	sxtb	r3, r5
			GPIO_SetBits(GPIOA,SDI); // Data High
 80001c4:	2102      	movs	r1, #2
 80001c6:	0030      	movs	r0, r6
		if(Data & 0x80)
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	da0a      	bge.n	80001e2 <Shift_Out+0x2a>
			GPIO_SetBits(GPIOA,SDI); // Data High
 80001cc:	f7ff ffd8 	bl	8000180 <GPIO_SetBits>
 80001d0:	3c01      	subs	r4, #1
		Data = Data << 1;
 80001d2:	006d      	lsls	r5, r5, #1
 80001d4:	b2e4      	uxtb	r4, r4
		HC595_Pulse();
 80001d6:	f7ff ffe3 	bl	80001a0 <HC595_Pulse>
		Data = Data << 1;
 80001da:	b2ed      	uxtb	r5, r5
	for(uint8_t i = 0; i < 8; i++)
 80001dc:	2c00      	cmp	r4, #0
 80001de:	d1f0      	bne.n	80001c2 <Shift_Out+0xa>
}
 80001e0:	bd70      	pop	{r4, r5, r6, pc}
			GPIO_ResetBits(GPIOA,SDI); // Data Low
 80001e2:	f7ff ffcf 	bl	8000184 <GPIO_ResetBits>
 80001e6:	e7f3      	b.n	80001d0 <Shift_Out+0x18>

080001e8 <HC595_Latch>:
void HC595_Latch(void)
{
 80001e8:	b510      	push	{r4, lr}
	  GPIO_SetBits(GPIOA,LATCH); // Latch High
 80001ea:	2490      	movs	r4, #144	; 0x90
 80001ec:	05e4      	lsls	r4, r4, #23
 80001ee:	0020      	movs	r0, r4
 80001f0:	2108      	movs	r1, #8
 80001f2:	f7ff ffc5 	bl	8000180 <GPIO_SetBits>
	  GPIO_ResetBits(GPIOA,LATCH); // Latch Low
 80001f6:	2108      	movs	r1, #8
 80001f8:	0020      	movs	r0, r4
 80001fa:	f7ff ffc3 	bl	8000184 <GPIO_ResetBits>
}
 80001fe:	bd10      	pop	{r4, pc}

08000200 <main>:
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000200:	2080      	movs	r0, #128	; 0x80
{
 8000202:	b570      	push	{r4, r5, r6, lr}
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000204:	2101      	movs	r1, #1
 8000206:	0280      	lsls	r0, r0, #10
 8000208:	f7ff ffbe 	bl	8000188 <RCC_AHBPeriphClockCmd>
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800020c:	2090      	movs	r0, #144	; 0x90
	GPIO_InitStructure.GPIO_Pin = LED|SDI|SCK|LATCH;
 800020e:	251e      	movs	r5, #30
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000210:	2300      	movs	r3, #0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000212:	2401      	movs	r4, #1
	GPIO_InitStructure.GPIO_Pin = LED|SDI|SCK|LATCH;
 8000214:	490f      	ldr	r1, [pc, #60]	; (8000254 <main+0x54>)
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000216:	05c0      	lsls	r0, r0, #23
	GPIO_InitStructure.GPIO_Pin = LED|SDI|SCK|LATCH;
 8000218:	600d      	str	r5, [r1, #0]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800021a:	718b      	strb	r3, [r1, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800021c:	710c      	strb	r4, [r1, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800021e:	f7ff ff73 	bl	8000108 <GPIO_Init>
	GPIO_ResetBits(GPIOA,LED|SDI|SCK|LATCH);
 8000222:	2090      	movs	r0, #144	; 0x90
 8000224:	0029      	movs	r1, r5
 8000226:	05c0      	lsls	r0, r0, #23
 8000228:	f7ff ffac 	bl	8000184 <GPIO_ResetBits>
			x = 0x01;
 800022c:	0025      	movs	r5, r4
		Shift_Out(x);
 800022e:	b2e6      	uxtb	r6, r4
 8000230:	0030      	movs	r0, r6
 8000232:	f7ff ffc1 	bl	80001b8 <Shift_Out>
		Shift_Out(x);
 8000236:	0030      	movs	r0, r6
 8000238:	f7ff ffbe 	bl	80001b8 <Shift_Out>
		HC595_Latch();
 800023c:	f7ff ffd4 	bl	80001e8 <HC595_Latch>
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <main+0x58>)
 8000242:	3b01      	subs	r3, #1
		for(uint32_t i = 0; i < 5000000; i++)
 8000244:	2b00      	cmp	r3, #0
 8000246:	d1fc      	bne.n	8000242 <main+0x42>
		x = x << 1;
 8000248:	0064      	lsls	r4, r4, #1
 800024a:	b2a4      	uxth	r4, r4
		if(x > 0x80)
 800024c:	2c80      	cmp	r4, #128	; 0x80
 800024e:	d9ee      	bls.n	800022e <main+0x2e>
			x = 0x01;
 8000250:	002c      	movs	r4, r5
 8000252:	e7ec      	b.n	800022e <main+0x2e>
 8000254:	20000030 	.word	0x20000030
 8000258:	004c4b40 	.word	0x004c4b40

0800025c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000260:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000262:	e003      	b.n	800026c <LoopCopyDataInit>

08000264 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000266:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000268:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800026a:	3104      	adds	r1, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800026c:	480b      	ldr	r0, [pc, #44]	; (800029c <LoopForever+0xa>)
  ldr r3, =_edata
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000270:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000272:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000274:	d3f6      	bcc.n	8000264 <CopyDataInit>
  ldr r2, =_sbss
 8000276:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <LoopForever+0x12>)
  b LoopFillZerobss
 8000278:	e002      	b.n	8000280 <LoopFillZerobss>

0800027a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  str  r3, [r2]
 800027c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027e:	3204      	adds	r2, #4

08000280 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <LoopForever+0x16>)
  cmp r2, r3
 8000282:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000284:	d3f9      	bcc.n	800027a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000286:	f000 f813 	bl	80002b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800028a:	f000 f88d 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028e:	f7ff ffb7 	bl	8000200 <main>

08000292 <LoopForever>:

LoopForever:
    b LoopForever
 8000292:	e7fe      	b.n	8000292 <LoopForever>
  ldr   r0, =_estack
 8000294:	20001000 	.word	0x20001000
  ldr r3, =_sidata
 8000298:	08000410 	.word	0x08000410
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr r2, =_sbss
 80002a4:	20000000 	.word	0x20000000
  ldr r3, = _ebss
 80002a8:	2000005c 	.word	0x2000005c

080002ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC1_IRQHandler>
	...

080002b0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80002b0:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002b2:	2101      	movs	r1, #1
 80002b4:	4b34      	ldr	r3, [pc, #208]	; (8000388 <SystemInit+0xd8>)
#if defined(STM32F051)  
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 80002b6:	4835      	ldr	r0, [pc, #212]	; (800038c <SystemInit+0xdc>)
  RCC->CR |= (uint32_t)0x00000001;
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	430a      	orrs	r2, r1
 80002bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	4002      	ands	r2, r0
 80002c2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4832      	ldr	r0, [pc, #200]	; (8000390 <SystemInit+0xe0>)
 80002c8:	4002      	ands	r2, r0
 80002ca:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	4831      	ldr	r0, [pc, #196]	; (8000394 <SystemInit+0xe4>)
 80002d0:	4002      	ands	r2, r0
 80002d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80002d4:	685a      	ldr	r2, [r3, #4]
 80002d6:	4830      	ldr	r0, [pc, #192]	; (8000398 <SystemInit+0xe8>)
 80002d8:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80002da:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80002dc:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80002de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002e0:	4382      	bics	r2, r0
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80002e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002e6:	482d      	ldr	r0, [pc, #180]	; (800039c <SystemInit+0xec>)
 80002e8:	4002      	ands	r2, r0
 80002ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80002ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002ee:	2080      	movs	r0, #128	; 0x80
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80002f0:	438a      	bics	r2, r1
 80002f2:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->CIR = 0x00000000;
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002f8:	9200      	str	r2, [sp, #0]
 80002fa:	9201      	str	r2, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002fc:	2280      	movs	r2, #128	; 0x80
 80002fe:	6819      	ldr	r1, [r3, #0]
 8000300:	0252      	lsls	r2, r2, #9
 8000302:	430a      	orrs	r2, r1
 8000304:	601a      	str	r2, [r3, #0]
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000306:	0280      	lsls	r0, r0, #10
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000308:	22a0      	movs	r2, #160	; 0xa0
 800030a:	0004      	movs	r4, r0
 800030c:	01d2      	lsls	r2, r2, #7
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800030e:	6819      	ldr	r1, [r3, #0]
 8000310:	4001      	ands	r1, r0
 8000312:	9101      	str	r1, [sp, #4]
    StartUpCounter++;  
 8000314:	9900      	ldr	r1, [sp, #0]
 8000316:	3101      	adds	r1, #1
 8000318:	9100      	str	r1, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800031a:	9901      	ldr	r1, [sp, #4]
 800031c:	2900      	cmp	r1, #0
 800031e:	d102      	bne.n	8000326 <SystemInit+0x76>
 8000320:	9900      	ldr	r1, [sp, #0]
 8000322:	4291      	cmp	r1, r2
 8000324:	d1f3      	bne.n	800030e <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	4022      	ands	r2, r4
 800032a:	d000      	beq.n	800032e <SystemInit+0x7e>
  {
    HSEStatus = (uint32_t)0x01;
 800032c:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800032e:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000330:	9a01      	ldr	r2, [sp, #4]
 8000332:	2a01      	cmp	r2, #1
 8000334:	d126      	bne.n	8000384 <SystemInit+0xd4>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000336:	2111      	movs	r1, #17
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <SystemInit+0xf0>)
 800033a:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800033c:	685a      	ldr	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800033e:	4919      	ldr	r1, [pc, #100]	; (80003a4 <SystemInit+0xf4>)
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000340:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000346:	685a      	ldr	r2, [r3, #4]
 8000348:	400a      	ands	r2, r1
 800034a:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL2);
 800034c:	2280      	movs	r2, #128	; 0x80
 800034e:	6859      	ldr	r1, [r3, #4]
 8000350:	0252      	lsls	r2, r2, #9
 8000352:	430a      	orrs	r2, r1
 8000354:	605a      	str	r2, [r3, #4]
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000356:	2280      	movs	r2, #128	; 0x80
 8000358:	6819      	ldr	r1, [r3, #0]
 800035a:	0452      	lsls	r2, r2, #17
 800035c:	430a      	orrs	r2, r1
 800035e:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	0492      	lsls	r2, r2, #18
 8000364:	6819      	ldr	r1, [r3, #0]
 8000366:	4211      	tst	r1, r2
 8000368:	d0fc      	beq.n	8000364 <SystemInit+0xb4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800036a:	2103      	movs	r1, #3
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	438a      	bics	r2, r1
 8000370:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000372:	2202      	movs	r2, #2
 8000374:	6859      	ldr	r1, [r3, #4]
 8000376:	430a      	orrs	r2, r1

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000378:	210c      	movs	r1, #12
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800037a:	605a      	str	r2, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	400a      	ands	r2, r1
 8000380:	2a08      	cmp	r2, #8
 8000382:	d1fb      	bne.n	800037c <SystemInit+0xcc>
}
 8000384:	bd13      	pop	{r0, r1, r4, pc}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	40021000 	.word	0x40021000
 800038c:	08ffb80c 	.word	0x08ffb80c
 8000390:	fef6ffff 	.word	0xfef6ffff
 8000394:	fffbffff 	.word	0xfffbffff
 8000398:	ffc0ffff 	.word	0xffc0ffff
 800039c:	fffffeac 	.word	0xfffffeac
 80003a0:	40022000 	.word	0x40022000
 80003a4:	ffc07fff 	.word	0xffc07fff

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	2600      	movs	r6, #0
 80003ac:	4d0c      	ldr	r5, [pc, #48]	; (80003e0 <__libc_init_array+0x38>)
 80003ae:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	10a4      	asrs	r4, r4, #2
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	2600      	movs	r6, #0
 80003ba:	f000 f819 	bl	80003f0 <_init>
 80003be:	4d0a      	ldr	r5, [pc, #40]	; (80003e8 <__libc_init_array+0x40>)
 80003c0:	4c0a      	ldr	r4, [pc, #40]	; (80003ec <__libc_init_array+0x44>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	00b3      	lsls	r3, r6, #2
 80003ce:	58eb      	ldr	r3, [r5, r3]
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	00b3      	lsls	r3, r6, #2
 80003d8:	58eb      	ldr	r3, [r5, r3]
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	08000408 	.word	0x08000408
 80003ec:	0800040c 	.word	0x0800040c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
