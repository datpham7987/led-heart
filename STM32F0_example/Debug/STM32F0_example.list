
STM32F0_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000724  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007e4  080007e4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080007e4  080007e4  000107e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080007e8  080007e8  000107e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080007ec  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  20000004  080007f0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000070  080007f0  00020070  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004752  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ba9  00000000  00000000  0002477e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bf5  00000000  00000000  00025327  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005a0  00000000  00000000  00027f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000618  00000000  00000000  000284c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001f24  00000000  00000000  00028ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001c14  00000000  00000000  0002a9fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c40  00000000  00000000  0002c68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002d2cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080007cc 	.word	0x080007cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080007cc 	.word	0x080007cc

08000108 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800010a:	680b      	ldr	r3, [r1, #0]
 800010c:	9301      	str	r3, [sp, #4]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800010e:	2300      	movs	r3, #0
    pos = ((uint32_t)0x01) << pinpos;
 8000110:	2501      	movs	r5, #1
 8000112:	409d      	lsls	r5, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000114:	9a01      	ldr	r2, [sp, #4]
 8000116:	402a      	ands	r2, r5

    if (currentpin == pos)
 8000118:	4295      	cmp	r5, r2
 800011a:	d12d      	bne.n	8000178 <GPIO_Init+0x70>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800011c:	790a      	ldrb	r2, [r1, #4]
 800011e:	1e54      	subs	r4, r2, #1
 8000120:	2c01      	cmp	r4, #1
 8000122:	d816      	bhi.n	8000152 <GPIO_Init+0x4a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000124:	6884      	ldr	r4, [r0, #8]
 8000126:	005f      	lsls	r7, r3, #1
 8000128:	0026      	movs	r6, r4
 800012a:	2403      	movs	r4, #3
 800012c:	40bc      	lsls	r4, r7
 800012e:	43a6      	bics	r6, r4
 8000130:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000132:	6884      	ldr	r4, [r0, #8]
 8000134:	46a4      	mov	ip, r4
 8000136:	794c      	ldrb	r4, [r1, #5]
 8000138:	40bc      	lsls	r4, r7
 800013a:	4667      	mov	r7, ip
 800013c:	433c      	orrs	r4, r7
 800013e:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000140:	8884      	ldrh	r4, [r0, #4]
 8000142:	43ac      	bics	r4, r5
 8000144:	8084      	strh	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000146:	798d      	ldrb	r5, [r1, #6]
 8000148:	8884      	ldrh	r4, [r0, #4]
 800014a:	409d      	lsls	r5, r3
 800014c:	432c      	orrs	r4, r5
 800014e:	b2a4      	uxth	r4, r4
 8000150:	8084      	strh	r4, [r0, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000152:	2403      	movs	r4, #3
 8000154:	005d      	lsls	r5, r3, #1
 8000156:	40ac      	lsls	r4, r5
 8000158:	43e4      	mvns	r4, r4

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800015a:	40aa      	lsls	r2, r5
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800015c:	6807      	ldr	r7, [r0, #0]
 800015e:	4027      	ands	r7, r4
 8000160:	6007      	str	r7, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000162:	6807      	ldr	r7, [r0, #0]
 8000164:	433a      	orrs	r2, r7
 8000166:	6002      	str	r2, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000168:	68c2      	ldr	r2, [r0, #12]
 800016a:	4014      	ands	r4, r2
 800016c:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800016e:	79ca      	ldrb	r2, [r1, #7]
 8000170:	68c4      	ldr	r4, [r0, #12]
 8000172:	40aa      	lsls	r2, r5
 8000174:	4322      	orrs	r2, r4
 8000176:	60c2      	str	r2, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000178:	3301      	adds	r3, #1
 800017a:	2b10      	cmp	r3, #16
 800017c:	d1c8      	bne.n	8000110 <GPIO_Init+0x8>
    }
  }
}
 800017e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08000180 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000180:	8a00      	ldrh	r0, [r0, #16]
 8000182:	4008      	ands	r0, r1
 8000184:	1e41      	subs	r1, r0, #1
 8000186:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000188:	b2c0      	uxtb	r0, r0
}
 800018a:	4770      	bx	lr

0800018c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 800018c:	6181      	str	r1, [r0, #24]
}
 800018e:	4770      	bx	lr

08000190 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000190:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8000192:	4770      	bx	lr

08000194 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000194:	2a00      	cmp	r2, #0
 8000196:	d001      	beq.n	800019c <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000198:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800019a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800019c:	8501      	strh	r1, [r0, #40]	; 0x28
}
 800019e:	e7fc      	b.n	800019a <GPIO_WriteBit+0x6>

080001a0 <NVIC_Init>:
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001a0:	7883      	ldrb	r3, [r0, #2]
{
 80001a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001a4:	7802      	ldrb	r2, [r0, #0]
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d01b      	beq.n	80001e2 <NVIC_Init+0x42>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80001aa:	27ff      	movs	r7, #255	; 0xff
 80001ac:	2403      	movs	r4, #3
 80001ae:	003e      	movs	r6, r7
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80001b0:	25c0      	movs	r5, #192	; 0xc0
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80001b2:	4014      	ands	r4, r2
 80001b4:	00e4      	lsls	r4, r4, #3
 80001b6:	40a6      	lsls	r6, r4
 80001b8:	0891      	lsrs	r1, r2, #2
 80001ba:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <NVIC_Init+0x50>)
 80001bc:	0089      	lsls	r1, r1, #2
 80001be:	18c9      	adds	r1, r1, r3
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80001c0:	00ad      	lsls	r5, r5, #2
 80001c2:	594b      	ldr	r3, [r1, r5]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80001c4:	43b3      	bics	r3, r6
 80001c6:	001e      	movs	r6, r3
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80001c8:	7843      	ldrb	r3, [r0, #1]
 80001ca:	019b      	lsls	r3, r3, #6
 80001cc:	403b      	ands	r3, r7
 80001ce:	40a3      	lsls	r3, r4
 80001d0:	4333      	orrs	r3, r6
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 80001d2:	514b      	str	r3, [r1, r5]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001d4:	231f      	movs	r3, #31
 80001d6:	401a      	ands	r2, r3
 80001d8:	3b1e      	subs	r3, #30
 80001da:	4093      	lsls	r3, r2
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <NVIC_Init+0x50>)
 80001de:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001e2:	231f      	movs	r3, #31
 80001e4:	401a      	ands	r2, r3
 80001e6:	3b1e      	subs	r3, #30
 80001e8:	4093      	lsls	r3, r2
 80001ea:	4a02      	ldr	r2, [pc, #8]	; (80001f4 <NVIC_Init+0x54>)
 80001ec:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 80001ee:	e7f7      	b.n	80001e0 <NVIC_Init+0x40>
 80001f0:	e000e100 	.word	0xe000e100
 80001f4:	e000e104 	.word	0xe000e104

080001f8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80001fa:	695a      	ldr	r2, [r3, #20]
  if (NewState != DISABLE)
 80001fc:	2900      	cmp	r1, #0
 80001fe:	d002      	beq.n	8000206 <RCC_AHBPeriphClockCmd+0xe>
    RCC->AHBENR |= RCC_AHBPeriph;
 8000200:	4310      	orrs	r0, r2
 8000202:	6158      	str	r0, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000204:	4770      	bx	lr
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000206:	4382      	bics	r2, r0
 8000208:	615a      	str	r2, [r3, #20]
}
 800020a:	e7fb      	b.n	8000204 <RCC_AHBPeriphClockCmd+0xc>
 800020c:	40021000 	.word	0x40021000

08000210 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000212:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 8000214:	2900      	cmp	r1, #0
 8000216:	d002      	beq.n	800021e <RCC_APB1PeriphClockCmd+0xe>
    RCC->APB1ENR |= RCC_APB1Periph;
 8000218:	4310      	orrs	r0, r2
 800021a:	61d8      	str	r0, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800021c:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800021e:	4382      	bics	r2, r0
 8000220:	61da      	str	r2, [r3, #28]
}
 8000222:	e7fb      	b.n	800021c <RCC_APB1PeriphClockCmd+0xc>
 8000224:	40021000 	.word	0x40021000

08000228 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000228:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800022a:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 800022c:	4c15      	ldr	r4, [pc, #84]	; (8000284 <TIM_TimeBaseInit+0x5c>)
  tmpcr1 = TIMx->CR1;  
 800022e:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8000230:	42a0      	cmp	r0, r4
 8000232:	d006      	beq.n	8000242 <TIM_TimeBaseInit+0x1a>
 8000234:	2280      	movs	r2, #128	; 0x80
 8000236:	05d2      	lsls	r2, r2, #23
 8000238:	4290      	cmp	r0, r2
 800023a:	d002      	beq.n	8000242 <TIM_TimeBaseInit+0x1a>
 800023c:	4a12      	ldr	r2, [pc, #72]	; (8000288 <TIM_TimeBaseInit+0x60>)
 800023e:	4290      	cmp	r0, r2
 8000240:	d103      	bne.n	800024a <TIM_TimeBaseInit+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000242:	2270      	movs	r2, #112	; 0x70
 8000244:	4393      	bics	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000246:	884a      	ldrh	r2, [r1, #2]
 8000248:	4313      	orrs	r3, r2
  }
 
  if(TIMx != TIM6)
 800024a:	4a10      	ldr	r2, [pc, #64]	; (800028c <TIM_TimeBaseInit+0x64>)
 800024c:	4290      	cmp	r0, r2
 800024e:	d003      	beq.n	8000258 <TIM_TimeBaseInit+0x30>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000250:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <TIM_TimeBaseInit+0x68>)
 8000252:	890d      	ldrh	r5, [r1, #8]
 8000254:	4013      	ands	r3, r2
 8000256:	432b      	orrs	r3, r5
  }

  TIMx->CR1 = tmpcr1;
 8000258:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800025a:	684b      	ldr	r3, [r1, #4]
 800025c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800025e:	880b      	ldrh	r3, [r1, #0]
 8000260:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000262:	42a0      	cmp	r0, r4
 8000264:	d008      	beq.n	8000278 <TIM_TimeBaseInit+0x50>
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <TIM_TimeBaseInit+0x6c>)
 8000268:	4298      	cmp	r0, r3
 800026a:	d005      	beq.n	8000278 <TIM_TimeBaseInit+0x50>
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <TIM_TimeBaseInit+0x70>)
 800026e:	4298      	cmp	r0, r3
 8000270:	d002      	beq.n	8000278 <TIM_TimeBaseInit+0x50>
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <TIM_TimeBaseInit+0x74>)
 8000274:	4298      	cmp	r0, r3
 8000276:	d101      	bne.n	800027c <TIM_TimeBaseInit+0x54>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000278:	7a8b      	ldrb	r3, [r1, #10]
 800027a:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800027c:	2301      	movs	r3, #1
 800027e:	8283      	strh	r3, [r0, #20]
}
 8000280:	bd30      	pop	{r4, r5, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40012c00 	.word	0x40012c00
 8000288:	40000400 	.word	0x40000400
 800028c:	40001000 	.word	0x40001000
 8000290:	fffffcff 	.word	0xfffffcff
 8000294:	40014000 	.word	0x40014000
 8000298:	40014400 	.word	0x40014400
 800029c:	40014800 	.word	0x40014800

080002a0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80002a0:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80002a2:	8802      	ldrh	r2, [r0, #0]
  if (NewState != DISABLE)
 80002a4:	2900      	cmp	r1, #0
 80002a6:	d002      	beq.n	80002ae <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 80002a8:	4313      	orrs	r3, r2
 80002aa:	8003      	strh	r3, [r0, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80002ac:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80002ae:	439a      	bics	r2, r3
 80002b0:	8002      	strh	r2, [r0, #0]
}
 80002b2:	e7fb      	b.n	80002ac <TIM_Cmd+0xc>

080002b4 <TIM_ClearFlag>:
 80002b4:	43c9      	mvns	r1, r1
 80002b6:	b289      	uxth	r1, r1
 80002b8:	8201      	strh	r1, [r0, #16]
 80002ba:	4770      	bx	lr

080002bc <TIM_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80002bc:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80002be:	8983      	ldrh	r3, [r0, #12]
 80002c0:	2000      	movs	r0, #0
 80002c2:	b29b      	uxth	r3, r3
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80002c4:	4211      	tst	r1, r2
 80002c6:	d003      	beq.n	80002d0 <TIM_GetITStatus+0x14>
 80002c8:	4019      	ands	r1, r3
 80002ca:	1e48      	subs	r0, r1, #1
 80002cc:	4181      	sbcs	r1, r0
 80002ce:	b2c8      	uxtb	r0, r1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80002d0:	4770      	bx	lr

080002d2 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80002d2:	43c9      	mvns	r1, r1
 80002d4:	b289      	uxth	r1, r1
 80002d6:	8201      	strh	r1, [r0, #16]
}
 80002d8:	4770      	bx	lr

080002da <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80002da:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 80002dc:	2a00      	cmp	r2, #0
 80002de:	d002      	beq.n	80002e6 <TIM_DMACmd+0xc>
    TIMx->DIER |= TIM_DMASource; 
 80002e0:	4319      	orrs	r1, r3
 80002e2:	8181      	strh	r1, [r0, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 80002e4:	4770      	bx	lr
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80002e6:	438b      	bics	r3, r1
 80002e8:	8183      	strh	r3, [r0, #12]
}
 80002ea:	e7fb      	b.n	80002e4 <TIM_DMACmd+0xa>

080002ec <TIM_ITConfig>:
 80002ec:	b510      	push	{r4, lr}
 80002ee:	f7ff fff4 	bl	80002da <TIM_DMACmd>
 80002f2:	bd10      	pop	{r4, pc}

080002f4 <TIM3_IRQHandler>:
/*
 * ==============================================Make Delay by interrupt timer===============
 * ==========================================================================================
 */
void TIM3_IRQHandler(void)
{
 80002f4:	b510      	push	{r4, lr}
	 if(TIM_GetITStatus( TIM3,TIM_IT_Update)!=RESET) //if update flag turns on
 80002f6:	2101      	movs	r1, #1
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <TIM3_IRQHandler+0x34>)
 80002fa:	f7ff ffdf 	bl	80002bc <TIM_GetITStatus>
 80002fe:	2800      	cmp	r0, #0
 8000300:	d010      	beq.n	8000324 <TIM3_IRQHandler+0x30>
	 {
		 TIM_ClearITPendingBit(TIM3, TIM_IT_Update); //clear update flag
 8000302:	2101      	movs	r1, #1
 8000304:	4808      	ldr	r0, [pc, #32]	; (8000328 <TIM3_IRQHandler+0x34>)
 8000306:	f7ff ffe4 	bl	80002d2 <TIM_ClearITPendingBit>
		 GPIO_WriteBit(GPIOA,LED,(BitAction)(1^GPIO_ReadInputDataBit(GPIOA,LED))); //toggle PB9
 800030a:	2090      	movs	r0, #144	; 0x90
 800030c:	2110      	movs	r1, #16
 800030e:	05c0      	lsls	r0, r0, #23
 8000310:	f7ff ff36 	bl	8000180 <GPIO_ReadInputDataBit>
 8000314:	2201      	movs	r2, #1
 8000316:	4042      	eors	r2, r0
 8000318:	2090      	movs	r0, #144	; 0x90
 800031a:	b2d2      	uxtb	r2, r2
 800031c:	2110      	movs	r1, #16
 800031e:	05c0      	lsls	r0, r0, #23
 8000320:	f7ff ff38 	bl	8000194 <GPIO_WriteBit>
//		 delay  = 1;

	 }
}
 8000324:	bd10      	pop	{r4, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	40000400 	.word	0x40000400

0800032c <HC595_Pulse>:
		Data = Data << 1;
	}
}

void HC595_Pulse(void)
{
 800032c:	b510      	push	{r4, lr}

	GPIO_SetBits(GPIOA,SCK); // Clock High
 800032e:	2490      	movs	r4, #144	; 0x90
 8000330:	05e4      	lsls	r4, r4, #23
 8000332:	0020      	movs	r0, r4
 8000334:	2104      	movs	r1, #4
 8000336:	f7ff ff29 	bl	800018c <GPIO_SetBits>

	GPIO_ResetBits(GPIOA,SCK); // Clock Low
 800033a:	2104      	movs	r1, #4
 800033c:	0020      	movs	r0, r4
 800033e:	f7ff ff27 	bl	8000190 <GPIO_ResetBits>
}
 8000342:	bd10      	pop	{r4, pc}

08000344 <Shift_Out>:
{
 8000344:	b570      	push	{r4, r5, r6, lr}
			GPIO_ResetBits(GPIOA,SDI); // Data Low
 8000346:	2690      	movs	r6, #144	; 0x90
{
 8000348:	0005      	movs	r5, r0
 800034a:	2408      	movs	r4, #8
			GPIO_ResetBits(GPIOA,SDI); // Data Low
 800034c:	05f6      	lsls	r6, r6, #23
		if(Data & 0x80) // dich bit thu 8 vao truoc sau do den 7 6 5 4 3 2 1
 800034e:	b26b      	sxtb	r3, r5
			GPIO_SetBits(GPIOA,SDI); // Data High
 8000350:	2102      	movs	r1, #2
 8000352:	0030      	movs	r0, r6
		if(Data & 0x80) // dich bit thu 8 vao truoc sau do den 7 6 5 4 3 2 1
 8000354:	2b00      	cmp	r3, #0
 8000356:	da0a      	bge.n	800036e <Shift_Out+0x2a>
			GPIO_SetBits(GPIOA,SDI); // Data High
 8000358:	f7ff ff18 	bl	800018c <GPIO_SetBits>
 800035c:	3c01      	subs	r4, #1
		Data = Data << 1;
 800035e:	006d      	lsls	r5, r5, #1
 8000360:	b2e4      	uxtb	r4, r4
		HC595_Pulse();
 8000362:	f7ff ffe3 	bl	800032c <HC595_Pulse>
		Data = Data << 1;
 8000366:	b2ed      	uxtb	r5, r5
	for(uint8_t i = 0; i < 8; i++)
 8000368:	2c00      	cmp	r4, #0
 800036a:	d1f0      	bne.n	800034e <Shift_Out+0xa>
}
 800036c:	bd70      	pop	{r4, r5, r6, pc}
			GPIO_ResetBits(GPIOA,SDI); // Data Low
 800036e:	f7ff ff0f 	bl	8000190 <GPIO_ResetBits>
 8000372:	e7f3      	b.n	800035c <Shift_Out+0x18>

08000374 <HC595_Latch>:
void HC595_Latch(void)
{
 8000374:	b510      	push	{r4, lr}
	  GPIO_SetBits(GPIOA,LATCH); // Latch High
 8000376:	2490      	movs	r4, #144	; 0x90
 8000378:	05e4      	lsls	r4, r4, #23
 800037a:	0020      	movs	r0, r4
 800037c:	2108      	movs	r1, #8
 800037e:	f7ff ff05 	bl	800018c <GPIO_SetBits>
	  GPIO_ResetBits(GPIOA,LATCH); // Latch Low
 8000382:	2108      	movs	r1, #8
 8000384:	0020      	movs	r0, r4
 8000386:	f7ff ff03 	bl	8000190 <GPIO_ResetBits>
}
 800038a:	bd10      	pop	{r4, pc}

0800038c <Led_1>:
{
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	x = 0x01;
 800038e:	2301      	movs	r3, #1
 8000390:	4d1c      	ldr	r5, [pc, #112]	; (8000404 <Led_1+0x78>)
	y = 0x00;
 8000392:	2608      	movs	r6, #8
	x = 0x01;
 8000394:	802b      	strh	r3, [r5, #0]
	y = 0x00;
 8000396:	2300      	movs	r3, #0
 8000398:	4c1b      	ldr	r4, [pc, #108]	; (8000408 <Led_1+0x7c>)
 800039a:	8023      	strh	r3, [r4, #0]
		Shift_Out(x);
 800039c:	7828      	ldrb	r0, [r5, #0]
 800039e:	f7ff ffd1 	bl	8000344 <Shift_Out>
		Shift_Out(0x00);
 80003a2:	2000      	movs	r0, #0
 80003a4:	f7ff ffce 	bl	8000344 <Shift_Out>
		HC595_Latch();
 80003a8:	f7ff ffe4 	bl	8000374 <HC595_Latch>
 80003ac:	4f17      	ldr	r7, [pc, #92]	; (800040c <Led_1+0x80>)
			GPIO_SetBits(GPIOA,LED);
 80003ae:	2090      	movs	r0, #144	; 0x90
 80003b0:	2110      	movs	r1, #16
 80003b2:	05c0      	lsls	r0, r0, #23
 80003b4:	3f01      	subs	r7, #1
 80003b6:	f7ff fee9 	bl	800018c <GPIO_SetBits>
		for(int k= 0;k < 100000; k++)
 80003ba:	2f00      	cmp	r7, #0
 80003bc:	d1f7      	bne.n	80003ae <Led_1+0x22>
		x = x << 1;
 80003be:	882b      	ldrh	r3, [r5, #0]
 80003c0:	3e01      	subs	r6, #1
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	802b      	strh	r3, [r5, #0]
	for(int i = 0 ;i < 8 ; i++)
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d1e8      	bne.n	800039c <Led_1+0x10>
	x = 0x00;
 80003ca:	802e      	strh	r6, [r5, #0]
	y = 0x80;
 80003cc:	2380      	movs	r3, #128	; 0x80
			GPIO_SetBits(GPIOA,LED);
 80003ce:	2690      	movs	r6, #144	; 0x90
	y = 0x80;
 80003d0:	2508      	movs	r5, #8
 80003d2:	8023      	strh	r3, [r4, #0]
			GPIO_SetBits(GPIOA,LED);
 80003d4:	05f6      	lsls	r6, r6, #23
		Shift_Out(0x00);
 80003d6:	2000      	movs	r0, #0
 80003d8:	f7ff ffb4 	bl	8000344 <Shift_Out>
		Shift_Out(y);
 80003dc:	7820      	ldrb	r0, [r4, #0]
 80003de:	f7ff ffb1 	bl	8000344 <Shift_Out>
		HC595_Latch();
 80003e2:	f7ff ffc7 	bl	8000374 <HC595_Latch>
 80003e6:	4f09      	ldr	r7, [pc, #36]	; (800040c <Led_1+0x80>)
			GPIO_SetBits(GPIOA,LED);
 80003e8:	2110      	movs	r1, #16
 80003ea:	0030      	movs	r0, r6
 80003ec:	3f01      	subs	r7, #1
 80003ee:	f7ff fecd 	bl	800018c <GPIO_SetBits>
		for(int k = 0;k < 100000; k++)
 80003f2:	2f00      	cmp	r7, #0
 80003f4:	d1f8      	bne.n	80003e8 <Led_1+0x5c>
		y = y >> 1;
 80003f6:	8823      	ldrh	r3, [r4, #0]
 80003f8:	3d01      	subs	r5, #1
 80003fa:	085b      	lsrs	r3, r3, #1
 80003fc:	8023      	strh	r3, [r4, #0]
	for(int i = 0 ;i < 8 ; i++)
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d1e9      	bne.n	80003d6 <Led_1+0x4a>
}
 8000402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000404:	20000000 	.word	0x20000000
 8000408:	20000020 	.word	0x20000020
 800040c:	000186a0 	.word	0x000186a0

08000410 <Led_2>:
{
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	x = 0x00;
 8000412:	2300      	movs	r3, #0
	y = 0x01;
 8000414:	2608      	movs	r6, #8
	x = 0x00;
 8000416:	4c1c      	ldr	r4, [pc, #112]	; (8000488 <Led_2+0x78>)
	y = 0x01;
 8000418:	4d1c      	ldr	r5, [pc, #112]	; (800048c <Led_2+0x7c>)
	x = 0x00;
 800041a:	8023      	strh	r3, [r4, #0]
	y = 0x01;
 800041c:	3301      	adds	r3, #1
 800041e:	802b      	strh	r3, [r5, #0]
		Shift_Out(x);
 8000420:	7820      	ldrb	r0, [r4, #0]
 8000422:	f7ff ff8f 	bl	8000344 <Shift_Out>
		Shift_Out(y);
 8000426:	7828      	ldrb	r0, [r5, #0]
 8000428:	f7ff ff8c 	bl	8000344 <Shift_Out>
		HC595_Latch();
 800042c:	f7ff ffa2 	bl	8000374 <HC595_Latch>
 8000430:	4f17      	ldr	r7, [pc, #92]	; (8000490 <Led_2+0x80>)
			GPIO_SetBits(GPIOA,LED);
 8000432:	2090      	movs	r0, #144	; 0x90
 8000434:	2110      	movs	r1, #16
 8000436:	05c0      	lsls	r0, r0, #23
 8000438:	3f01      	subs	r7, #1
 800043a:	f7ff fea7 	bl	800018c <GPIO_SetBits>
		for(int k= 0;k < 100000; k++)
 800043e:	2f00      	cmp	r7, #0
 8000440:	d1f7      	bne.n	8000432 <Led_2+0x22>
		y = y << 1;
 8000442:	882b      	ldrh	r3, [r5, #0]
 8000444:	3e01      	subs	r6, #1
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	802b      	strh	r3, [r5, #0]
	for(int i = 0 ;i < 8 ; i++)
 800044a:	2e00      	cmp	r6, #0
 800044c:	d1e8      	bne.n	8000420 <Led_2+0x10>
	x = 0x80;
 800044e:	2380      	movs	r3, #128	; 0x80
	y = 0x00;
 8000450:	802e      	strh	r6, [r5, #0]
	x = 0x80;
 8000452:	8023      	strh	r3, [r4, #0]
	y = 0x00;
 8000454:	3608      	adds	r6, #8
		Shift_Out(x);
 8000456:	7820      	ldrb	r0, [r4, #0]
 8000458:	f7ff ff74 	bl	8000344 <Shift_Out>
		Shift_Out(y);
 800045c:	7828      	ldrb	r0, [r5, #0]
 800045e:	f7ff ff71 	bl	8000344 <Shift_Out>
		HC595_Latch();
 8000462:	f7ff ff87 	bl	8000374 <HC595_Latch>
 8000466:	4f0a      	ldr	r7, [pc, #40]	; (8000490 <Led_2+0x80>)
			GPIO_SetBits(GPIOA,LED);
 8000468:	2090      	movs	r0, #144	; 0x90
 800046a:	2110      	movs	r1, #16
 800046c:	05c0      	lsls	r0, r0, #23
 800046e:	3f01      	subs	r7, #1
 8000470:	f7ff fe8c 	bl	800018c <GPIO_SetBits>
		for(int k= 0;k < 100000; k++)
 8000474:	2f00      	cmp	r7, #0
 8000476:	d1f7      	bne.n	8000468 <Led_2+0x58>
		x = x >> 1;
 8000478:	8823      	ldrh	r3, [r4, #0]
 800047a:	3e01      	subs	r6, #1
 800047c:	085b      	lsrs	r3, r3, #1
 800047e:	8023      	strh	r3, [r4, #0]
	for(int i = 0 ;i < 8 ; i++)
 8000480:	2e00      	cmp	r6, #0
 8000482:	d1e8      	bne.n	8000456 <Led_2+0x46>
}
 8000484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20000000 	.word	0x20000000
 800048c:	20000020 	.word	0x20000020
 8000490:	000186a0 	.word	0x000186a0

08000494 <Led_3>:
{
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	x = 0x01;
 8000496:	2301      	movs	r3, #1
	y = 0x80;
 8000498:	2608      	movs	r6, #8
	x = 0x01;
 800049a:	4d1f      	ldr	r5, [pc, #124]	; (8000518 <Led_3+0x84>)
	y = 0x80;
 800049c:	4c1f      	ldr	r4, [pc, #124]	; (800051c <Led_3+0x88>)
	x = 0x01;
 800049e:	802b      	strh	r3, [r5, #0]
	y = 0x80;
 80004a0:	337f      	adds	r3, #127	; 0x7f
 80004a2:	8023      	strh	r3, [r4, #0]
		Shift_Out(x);
 80004a4:	7828      	ldrb	r0, [r5, #0]
 80004a6:	f7ff ff4d 	bl	8000344 <Shift_Out>
		Shift_Out(y);
 80004aa:	7820      	ldrb	r0, [r4, #0]
 80004ac:	f7ff ff4a 	bl	8000344 <Shift_Out>
		HC595_Latch();
 80004b0:	f7ff ff60 	bl	8000374 <HC595_Latch>
 80004b4:	4f1a      	ldr	r7, [pc, #104]	; (8000520 <Led_3+0x8c>)
			GPIO_SetBits(GPIOA,LED);
 80004b6:	2090      	movs	r0, #144	; 0x90
 80004b8:	2110      	movs	r1, #16
 80004ba:	05c0      	lsls	r0, r0, #23
 80004bc:	3f01      	subs	r7, #1
 80004be:	f7ff fe65 	bl	800018c <GPIO_SetBits>
		for(int k= 0;k < 100000; k++)
 80004c2:	2f00      	cmp	r7, #0
 80004c4:	d1f7      	bne.n	80004b6 <Led_3+0x22>
		x = x << 1;
 80004c6:	882b      	ldrh	r3, [r5, #0]
 80004c8:	3e01      	subs	r6, #1
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	802b      	strh	r3, [r5, #0]
		y = y >> 1;
 80004ce:	8823      	ldrh	r3, [r4, #0]
 80004d0:	085b      	lsrs	r3, r3, #1
 80004d2:	8023      	strh	r3, [r4, #0]
	for(int i = 0; i < 8; i++)
 80004d4:	2e00      	cmp	r6, #0
 80004d6:	d1e5      	bne.n	80004a4 <Led_3+0x10>
	x = 0x80;
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	802b      	strh	r3, [r5, #0]
	y = 0x01;
 80004dc:	3b7f      	subs	r3, #127	; 0x7f
 80004de:	8023      	strh	r3, [r4, #0]
 80004e0:	3608      	adds	r6, #8
		Shift_Out(x);
 80004e2:	7828      	ldrb	r0, [r5, #0]
 80004e4:	f7ff ff2e 	bl	8000344 <Shift_Out>
		Shift_Out(y);
 80004e8:	7820      	ldrb	r0, [r4, #0]
 80004ea:	f7ff ff2b 	bl	8000344 <Shift_Out>
		HC595_Latch();
 80004ee:	f7ff ff41 	bl	8000374 <HC595_Latch>
 80004f2:	4f0b      	ldr	r7, [pc, #44]	; (8000520 <Led_3+0x8c>)
			GPIO_SetBits(GPIOA,LED);
 80004f4:	2090      	movs	r0, #144	; 0x90
 80004f6:	2110      	movs	r1, #16
 80004f8:	05c0      	lsls	r0, r0, #23
 80004fa:	3f01      	subs	r7, #1
 80004fc:	f7ff fe46 	bl	800018c <GPIO_SetBits>
		for(int k= 0;k < 100000; k++)
 8000500:	2f00      	cmp	r7, #0
 8000502:	d1f7      	bne.n	80004f4 <Led_3+0x60>
		x = x >> 1;
 8000504:	882b      	ldrh	r3, [r5, #0]
 8000506:	3e01      	subs	r6, #1
 8000508:	085b      	lsrs	r3, r3, #1
 800050a:	802b      	strh	r3, [r5, #0]
		y = y << 1;
 800050c:	8823      	ldrh	r3, [r4, #0]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	8023      	strh	r3, [r4, #0]
	for(int i = 0; i < 8; i++)
 8000512:	2e00      	cmp	r6, #0
 8000514:	d1e5      	bne.n	80004e2 <Led_3+0x4e>
}
 8000516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	20000020 	.word	0x20000020
 8000520:	000186a0 	.word	0x000186a0

08000524 <Led_4>:
{
 8000524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000526:	2708      	movs	r7, #8
	uint16_t a = 0x00;
 8000528:	2400      	movs	r4, #0
		x = 0x80;
 800052a:	2380      	movs	r3, #128	; 0x80
 800052c:	4e1a      	ldr	r6, [pc, #104]	; (8000598 <Led_4+0x74>)
		y = 0x80;
 800052e:	4d1b      	ldr	r5, [pc, #108]	; (800059c <Led_4+0x78>)
		x = 0x80;
 8000530:	8033      	strh	r3, [r6, #0]
		y = 0x80;
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	802b      	strh	r3, [r5, #0]
		for(int j = 0; j < 8 - i;j++)
 8000536:	2300      	movs	r3, #0
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	9b00      	ldr	r3, [sp, #0]
 800053c:	42bb      	cmp	r3, r7
 800053e:	db07      	blt.n	8000550 <Led_4+0x2c>
		a = a |0x01;
 8000540:	2301      	movs	r3, #1
		a = a << 1;
 8000542:	0064      	lsls	r4, r4, #1
 8000544:	b2a4      	uxth	r4, r4
 8000546:	3f01      	subs	r7, #1
		a = a |0x01;
 8000548:	431c      	orrs	r4, r3
	for(int i = 0; i < 8; i++)
 800054a:	2f00      	cmp	r7, #0
 800054c:	d1ed      	bne.n	800052a <Led_4+0x6>
}
 800054e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			x = x | a;
 8000550:	8830      	ldrh	r0, [r6, #0]
			y = y | b;
 8000552:	882b      	ldrh	r3, [r5, #0]
			x = x | a;
 8000554:	4320      	orrs	r0, r4
			y = y | b;
 8000556:	4323      	orrs	r3, r4
			x = x | a;
 8000558:	8030      	strh	r0, [r6, #0]
			Shift_Out(x);
 800055a:	b2c0      	uxtb	r0, r0
			y = y | b;
 800055c:	802b      	strh	r3, [r5, #0]
			Shift_Out(x);
 800055e:	f7ff fef1 	bl	8000344 <Shift_Out>
			Shift_Out(y);
 8000562:	7828      	ldrb	r0, [r5, #0]
 8000564:	f7ff feee 	bl	8000344 <Shift_Out>
			HC595_Latch();
 8000568:	f7ff ff04 	bl	8000374 <HC595_Latch>
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <Led_4+0x7c>)
 800056e:	9301      	str	r3, [sp, #4]
				GPIO_SetBits(GPIOA,LED);
 8000570:	2090      	movs	r0, #144	; 0x90
 8000572:	2110      	movs	r1, #16
 8000574:	05c0      	lsls	r0, r0, #23
 8000576:	f7ff fe09 	bl	800018c <GPIO_SetBits>
 800057a:	9b01      	ldr	r3, [sp, #4]
 800057c:	3b01      	subs	r3, #1
 800057e:	9301      	str	r3, [sp, #4]
			for(int k= 0;k < 500000; k++)
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f5      	bne.n	8000570 <Led_4+0x4c>
			x = x >> 1;
 8000584:	8833      	ldrh	r3, [r6, #0]
 8000586:	085b      	lsrs	r3, r3, #1
 8000588:	8033      	strh	r3, [r6, #0]
			y = y >> 1;
 800058a:	882b      	ldrh	r3, [r5, #0]
 800058c:	085b      	lsrs	r3, r3, #1
 800058e:	802b      	strh	r3, [r5, #0]
		for(int j = 0; j < 8 - i;j++)
 8000590:	9b00      	ldr	r3, [sp, #0]
 8000592:	3301      	adds	r3, #1
 8000594:	e7d0      	b.n	8000538 <Led_4+0x14>
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	20000000 	.word	0x20000000
 800059c:	20000020 	.word	0x20000020
 80005a0:	0007a120 	.word	0x0007a120

080005a4 <main>:
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80005a4:	2080      	movs	r0, #128	; 0x80
{
 80005a6:	b570      	push	{r4, r5, r6, lr}
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80005a8:	2101      	movs	r1, #1
 80005aa:	0280      	lsls	r0, r0, #10
 80005ac:	f7ff fe24 	bl	80001f8 <RCC_AHBPeriphClockCmd>
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005b0:	2090      	movs	r0, #144	; 0x90
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80005b2:	2401      	movs	r4, #1
	GPIO_InitStructure.GPIO_Pin = LED|SDI|SCK|LATCH;
 80005b4:	261e      	movs	r6, #30
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005b6:	2500      	movs	r5, #0
	GPIO_InitStructure.GPIO_Pin = LED|SDI|SCK|LATCH;
 80005b8:	491a      	ldr	r1, [pc, #104]	; (8000624 <main+0x80>)
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005ba:	05c0      	lsls	r0, r0, #23
	GPIO_InitStructure.GPIO_Pin = LED|SDI|SCK|LATCH;
 80005bc:	600e      	str	r6, [r1, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80005be:	710c      	strb	r4, [r1, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005c0:	718d      	strb	r5, [r1, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005c2:	f7ff fda1 	bl	8000108 <GPIO_Init>
	GPIO_ResetBits(GPIOA,LED|SDI|SCK|LATCH);
 80005c6:	2090      	movs	r0, #144	; 0x90
 80005c8:	0031      	movs	r1, r6
 80005ca:	05c0      	lsls	r0, r0, #23
 80005cc:	f7ff fde0 	bl	8000190 <GPIO_ResetBits>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80005d0:	0021      	movs	r1, r4
 80005d2:	2002      	movs	r0, #2
 80005d4:	f7ff fe1c 	bl	8000210 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Prescaler = 4800;
 80005d8:	2396      	movs	r3, #150	; 0x96
 80005da:	4913      	ldr	r1, [pc, #76]	; (8000628 <main+0x84>)
 80005dc:	015b      	lsls	r3, r3, #5
 80005de:	800b      	strh	r3, [r1, #0]
	TIM_TimeBaseStructure.TIM_Period = 3333;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <main+0x88>)
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80005e2:	4813      	ldr	r0, [pc, #76]	; (8000630 <main+0x8c>)
	TIM_TimeBaseStructure.TIM_Period = 3333;
 80005e4:	604b      	str	r3, [r1, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80005e6:	804d      	strh	r5, [r1, #2]
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80005e8:	f7ff fe1e 	bl	8000228 <TIM_TimeBaseInit>
	TIM_ClearFlag(TIM3, TIM_FLAG_Update);  // clear update flag
 80005ec:	0021      	movs	r1, r4
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <main+0x8c>)
 80005f0:	f7ff fe60 	bl	80002b4 <TIM_ClearFlag>
	TIM_ITConfig( TIM3, TIM_IT_Update, ENABLE); // enable Update Interrupt
 80005f4:	0022      	movs	r2, r4
 80005f6:	0021      	movs	r1, r4
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <main+0x8c>)
 80005fa:	f7ff fe77 	bl	80002ec <TIM_ITConfig>
	TIM_Cmd(TIM3, ENABLE); //enable timer 4
 80005fe:	480c      	ldr	r0, [pc, #48]	; (8000630 <main+0x8c>)
 8000600:	0021      	movs	r1, r4
 8000602:	f7ff fe4d 	bl	80002a0 <TIM_Cmd>
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8000606:	2310      	movs	r3, #16
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <main+0x90>)
 800060a:	7003      	strb	r3, [r0, #0]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800060c:	7084      	strb	r4, [r0, #2]
	NVIC_Init(&NVIC_InitStructure);
 800060e:	f7ff fdc7 	bl	80001a0 <NVIC_Init>
		Led_1();
 8000612:	f7ff febb 	bl	800038c <Led_1>
		Led_2();
 8000616:	f7ff fefb 	bl	8000410 <Led_2>
		Led_3();
 800061a:	f7ff ff3b 	bl	8000494 <Led_3>
		Led_4();
 800061e:	f7ff ff81 	bl	8000524 <Led_4>
 8000622:	e7f6      	b.n	8000612 <main+0x6e>
 8000624:	20000044 	.word	0x20000044
 8000628:	20000024 	.word	0x20000024
 800062c:	00000d05 	.word	0x00000d05
 8000630:	40000400 	.word	0x40000400
 8000634:	20000064 	.word	0x20000064

08000638 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800063c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800063e:	e003      	b.n	8000648 <LoopCopyDataInit>

08000640 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000642:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000644:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000646:	3104      	adds	r1, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <LoopForever+0xa>)
  ldr r3, =_edata
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <LoopForever+0xe>)
  adds r2, r0, r1
 800064c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800064e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000650:	d3f6      	bcc.n	8000640 <CopyDataInit>
  ldr r2, =_sbss
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <LoopForever+0x12>)
  b LoopFillZerobss
 8000654:	e002      	b.n	800065c <LoopFillZerobss>

08000656 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  str  r3, [r2]
 8000658:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065a:	3204      	adds	r2, #4

0800065c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <LoopForever+0x16>)
  cmp r2, r3
 800065e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000660:	d3f9      	bcc.n	8000656 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000662:	f000 f813 	bl	800068c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000666:	f000 f88d 	bl	8000784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff ff9b 	bl	80005a4 <main>

0800066e <LoopForever>:

LoopForever:
    b LoopForever
 800066e:	e7fe      	b.n	800066e <LoopForever>
  ldr   r0, =_estack
 8000670:	20001000 	.word	0x20001000
  ldr r3, =_sidata
 8000674:	080007ec 	.word	0x080007ec
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800067c:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000680:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000684:	20000070 	.word	0x20000070

08000688 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_IRQHandler>
	...

0800068c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 800068c:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800068e:	2101      	movs	r1, #1
 8000690:	4b34      	ldr	r3, [pc, #208]	; (8000764 <SystemInit+0xd8>)
#if defined(STM32F051)  
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000692:	4835      	ldr	r0, [pc, #212]	; (8000768 <SystemInit+0xdc>)
  RCC->CR |= (uint32_t)0x00000001;
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	430a      	orrs	r2, r1
 8000698:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800069a:	685a      	ldr	r2, [r3, #4]
 800069c:	4002      	ands	r2, r0
 800069e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4832      	ldr	r0, [pc, #200]	; (800076c <SystemInit+0xe0>)
 80006a4:	4002      	ands	r2, r0
 80006a6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4831      	ldr	r0, [pc, #196]	; (8000770 <SystemInit+0xe4>)
 80006ac:	4002      	ands	r2, r0
 80006ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	4830      	ldr	r0, [pc, #192]	; (8000774 <SystemInit+0xe8>)
 80006b4:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80006b6:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80006b8:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80006ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006bc:	4382      	bics	r2, r0
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80006c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c2:	482d      	ldr	r0, [pc, #180]	; (8000778 <SystemInit+0xec>)
 80006c4:	4002      	ands	r2, r0
 80006c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80006c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80006ca:	2080      	movs	r0, #128	; 0x80
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80006cc:	438a      	bics	r2, r1
 80006ce:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->CIR = 0x00000000;
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80006d4:	9200      	str	r2, [sp, #0]
 80006d6:	9201      	str	r2, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	6819      	ldr	r1, [r3, #0]
 80006dc:	0252      	lsls	r2, r2, #9
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80006e2:	0280      	lsls	r0, r0, #10
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80006e4:	22a0      	movs	r2, #160	; 0xa0
 80006e6:	0004      	movs	r4, r0
 80006e8:	01d2      	lsls	r2, r2, #7
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	4001      	ands	r1, r0
 80006ee:	9101      	str	r1, [sp, #4]
    StartUpCounter++;  
 80006f0:	9900      	ldr	r1, [sp, #0]
 80006f2:	3101      	adds	r1, #1
 80006f4:	9100      	str	r1, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80006f6:	9901      	ldr	r1, [sp, #4]
 80006f8:	2900      	cmp	r1, #0
 80006fa:	d102      	bne.n	8000702 <SystemInit+0x76>
 80006fc:	9900      	ldr	r1, [sp, #0]
 80006fe:	4291      	cmp	r1, r2
 8000700:	d1f3      	bne.n	80006ea <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4022      	ands	r2, r4
 8000706:	d000      	beq.n	800070a <SystemInit+0x7e>
  {
    HSEStatus = (uint32_t)0x01;
 8000708:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800070a:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800070c:	9a01      	ldr	r2, [sp, #4]
 800070e:	2a01      	cmp	r2, #1
 8000710:	d126      	bne.n	8000760 <SystemInit+0xd4>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000712:	2111      	movs	r1, #17
 8000714:	4a19      	ldr	r2, [pc, #100]	; (800077c <SystemInit+0xf0>)
 8000716:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000718:	685a      	ldr	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800071a:	4919      	ldr	r1, [pc, #100]	; (8000780 <SystemInit+0xf4>)
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800071c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000722:	685a      	ldr	r2, [r3, #4]
 8000724:	400a      	ands	r2, r1
 8000726:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL2);
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	6859      	ldr	r1, [r3, #4]
 800072c:	0252      	lsls	r2, r2, #9
 800072e:	430a      	orrs	r2, r1
 8000730:	605a      	str	r2, [r3, #4]
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	0452      	lsls	r2, r2, #17
 8000738:	430a      	orrs	r2, r1
 800073a:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0492      	lsls	r2, r2, #18
 8000740:	6819      	ldr	r1, [r3, #0]
 8000742:	4211      	tst	r1, r2
 8000744:	d0fc      	beq.n	8000740 <SystemInit+0xb4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000746:	2103      	movs	r1, #3
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	438a      	bics	r2, r1
 800074c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800074e:	2202      	movs	r2, #2
 8000750:	6859      	ldr	r1, [r3, #4]
 8000752:	430a      	orrs	r2, r1

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000754:	210c      	movs	r1, #12
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000756:	605a      	str	r2, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	400a      	ands	r2, r1
 800075c:	2a08      	cmp	r2, #8
 800075e:	d1fb      	bne.n	8000758 <SystemInit+0xcc>
}
 8000760:	bd13      	pop	{r0, r1, r4, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40021000 	.word	0x40021000
 8000768:	08ffb80c 	.word	0x08ffb80c
 800076c:	fef6ffff 	.word	0xfef6ffff
 8000770:	fffbffff 	.word	0xfffbffff
 8000774:	ffc0ffff 	.word	0xffc0ffff
 8000778:	fffffeac 	.word	0xfffffeac
 800077c:	40022000 	.word	0x40022000
 8000780:	ffc07fff 	.word	0xffc07fff

08000784 <__libc_init_array>:
 8000784:	b570      	push	{r4, r5, r6, lr}
 8000786:	2600      	movs	r6, #0
 8000788:	4d0c      	ldr	r5, [pc, #48]	; (80007bc <__libc_init_array+0x38>)
 800078a:	4c0d      	ldr	r4, [pc, #52]	; (80007c0 <__libc_init_array+0x3c>)
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	10a4      	asrs	r4, r4, #2
 8000790:	42a6      	cmp	r6, r4
 8000792:	d109      	bne.n	80007a8 <__libc_init_array+0x24>
 8000794:	2600      	movs	r6, #0
 8000796:	f000 f819 	bl	80007cc <_init>
 800079a:	4d0a      	ldr	r5, [pc, #40]	; (80007c4 <__libc_init_array+0x40>)
 800079c:	4c0a      	ldr	r4, [pc, #40]	; (80007c8 <__libc_init_array+0x44>)
 800079e:	1b64      	subs	r4, r4, r5
 80007a0:	10a4      	asrs	r4, r4, #2
 80007a2:	42a6      	cmp	r6, r4
 80007a4:	d105      	bne.n	80007b2 <__libc_init_array+0x2e>
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	00b3      	lsls	r3, r6, #2
 80007aa:	58eb      	ldr	r3, [r5, r3]
 80007ac:	4798      	blx	r3
 80007ae:	3601      	adds	r6, #1
 80007b0:	e7ee      	b.n	8000790 <__libc_init_array+0xc>
 80007b2:	00b3      	lsls	r3, r6, #2
 80007b4:	58eb      	ldr	r3, [r5, r3]
 80007b6:	4798      	blx	r3
 80007b8:	3601      	adds	r6, #1
 80007ba:	e7f2      	b.n	80007a2 <__libc_init_array+0x1e>
 80007bc:	080007e4 	.word	0x080007e4
 80007c0:	080007e4 	.word	0x080007e4
 80007c4:	080007e4 	.word	0x080007e4
 80007c8:	080007e8 	.word	0x080007e8

080007cc <_init>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d2:	bc08      	pop	{r3}
 80007d4:	469e      	mov	lr, r3
 80007d6:	4770      	bx	lr

080007d8 <_fini>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007de:	bc08      	pop	{r3}
 80007e0:	469e      	mov	lr, r3
 80007e2:	4770      	bx	lr
