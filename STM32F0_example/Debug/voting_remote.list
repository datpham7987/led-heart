
voting_remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  080040b4  080040b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20000000  08004430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000100  200001f0  08004620  000201f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  200002f0  08004620  000202f0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fb61  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000030c3  00000000  00000000  0002fd79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006e85  00000000  00000000  00032e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d88  00000000  00000000  00039cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f78  00000000  00000000  0003aa50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005c3a  00000000  00000000  0003b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004146  00000000  00000000  00041602  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00045748  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002524  00000000  00000000  000457c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00047ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800409c 	.word	0x0800409c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	0800409c 	.word	0x0800409c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uhi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5a09      	ldrh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_cdrcmple>:
 800041c:	4684      	mov	ip, r0
 800041e:	1c10      	adds	r0, r2, #0
 8000420:	4662      	mov	r2, ip
 8000422:	468c      	mov	ip, r1
 8000424:	1c19      	adds	r1, r3, #0
 8000426:	4663      	mov	r3, ip
 8000428:	e000      	b.n	800042c <__aeabi_cdcmpeq>
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdcmpeq>:
 800042c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042e:	f000 f8d1 	bl	80005d4 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	d401      	bmi.n	800043a <__aeabi_cdcmpeq+0xe>
 8000436:	2100      	movs	r1, #0
 8000438:	42c8      	cmn	r0, r1
 800043a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800043c <__aeabi_dcmpeq>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f82b 	bl	8000498 <__eqdf2>
 8000442:	4240      	negs	r0, r0
 8000444:	3001      	adds	r0, #1
 8000446:	bd10      	pop	{r4, pc}

08000448 <__aeabi_dcmplt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 f8c3 	bl	80005d4 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	db01      	blt.n	8000456 <__aeabi_dcmplt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmple>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 f8b9 	bl	80005d4 <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dd01      	ble.n	800046a <__aeabi_dcmple+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpgt>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 f84b 	bl	800050c <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dc01      	bgt.n	800047e <__aeabi_dcmpgt+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpge>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 f841 	bl	800050c <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	da01      	bge.n	8000492 <__aeabi_dcmpge+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__eqdf2>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	464f      	mov	r7, r9
 800049c:	4646      	mov	r6, r8
 800049e:	46d6      	mov	lr, sl
 80004a0:	005c      	lsls	r4, r3, #1
 80004a2:	b5c0      	push	{r6, r7, lr}
 80004a4:	031f      	lsls	r7, r3, #12
 80004a6:	0fdb      	lsrs	r3, r3, #31
 80004a8:	469a      	mov	sl, r3
 80004aa:	4b17      	ldr	r3, [pc, #92]	; (8000508 <__eqdf2+0x70>)
 80004ac:	030e      	lsls	r6, r1, #12
 80004ae:	004d      	lsls	r5, r1, #1
 80004b0:	4684      	mov	ip, r0
 80004b2:	4680      	mov	r8, r0
 80004b4:	0b36      	lsrs	r6, r6, #12
 80004b6:	0d6d      	lsrs	r5, r5, #21
 80004b8:	0fc9      	lsrs	r1, r1, #31
 80004ba:	4691      	mov	r9, r2
 80004bc:	0b3f      	lsrs	r7, r7, #12
 80004be:	0d64      	lsrs	r4, r4, #21
 80004c0:	2001      	movs	r0, #1
 80004c2:	429d      	cmp	r5, r3
 80004c4:	d008      	beq.n	80004d8 <__eqdf2+0x40>
 80004c6:	429c      	cmp	r4, r3
 80004c8:	d001      	beq.n	80004ce <__eqdf2+0x36>
 80004ca:	42a5      	cmp	r5, r4
 80004cc:	d00b      	beq.n	80004e6 <__eqdf2+0x4e>
 80004ce:	bc1c      	pop	{r2, r3, r4}
 80004d0:	4690      	mov	r8, r2
 80004d2:	4699      	mov	r9, r3
 80004d4:	46a2      	mov	sl, r4
 80004d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d8:	4663      	mov	r3, ip
 80004da:	4333      	orrs	r3, r6
 80004dc:	d1f7      	bne.n	80004ce <__eqdf2+0x36>
 80004de:	42ac      	cmp	r4, r5
 80004e0:	d1f5      	bne.n	80004ce <__eqdf2+0x36>
 80004e2:	433a      	orrs	r2, r7
 80004e4:	d1f3      	bne.n	80004ce <__eqdf2+0x36>
 80004e6:	2001      	movs	r0, #1
 80004e8:	42be      	cmp	r6, r7
 80004ea:	d1f0      	bne.n	80004ce <__eqdf2+0x36>
 80004ec:	45c8      	cmp	r8, r9
 80004ee:	d1ee      	bne.n	80004ce <__eqdf2+0x36>
 80004f0:	4551      	cmp	r1, sl
 80004f2:	d007      	beq.n	8000504 <__eqdf2+0x6c>
 80004f4:	2d00      	cmp	r5, #0
 80004f6:	d1ea      	bne.n	80004ce <__eqdf2+0x36>
 80004f8:	4663      	mov	r3, ip
 80004fa:	431e      	orrs	r6, r3
 80004fc:	0030      	movs	r0, r6
 80004fe:	1e46      	subs	r6, r0, #1
 8000500:	41b0      	sbcs	r0, r6
 8000502:	e7e4      	b.n	80004ce <__eqdf2+0x36>
 8000504:	2000      	movs	r0, #0
 8000506:	e7e2      	b.n	80004ce <__eqdf2+0x36>
 8000508:	000007ff 	.word	0x000007ff

0800050c <__gedf2>:
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	4645      	mov	r5, r8
 8000510:	46de      	mov	lr, fp
 8000512:	4657      	mov	r7, sl
 8000514:	464e      	mov	r6, r9
 8000516:	b5e0      	push	{r5, r6, r7, lr}
 8000518:	031f      	lsls	r7, r3, #12
 800051a:	0b3d      	lsrs	r5, r7, #12
 800051c:	4f2c      	ldr	r7, [pc, #176]	; (80005d0 <__gedf2+0xc4>)
 800051e:	030e      	lsls	r6, r1, #12
 8000520:	004c      	lsls	r4, r1, #1
 8000522:	46ab      	mov	fp, r5
 8000524:	005d      	lsls	r5, r3, #1
 8000526:	4684      	mov	ip, r0
 8000528:	0b36      	lsrs	r6, r6, #12
 800052a:	0d64      	lsrs	r4, r4, #21
 800052c:	0fc9      	lsrs	r1, r1, #31
 800052e:	4690      	mov	r8, r2
 8000530:	0d6d      	lsrs	r5, r5, #21
 8000532:	0fdb      	lsrs	r3, r3, #31
 8000534:	42bc      	cmp	r4, r7
 8000536:	d02a      	beq.n	800058e <__gedf2+0x82>
 8000538:	4f25      	ldr	r7, [pc, #148]	; (80005d0 <__gedf2+0xc4>)
 800053a:	42bd      	cmp	r5, r7
 800053c:	d02d      	beq.n	800059a <__gedf2+0x8e>
 800053e:	2c00      	cmp	r4, #0
 8000540:	d10f      	bne.n	8000562 <__gedf2+0x56>
 8000542:	4330      	orrs	r0, r6
 8000544:	0007      	movs	r7, r0
 8000546:	4681      	mov	r9, r0
 8000548:	4278      	negs	r0, r7
 800054a:	4178      	adcs	r0, r7
 800054c:	b2c0      	uxtb	r0, r0
 800054e:	2d00      	cmp	r5, #0
 8000550:	d117      	bne.n	8000582 <__gedf2+0x76>
 8000552:	465f      	mov	r7, fp
 8000554:	433a      	orrs	r2, r7
 8000556:	d114      	bne.n	8000582 <__gedf2+0x76>
 8000558:	464b      	mov	r3, r9
 800055a:	2000      	movs	r0, #0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d00a      	beq.n	8000576 <__gedf2+0x6a>
 8000560:	e006      	b.n	8000570 <__gedf2+0x64>
 8000562:	2d00      	cmp	r5, #0
 8000564:	d102      	bne.n	800056c <__gedf2+0x60>
 8000566:	4658      	mov	r0, fp
 8000568:	4302      	orrs	r2, r0
 800056a:	d001      	beq.n	8000570 <__gedf2+0x64>
 800056c:	4299      	cmp	r1, r3
 800056e:	d018      	beq.n	80005a2 <__gedf2+0x96>
 8000570:	4248      	negs	r0, r1
 8000572:	2101      	movs	r1, #1
 8000574:	4308      	orrs	r0, r1
 8000576:	bc3c      	pop	{r2, r3, r4, r5}
 8000578:	4690      	mov	r8, r2
 800057a:	4699      	mov	r9, r3
 800057c:	46a2      	mov	sl, r4
 800057e:	46ab      	mov	fp, r5
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000582:	2800      	cmp	r0, #0
 8000584:	d0f2      	beq.n	800056c <__gedf2+0x60>
 8000586:	2001      	movs	r0, #1
 8000588:	3b01      	subs	r3, #1
 800058a:	4318      	orrs	r0, r3
 800058c:	e7f3      	b.n	8000576 <__gedf2+0x6a>
 800058e:	0037      	movs	r7, r6
 8000590:	4307      	orrs	r7, r0
 8000592:	d0d1      	beq.n	8000538 <__gedf2+0x2c>
 8000594:	2002      	movs	r0, #2
 8000596:	4240      	negs	r0, r0
 8000598:	e7ed      	b.n	8000576 <__gedf2+0x6a>
 800059a:	465f      	mov	r7, fp
 800059c:	4317      	orrs	r7, r2
 800059e:	d0ce      	beq.n	800053e <__gedf2+0x32>
 80005a0:	e7f8      	b.n	8000594 <__gedf2+0x88>
 80005a2:	42ac      	cmp	r4, r5
 80005a4:	dce4      	bgt.n	8000570 <__gedf2+0x64>
 80005a6:	da03      	bge.n	80005b0 <__gedf2+0xa4>
 80005a8:	1e48      	subs	r0, r1, #1
 80005aa:	2101      	movs	r1, #1
 80005ac:	4308      	orrs	r0, r1
 80005ae:	e7e2      	b.n	8000576 <__gedf2+0x6a>
 80005b0:	455e      	cmp	r6, fp
 80005b2:	d8dd      	bhi.n	8000570 <__gedf2+0x64>
 80005b4:	d006      	beq.n	80005c4 <__gedf2+0xb8>
 80005b6:	2000      	movs	r0, #0
 80005b8:	455e      	cmp	r6, fp
 80005ba:	d2dc      	bcs.n	8000576 <__gedf2+0x6a>
 80005bc:	2301      	movs	r3, #1
 80005be:	1e48      	subs	r0, r1, #1
 80005c0:	4318      	orrs	r0, r3
 80005c2:	e7d8      	b.n	8000576 <__gedf2+0x6a>
 80005c4:	45c4      	cmp	ip, r8
 80005c6:	d8d3      	bhi.n	8000570 <__gedf2+0x64>
 80005c8:	2000      	movs	r0, #0
 80005ca:	45c4      	cmp	ip, r8
 80005cc:	d3f6      	bcc.n	80005bc <__gedf2+0xb0>
 80005ce:	e7d2      	b.n	8000576 <__gedf2+0x6a>
 80005d0:	000007ff 	.word	0x000007ff

080005d4 <__ledf2>:
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	464e      	mov	r6, r9
 80005d8:	4645      	mov	r5, r8
 80005da:	46de      	mov	lr, fp
 80005dc:	4657      	mov	r7, sl
 80005de:	005c      	lsls	r4, r3, #1
 80005e0:	b5e0      	push	{r5, r6, r7, lr}
 80005e2:	031f      	lsls	r7, r3, #12
 80005e4:	0fdb      	lsrs	r3, r3, #31
 80005e6:	4699      	mov	r9, r3
 80005e8:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <__ledf2+0xc0>)
 80005ea:	030e      	lsls	r6, r1, #12
 80005ec:	004d      	lsls	r5, r1, #1
 80005ee:	0fc9      	lsrs	r1, r1, #31
 80005f0:	4684      	mov	ip, r0
 80005f2:	0b36      	lsrs	r6, r6, #12
 80005f4:	0d6d      	lsrs	r5, r5, #21
 80005f6:	468b      	mov	fp, r1
 80005f8:	4690      	mov	r8, r2
 80005fa:	0b3f      	lsrs	r7, r7, #12
 80005fc:	0d64      	lsrs	r4, r4, #21
 80005fe:	429d      	cmp	r5, r3
 8000600:	d020      	beq.n	8000644 <__ledf2+0x70>
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <__ledf2+0xc0>)
 8000604:	429c      	cmp	r4, r3
 8000606:	d022      	beq.n	800064e <__ledf2+0x7a>
 8000608:	2d00      	cmp	r5, #0
 800060a:	d112      	bne.n	8000632 <__ledf2+0x5e>
 800060c:	4330      	orrs	r0, r6
 800060e:	4243      	negs	r3, r0
 8000610:	4143      	adcs	r3, r0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2c00      	cmp	r4, #0
 8000616:	d01f      	beq.n	8000658 <__ledf2+0x84>
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00c      	beq.n	8000636 <__ledf2+0x62>
 800061c:	464b      	mov	r3, r9
 800061e:	2001      	movs	r0, #1
 8000620:	3b01      	subs	r3, #1
 8000622:	4303      	orrs	r3, r0
 8000624:	0018      	movs	r0, r3
 8000626:	bc3c      	pop	{r2, r3, r4, r5}
 8000628:	4690      	mov	r8, r2
 800062a:	4699      	mov	r9, r3
 800062c:	46a2      	mov	sl, r4
 800062e:	46ab      	mov	fp, r5
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000632:	2c00      	cmp	r4, #0
 8000634:	d016      	beq.n	8000664 <__ledf2+0x90>
 8000636:	45cb      	cmp	fp, r9
 8000638:	d017      	beq.n	800066a <__ledf2+0x96>
 800063a:	465b      	mov	r3, fp
 800063c:	4259      	negs	r1, r3
 800063e:	2301      	movs	r3, #1
 8000640:	430b      	orrs	r3, r1
 8000642:	e7ef      	b.n	8000624 <__ledf2+0x50>
 8000644:	0031      	movs	r1, r6
 8000646:	2302      	movs	r3, #2
 8000648:	4301      	orrs	r1, r0
 800064a:	d1eb      	bne.n	8000624 <__ledf2+0x50>
 800064c:	e7d9      	b.n	8000602 <__ledf2+0x2e>
 800064e:	0039      	movs	r1, r7
 8000650:	2302      	movs	r3, #2
 8000652:	4311      	orrs	r1, r2
 8000654:	d1e6      	bne.n	8000624 <__ledf2+0x50>
 8000656:	e7d7      	b.n	8000608 <__ledf2+0x34>
 8000658:	433a      	orrs	r2, r7
 800065a:	d1dd      	bne.n	8000618 <__ledf2+0x44>
 800065c:	2300      	movs	r3, #0
 800065e:	2800      	cmp	r0, #0
 8000660:	d0e0      	beq.n	8000624 <__ledf2+0x50>
 8000662:	e7ea      	b.n	800063a <__ledf2+0x66>
 8000664:	433a      	orrs	r2, r7
 8000666:	d1e6      	bne.n	8000636 <__ledf2+0x62>
 8000668:	e7e7      	b.n	800063a <__ledf2+0x66>
 800066a:	42a5      	cmp	r5, r4
 800066c:	dce5      	bgt.n	800063a <__ledf2+0x66>
 800066e:	db05      	blt.n	800067c <__ledf2+0xa8>
 8000670:	42be      	cmp	r6, r7
 8000672:	d8e2      	bhi.n	800063a <__ledf2+0x66>
 8000674:	d007      	beq.n	8000686 <__ledf2+0xb2>
 8000676:	2300      	movs	r3, #0
 8000678:	42be      	cmp	r6, r7
 800067a:	d2d3      	bcs.n	8000624 <__ledf2+0x50>
 800067c:	4659      	mov	r1, fp
 800067e:	2301      	movs	r3, #1
 8000680:	3901      	subs	r1, #1
 8000682:	430b      	orrs	r3, r1
 8000684:	e7ce      	b.n	8000624 <__ledf2+0x50>
 8000686:	45c4      	cmp	ip, r8
 8000688:	d8d7      	bhi.n	800063a <__ledf2+0x66>
 800068a:	2300      	movs	r3, #0
 800068c:	45c4      	cmp	ip, r8
 800068e:	d3f5      	bcc.n	800067c <__ledf2+0xa8>
 8000690:	e7c8      	b.n	8000624 <__ledf2+0x50>
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	000007ff 	.word	0x000007ff

08000698 <__aeabi_dmul>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	4657      	mov	r7, sl
 800069c:	4645      	mov	r5, r8
 800069e:	46de      	mov	lr, fp
 80006a0:	464e      	mov	r6, r9
 80006a2:	b5e0      	push	{r5, r6, r7, lr}
 80006a4:	030c      	lsls	r4, r1, #12
 80006a6:	4698      	mov	r8, r3
 80006a8:	004e      	lsls	r6, r1, #1
 80006aa:	0b23      	lsrs	r3, r4, #12
 80006ac:	b087      	sub	sp, #28
 80006ae:	0007      	movs	r7, r0
 80006b0:	4692      	mov	sl, r2
 80006b2:	469b      	mov	fp, r3
 80006b4:	0d76      	lsrs	r6, r6, #21
 80006b6:	0fcd      	lsrs	r5, r1, #31
 80006b8:	2e00      	cmp	r6, #0
 80006ba:	d06b      	beq.n	8000794 <__aeabi_dmul+0xfc>
 80006bc:	4b6d      	ldr	r3, [pc, #436]	; (8000874 <__aeabi_dmul+0x1dc>)
 80006be:	429e      	cmp	r6, r3
 80006c0:	d035      	beq.n	800072e <__aeabi_dmul+0x96>
 80006c2:	2480      	movs	r4, #128	; 0x80
 80006c4:	465b      	mov	r3, fp
 80006c6:	0f42      	lsrs	r2, r0, #29
 80006c8:	0424      	lsls	r4, r4, #16
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4314      	orrs	r4, r2
 80006ce:	431c      	orrs	r4, r3
 80006d0:	00c3      	lsls	r3, r0, #3
 80006d2:	4699      	mov	r9, r3
 80006d4:	4b68      	ldr	r3, [pc, #416]	; (8000878 <__aeabi_dmul+0x1e0>)
 80006d6:	46a3      	mov	fp, r4
 80006d8:	469c      	mov	ip, r3
 80006da:	2300      	movs	r3, #0
 80006dc:	2700      	movs	r7, #0
 80006de:	4466      	add	r6, ip
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	4643      	mov	r3, r8
 80006e4:	031c      	lsls	r4, r3, #12
 80006e6:	005a      	lsls	r2, r3, #1
 80006e8:	0fdb      	lsrs	r3, r3, #31
 80006ea:	4650      	mov	r0, sl
 80006ec:	0b24      	lsrs	r4, r4, #12
 80006ee:	0d52      	lsrs	r2, r2, #21
 80006f0:	4698      	mov	r8, r3
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dmul+0x5e>
 80006f4:	e076      	b.n	80007e4 <__aeabi_dmul+0x14c>
 80006f6:	4b5f      	ldr	r3, [pc, #380]	; (8000874 <__aeabi_dmul+0x1dc>)
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d06d      	beq.n	80007d8 <__aeabi_dmul+0x140>
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	0f41      	lsrs	r1, r0, #29
 8000700:	041b      	lsls	r3, r3, #16
 8000702:	430b      	orrs	r3, r1
 8000704:	495c      	ldr	r1, [pc, #368]	; (8000878 <__aeabi_dmul+0x1e0>)
 8000706:	00e4      	lsls	r4, r4, #3
 8000708:	468c      	mov	ip, r1
 800070a:	431c      	orrs	r4, r3
 800070c:	00c3      	lsls	r3, r0, #3
 800070e:	2000      	movs	r0, #0
 8000710:	4462      	add	r2, ip
 8000712:	4641      	mov	r1, r8
 8000714:	18b6      	adds	r6, r6, r2
 8000716:	4069      	eors	r1, r5
 8000718:	1c72      	adds	r2, r6, #1
 800071a:	9101      	str	r1, [sp, #4]
 800071c:	4694      	mov	ip, r2
 800071e:	4307      	orrs	r7, r0
 8000720:	2f0f      	cmp	r7, #15
 8000722:	d900      	bls.n	8000726 <__aeabi_dmul+0x8e>
 8000724:	e0b0      	b.n	8000888 <__aeabi_dmul+0x1f0>
 8000726:	4a55      	ldr	r2, [pc, #340]	; (800087c <__aeabi_dmul+0x1e4>)
 8000728:	00bf      	lsls	r7, r7, #2
 800072a:	59d2      	ldr	r2, [r2, r7]
 800072c:	4697      	mov	pc, r2
 800072e:	465b      	mov	r3, fp
 8000730:	4303      	orrs	r3, r0
 8000732:	4699      	mov	r9, r3
 8000734:	d000      	beq.n	8000738 <__aeabi_dmul+0xa0>
 8000736:	e087      	b.n	8000848 <__aeabi_dmul+0x1b0>
 8000738:	2300      	movs	r3, #0
 800073a:	469b      	mov	fp, r3
 800073c:	3302      	adds	r3, #2
 800073e:	2708      	movs	r7, #8
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	e7ce      	b.n	80006e2 <__aeabi_dmul+0x4a>
 8000744:	4642      	mov	r2, r8
 8000746:	9201      	str	r2, [sp, #4]
 8000748:	2802      	cmp	r0, #2
 800074a:	d067      	beq.n	800081c <__aeabi_dmul+0x184>
 800074c:	2803      	cmp	r0, #3
 800074e:	d100      	bne.n	8000752 <__aeabi_dmul+0xba>
 8000750:	e20e      	b.n	8000b70 <__aeabi_dmul+0x4d8>
 8000752:	2801      	cmp	r0, #1
 8000754:	d000      	beq.n	8000758 <__aeabi_dmul+0xc0>
 8000756:	e162      	b.n	8000a1e <__aeabi_dmul+0x386>
 8000758:	2300      	movs	r3, #0
 800075a:	2400      	movs	r4, #0
 800075c:	2200      	movs	r2, #0
 800075e:	4699      	mov	r9, r3
 8000760:	9901      	ldr	r1, [sp, #4]
 8000762:	4001      	ands	r1, r0
 8000764:	b2cd      	uxtb	r5, r1
 8000766:	2100      	movs	r1, #0
 8000768:	0312      	lsls	r2, r2, #12
 800076a:	0d0b      	lsrs	r3, r1, #20
 800076c:	0b12      	lsrs	r2, r2, #12
 800076e:	051b      	lsls	r3, r3, #20
 8000770:	4313      	orrs	r3, r2
 8000772:	4a43      	ldr	r2, [pc, #268]	; (8000880 <__aeabi_dmul+0x1e8>)
 8000774:	0524      	lsls	r4, r4, #20
 8000776:	4013      	ands	r3, r2
 8000778:	431c      	orrs	r4, r3
 800077a:	0064      	lsls	r4, r4, #1
 800077c:	07ed      	lsls	r5, r5, #31
 800077e:	0864      	lsrs	r4, r4, #1
 8000780:	432c      	orrs	r4, r5
 8000782:	4648      	mov	r0, r9
 8000784:	0021      	movs	r1, r4
 8000786:	b007      	add	sp, #28
 8000788:	bc3c      	pop	{r2, r3, r4, r5}
 800078a:	4690      	mov	r8, r2
 800078c:	4699      	mov	r9, r3
 800078e:	46a2      	mov	sl, r4
 8000790:	46ab      	mov	fp, r5
 8000792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000794:	4303      	orrs	r3, r0
 8000796:	4699      	mov	r9, r3
 8000798:	d04f      	beq.n	800083a <__aeabi_dmul+0x1a2>
 800079a:	465b      	mov	r3, fp
 800079c:	2b00      	cmp	r3, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_dmul+0x10a>
 80007a0:	e189      	b.n	8000ab6 <__aeabi_dmul+0x41e>
 80007a2:	4658      	mov	r0, fp
 80007a4:	f000 fd84 	bl	80012b0 <__clzsi2>
 80007a8:	0003      	movs	r3, r0
 80007aa:	3b0b      	subs	r3, #11
 80007ac:	2b1c      	cmp	r3, #28
 80007ae:	dd00      	ble.n	80007b2 <__aeabi_dmul+0x11a>
 80007b0:	e17a      	b.n	8000aa8 <__aeabi_dmul+0x410>
 80007b2:	221d      	movs	r2, #29
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	003a      	movs	r2, r7
 80007b8:	0001      	movs	r1, r0
 80007ba:	465c      	mov	r4, fp
 80007bc:	40da      	lsrs	r2, r3
 80007be:	3908      	subs	r1, #8
 80007c0:	408c      	lsls	r4, r1
 80007c2:	0013      	movs	r3, r2
 80007c4:	408f      	lsls	r7, r1
 80007c6:	4323      	orrs	r3, r4
 80007c8:	469b      	mov	fp, r3
 80007ca:	46b9      	mov	r9, r7
 80007cc:	2300      	movs	r3, #0
 80007ce:	4e2d      	ldr	r6, [pc, #180]	; (8000884 <__aeabi_dmul+0x1ec>)
 80007d0:	2700      	movs	r7, #0
 80007d2:	1a36      	subs	r6, r6, r0
 80007d4:	9302      	str	r3, [sp, #8]
 80007d6:	e784      	b.n	80006e2 <__aeabi_dmul+0x4a>
 80007d8:	4653      	mov	r3, sl
 80007da:	4323      	orrs	r3, r4
 80007dc:	d12a      	bne.n	8000834 <__aeabi_dmul+0x19c>
 80007de:	2400      	movs	r4, #0
 80007e0:	2002      	movs	r0, #2
 80007e2:	e796      	b.n	8000712 <__aeabi_dmul+0x7a>
 80007e4:	4653      	mov	r3, sl
 80007e6:	4323      	orrs	r3, r4
 80007e8:	d020      	beq.n	800082c <__aeabi_dmul+0x194>
 80007ea:	2c00      	cmp	r4, #0
 80007ec:	d100      	bne.n	80007f0 <__aeabi_dmul+0x158>
 80007ee:	e157      	b.n	8000aa0 <__aeabi_dmul+0x408>
 80007f0:	0020      	movs	r0, r4
 80007f2:	f000 fd5d 	bl	80012b0 <__clzsi2>
 80007f6:	0003      	movs	r3, r0
 80007f8:	3b0b      	subs	r3, #11
 80007fa:	2b1c      	cmp	r3, #28
 80007fc:	dd00      	ble.n	8000800 <__aeabi_dmul+0x168>
 80007fe:	e149      	b.n	8000a94 <__aeabi_dmul+0x3fc>
 8000800:	211d      	movs	r1, #29
 8000802:	1acb      	subs	r3, r1, r3
 8000804:	4651      	mov	r1, sl
 8000806:	0002      	movs	r2, r0
 8000808:	40d9      	lsrs	r1, r3
 800080a:	4653      	mov	r3, sl
 800080c:	3a08      	subs	r2, #8
 800080e:	4094      	lsls	r4, r2
 8000810:	4093      	lsls	r3, r2
 8000812:	430c      	orrs	r4, r1
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <__aeabi_dmul+0x1ec>)
 8000816:	1a12      	subs	r2, r2, r0
 8000818:	2000      	movs	r0, #0
 800081a:	e77a      	b.n	8000712 <__aeabi_dmul+0x7a>
 800081c:	2501      	movs	r5, #1
 800081e:	9b01      	ldr	r3, [sp, #4]
 8000820:	4c14      	ldr	r4, [pc, #80]	; (8000874 <__aeabi_dmul+0x1dc>)
 8000822:	401d      	ands	r5, r3
 8000824:	2300      	movs	r3, #0
 8000826:	2200      	movs	r2, #0
 8000828:	4699      	mov	r9, r3
 800082a:	e79c      	b.n	8000766 <__aeabi_dmul+0xce>
 800082c:	2400      	movs	r4, #0
 800082e:	2200      	movs	r2, #0
 8000830:	2001      	movs	r0, #1
 8000832:	e76e      	b.n	8000712 <__aeabi_dmul+0x7a>
 8000834:	4653      	mov	r3, sl
 8000836:	2003      	movs	r0, #3
 8000838:	e76b      	b.n	8000712 <__aeabi_dmul+0x7a>
 800083a:	2300      	movs	r3, #0
 800083c:	469b      	mov	fp, r3
 800083e:	3301      	adds	r3, #1
 8000840:	2704      	movs	r7, #4
 8000842:	2600      	movs	r6, #0
 8000844:	9302      	str	r3, [sp, #8]
 8000846:	e74c      	b.n	80006e2 <__aeabi_dmul+0x4a>
 8000848:	2303      	movs	r3, #3
 800084a:	4681      	mov	r9, r0
 800084c:	270c      	movs	r7, #12
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	e747      	b.n	80006e2 <__aeabi_dmul+0x4a>
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	2300      	movs	r3, #0
 8000856:	2500      	movs	r5, #0
 8000858:	0312      	lsls	r2, r2, #12
 800085a:	4699      	mov	r9, r3
 800085c:	4c05      	ldr	r4, [pc, #20]	; (8000874 <__aeabi_dmul+0x1dc>)
 800085e:	e782      	b.n	8000766 <__aeabi_dmul+0xce>
 8000860:	465c      	mov	r4, fp
 8000862:	464b      	mov	r3, r9
 8000864:	9802      	ldr	r0, [sp, #8]
 8000866:	e76f      	b.n	8000748 <__aeabi_dmul+0xb0>
 8000868:	465c      	mov	r4, fp
 800086a:	464b      	mov	r3, r9
 800086c:	9501      	str	r5, [sp, #4]
 800086e:	9802      	ldr	r0, [sp, #8]
 8000870:	e76a      	b.n	8000748 <__aeabi_dmul+0xb0>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	000007ff 	.word	0x000007ff
 8000878:	fffffc01 	.word	0xfffffc01
 800087c:	080040b4 	.word	0x080040b4
 8000880:	800fffff 	.word	0x800fffff
 8000884:	fffffc0d 	.word	0xfffffc0d
 8000888:	464a      	mov	r2, r9
 800088a:	4649      	mov	r1, r9
 800088c:	0c17      	lsrs	r7, r2, #16
 800088e:	0c1a      	lsrs	r2, r3, #16
 8000890:	041b      	lsls	r3, r3, #16
 8000892:	0c1b      	lsrs	r3, r3, #16
 8000894:	0408      	lsls	r0, r1, #16
 8000896:	0019      	movs	r1, r3
 8000898:	0c00      	lsrs	r0, r0, #16
 800089a:	4341      	muls	r1, r0
 800089c:	0015      	movs	r5, r2
 800089e:	4688      	mov	r8, r1
 80008a0:	0019      	movs	r1, r3
 80008a2:	437d      	muls	r5, r7
 80008a4:	4379      	muls	r1, r7
 80008a6:	9503      	str	r5, [sp, #12]
 80008a8:	4689      	mov	r9, r1
 80008aa:	0029      	movs	r1, r5
 80008ac:	0015      	movs	r5, r2
 80008ae:	4345      	muls	r5, r0
 80008b0:	444d      	add	r5, r9
 80008b2:	9502      	str	r5, [sp, #8]
 80008b4:	4645      	mov	r5, r8
 80008b6:	0c2d      	lsrs	r5, r5, #16
 80008b8:	46aa      	mov	sl, r5
 80008ba:	9d02      	ldr	r5, [sp, #8]
 80008bc:	4455      	add	r5, sl
 80008be:	45a9      	cmp	r9, r5
 80008c0:	d906      	bls.n	80008d0 <__aeabi_dmul+0x238>
 80008c2:	468a      	mov	sl, r1
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	0249      	lsls	r1, r1, #9
 80008c8:	4689      	mov	r9, r1
 80008ca:	44ca      	add	sl, r9
 80008cc:	4651      	mov	r1, sl
 80008ce:	9103      	str	r1, [sp, #12]
 80008d0:	0c29      	lsrs	r1, r5, #16
 80008d2:	9104      	str	r1, [sp, #16]
 80008d4:	4641      	mov	r1, r8
 80008d6:	0409      	lsls	r1, r1, #16
 80008d8:	042d      	lsls	r5, r5, #16
 80008da:	0c09      	lsrs	r1, r1, #16
 80008dc:	4688      	mov	r8, r1
 80008de:	0029      	movs	r1, r5
 80008e0:	0c25      	lsrs	r5, r4, #16
 80008e2:	0424      	lsls	r4, r4, #16
 80008e4:	4441      	add	r1, r8
 80008e6:	0c24      	lsrs	r4, r4, #16
 80008e8:	9105      	str	r1, [sp, #20]
 80008ea:	0021      	movs	r1, r4
 80008ec:	4341      	muls	r1, r0
 80008ee:	4688      	mov	r8, r1
 80008f0:	0021      	movs	r1, r4
 80008f2:	4379      	muls	r1, r7
 80008f4:	468a      	mov	sl, r1
 80008f6:	4368      	muls	r0, r5
 80008f8:	4641      	mov	r1, r8
 80008fa:	4450      	add	r0, sl
 80008fc:	4681      	mov	r9, r0
 80008fe:	0c08      	lsrs	r0, r1, #16
 8000900:	4448      	add	r0, r9
 8000902:	436f      	muls	r7, r5
 8000904:	4582      	cmp	sl, r0
 8000906:	d903      	bls.n	8000910 <__aeabi_dmul+0x278>
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0249      	lsls	r1, r1, #9
 800090c:	4689      	mov	r9, r1
 800090e:	444f      	add	r7, r9
 8000910:	0c01      	lsrs	r1, r0, #16
 8000912:	4689      	mov	r9, r1
 8000914:	0039      	movs	r1, r7
 8000916:	4449      	add	r1, r9
 8000918:	9102      	str	r1, [sp, #8]
 800091a:	4641      	mov	r1, r8
 800091c:	040f      	lsls	r7, r1, #16
 800091e:	9904      	ldr	r1, [sp, #16]
 8000920:	0c3f      	lsrs	r7, r7, #16
 8000922:	4688      	mov	r8, r1
 8000924:	0400      	lsls	r0, r0, #16
 8000926:	19c0      	adds	r0, r0, r7
 8000928:	4480      	add	r8, r0
 800092a:	4641      	mov	r1, r8
 800092c:	9104      	str	r1, [sp, #16]
 800092e:	4659      	mov	r1, fp
 8000930:	0c0f      	lsrs	r7, r1, #16
 8000932:	0409      	lsls	r1, r1, #16
 8000934:	0c09      	lsrs	r1, r1, #16
 8000936:	4688      	mov	r8, r1
 8000938:	4359      	muls	r1, r3
 800093a:	468a      	mov	sl, r1
 800093c:	0039      	movs	r1, r7
 800093e:	4351      	muls	r1, r2
 8000940:	4689      	mov	r9, r1
 8000942:	4641      	mov	r1, r8
 8000944:	434a      	muls	r2, r1
 8000946:	4651      	mov	r1, sl
 8000948:	0c09      	lsrs	r1, r1, #16
 800094a:	468b      	mov	fp, r1
 800094c:	437b      	muls	r3, r7
 800094e:	18d2      	adds	r2, r2, r3
 8000950:	445a      	add	r2, fp
 8000952:	4293      	cmp	r3, r2
 8000954:	d903      	bls.n	800095e <__aeabi_dmul+0x2c6>
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	025b      	lsls	r3, r3, #9
 800095a:	469b      	mov	fp, r3
 800095c:	44d9      	add	r9, fp
 800095e:	4651      	mov	r1, sl
 8000960:	0409      	lsls	r1, r1, #16
 8000962:	0c09      	lsrs	r1, r1, #16
 8000964:	468a      	mov	sl, r1
 8000966:	4641      	mov	r1, r8
 8000968:	4361      	muls	r1, r4
 800096a:	437c      	muls	r4, r7
 800096c:	0c13      	lsrs	r3, r2, #16
 800096e:	0412      	lsls	r2, r2, #16
 8000970:	444b      	add	r3, r9
 8000972:	4452      	add	r2, sl
 8000974:	46a1      	mov	r9, r4
 8000976:	468a      	mov	sl, r1
 8000978:	003c      	movs	r4, r7
 800097a:	4641      	mov	r1, r8
 800097c:	436c      	muls	r4, r5
 800097e:	434d      	muls	r5, r1
 8000980:	4651      	mov	r1, sl
 8000982:	444d      	add	r5, r9
 8000984:	0c0f      	lsrs	r7, r1, #16
 8000986:	197d      	adds	r5, r7, r5
 8000988:	45a9      	cmp	r9, r5
 800098a:	d903      	bls.n	8000994 <__aeabi_dmul+0x2fc>
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0249      	lsls	r1, r1, #9
 8000990:	4688      	mov	r8, r1
 8000992:	4444      	add	r4, r8
 8000994:	9f04      	ldr	r7, [sp, #16]
 8000996:	9903      	ldr	r1, [sp, #12]
 8000998:	46b8      	mov	r8, r7
 800099a:	4441      	add	r1, r8
 800099c:	468b      	mov	fp, r1
 800099e:	4583      	cmp	fp, r0
 80009a0:	4180      	sbcs	r0, r0
 80009a2:	4241      	negs	r1, r0
 80009a4:	4688      	mov	r8, r1
 80009a6:	4651      	mov	r1, sl
 80009a8:	0408      	lsls	r0, r1, #16
 80009aa:	042f      	lsls	r7, r5, #16
 80009ac:	0c00      	lsrs	r0, r0, #16
 80009ae:	183f      	adds	r7, r7, r0
 80009b0:	4658      	mov	r0, fp
 80009b2:	9902      	ldr	r1, [sp, #8]
 80009b4:	1810      	adds	r0, r2, r0
 80009b6:	4689      	mov	r9, r1
 80009b8:	4290      	cmp	r0, r2
 80009ba:	4192      	sbcs	r2, r2
 80009bc:	444f      	add	r7, r9
 80009be:	46ba      	mov	sl, r7
 80009c0:	4252      	negs	r2, r2
 80009c2:	4699      	mov	r9, r3
 80009c4:	4693      	mov	fp, r2
 80009c6:	44c2      	add	sl, r8
 80009c8:	44d1      	add	r9, sl
 80009ca:	44cb      	add	fp, r9
 80009cc:	428f      	cmp	r7, r1
 80009ce:	41bf      	sbcs	r7, r7
 80009d0:	45c2      	cmp	sl, r8
 80009d2:	4189      	sbcs	r1, r1
 80009d4:	4599      	cmp	r9, r3
 80009d6:	419b      	sbcs	r3, r3
 80009d8:	4593      	cmp	fp, r2
 80009da:	4192      	sbcs	r2, r2
 80009dc:	427f      	negs	r7, r7
 80009de:	4249      	negs	r1, r1
 80009e0:	0c2d      	lsrs	r5, r5, #16
 80009e2:	4252      	negs	r2, r2
 80009e4:	430f      	orrs	r7, r1
 80009e6:	425b      	negs	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	197f      	adds	r7, r7, r5
 80009ec:	18ff      	adds	r7, r7, r3
 80009ee:	465b      	mov	r3, fp
 80009f0:	193c      	adds	r4, r7, r4
 80009f2:	0ddb      	lsrs	r3, r3, #23
 80009f4:	9a05      	ldr	r2, [sp, #20]
 80009f6:	0264      	lsls	r4, r4, #9
 80009f8:	431c      	orrs	r4, r3
 80009fa:	0243      	lsls	r3, r0, #9
 80009fc:	4313      	orrs	r3, r2
 80009fe:	1e5d      	subs	r5, r3, #1
 8000a00:	41ab      	sbcs	r3, r5
 8000a02:	465a      	mov	r2, fp
 8000a04:	0dc0      	lsrs	r0, r0, #23
 8000a06:	4303      	orrs	r3, r0
 8000a08:	0252      	lsls	r2, r2, #9
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	01e2      	lsls	r2, r4, #7
 8000a0e:	d556      	bpl.n	8000abe <__aeabi_dmul+0x426>
 8000a10:	2001      	movs	r0, #1
 8000a12:	085a      	lsrs	r2, r3, #1
 8000a14:	4003      	ands	r3, r0
 8000a16:	4313      	orrs	r3, r2
 8000a18:	07e2      	lsls	r2, r4, #31
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	0864      	lsrs	r4, r4, #1
 8000a1e:	485a      	ldr	r0, [pc, #360]	; (8000b88 <__aeabi_dmul+0x4f0>)
 8000a20:	4460      	add	r0, ip
 8000a22:	2800      	cmp	r0, #0
 8000a24:	dd4d      	ble.n	8000ac2 <__aeabi_dmul+0x42a>
 8000a26:	075a      	lsls	r2, r3, #29
 8000a28:	d009      	beq.n	8000a3e <__aeabi_dmul+0x3a6>
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	401a      	ands	r2, r3
 8000a2e:	2a04      	cmp	r2, #4
 8000a30:	d005      	beq.n	8000a3e <__aeabi_dmul+0x3a6>
 8000a32:	1d1a      	adds	r2, r3, #4
 8000a34:	429a      	cmp	r2, r3
 8000a36:	419b      	sbcs	r3, r3
 8000a38:	425b      	negs	r3, r3
 8000a3a:	18e4      	adds	r4, r4, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	01e2      	lsls	r2, r4, #7
 8000a40:	d504      	bpl.n	8000a4c <__aeabi_dmul+0x3b4>
 8000a42:	2080      	movs	r0, #128	; 0x80
 8000a44:	4a51      	ldr	r2, [pc, #324]	; (8000b8c <__aeabi_dmul+0x4f4>)
 8000a46:	00c0      	lsls	r0, r0, #3
 8000a48:	4014      	ands	r4, r2
 8000a4a:	4460      	add	r0, ip
 8000a4c:	4a50      	ldr	r2, [pc, #320]	; (8000b90 <__aeabi_dmul+0x4f8>)
 8000a4e:	4290      	cmp	r0, r2
 8000a50:	dd00      	ble.n	8000a54 <__aeabi_dmul+0x3bc>
 8000a52:	e6e3      	b.n	800081c <__aeabi_dmul+0x184>
 8000a54:	2501      	movs	r5, #1
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	0762      	lsls	r2, r4, #29
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	0264      	lsls	r4, r4, #9
 8000a5e:	9b01      	ldr	r3, [sp, #4]
 8000a60:	4691      	mov	r9, r2
 8000a62:	0b22      	lsrs	r2, r4, #12
 8000a64:	0544      	lsls	r4, r0, #21
 8000a66:	0d64      	lsrs	r4, r4, #21
 8000a68:	401d      	ands	r5, r3
 8000a6a:	e67c      	b.n	8000766 <__aeabi_dmul+0xce>
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	4659      	mov	r1, fp
 8000a70:	0312      	lsls	r2, r2, #12
 8000a72:	4211      	tst	r1, r2
 8000a74:	d008      	beq.n	8000a88 <__aeabi_dmul+0x3f0>
 8000a76:	4214      	tst	r4, r2
 8000a78:	d106      	bne.n	8000a88 <__aeabi_dmul+0x3f0>
 8000a7a:	4322      	orrs	r2, r4
 8000a7c:	0312      	lsls	r2, r2, #12
 8000a7e:	0b12      	lsrs	r2, r2, #12
 8000a80:	4645      	mov	r5, r8
 8000a82:	4699      	mov	r9, r3
 8000a84:	4c43      	ldr	r4, [pc, #268]	; (8000b94 <__aeabi_dmul+0x4fc>)
 8000a86:	e66e      	b.n	8000766 <__aeabi_dmul+0xce>
 8000a88:	465b      	mov	r3, fp
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	0312      	lsls	r2, r2, #12
 8000a8e:	0b12      	lsrs	r2, r2, #12
 8000a90:	4c40      	ldr	r4, [pc, #256]	; (8000b94 <__aeabi_dmul+0x4fc>)
 8000a92:	e668      	b.n	8000766 <__aeabi_dmul+0xce>
 8000a94:	0003      	movs	r3, r0
 8000a96:	4654      	mov	r4, sl
 8000a98:	3b28      	subs	r3, #40	; 0x28
 8000a9a:	409c      	lsls	r4, r3
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e6b9      	b.n	8000814 <__aeabi_dmul+0x17c>
 8000aa0:	f000 fc06 	bl	80012b0 <__clzsi2>
 8000aa4:	3020      	adds	r0, #32
 8000aa6:	e6a6      	b.n	80007f6 <__aeabi_dmul+0x15e>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	3b28      	subs	r3, #40	; 0x28
 8000aac:	409f      	lsls	r7, r3
 8000aae:	2300      	movs	r3, #0
 8000ab0:	46bb      	mov	fp, r7
 8000ab2:	4699      	mov	r9, r3
 8000ab4:	e68a      	b.n	80007cc <__aeabi_dmul+0x134>
 8000ab6:	f000 fbfb 	bl	80012b0 <__clzsi2>
 8000aba:	3020      	adds	r0, #32
 8000abc:	e674      	b.n	80007a8 <__aeabi_dmul+0x110>
 8000abe:	46b4      	mov	ip, r6
 8000ac0:	e7ad      	b.n	8000a1e <__aeabi_dmul+0x386>
 8000ac2:	2501      	movs	r5, #1
 8000ac4:	1a2a      	subs	r2, r5, r0
 8000ac6:	2a38      	cmp	r2, #56	; 0x38
 8000ac8:	dd06      	ble.n	8000ad8 <__aeabi_dmul+0x440>
 8000aca:	9b01      	ldr	r3, [sp, #4]
 8000acc:	2400      	movs	r4, #0
 8000ace:	401d      	ands	r5, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4699      	mov	r9, r3
 8000ad6:	e646      	b.n	8000766 <__aeabi_dmul+0xce>
 8000ad8:	2a1f      	cmp	r2, #31
 8000ada:	dc21      	bgt.n	8000b20 <__aeabi_dmul+0x488>
 8000adc:	2520      	movs	r5, #32
 8000ade:	0020      	movs	r0, r4
 8000ae0:	1aad      	subs	r5, r5, r2
 8000ae2:	001e      	movs	r6, r3
 8000ae4:	40ab      	lsls	r3, r5
 8000ae6:	40a8      	lsls	r0, r5
 8000ae8:	40d6      	lsrs	r6, r2
 8000aea:	1e5d      	subs	r5, r3, #1
 8000aec:	41ab      	sbcs	r3, r5
 8000aee:	4330      	orrs	r0, r6
 8000af0:	4318      	orrs	r0, r3
 8000af2:	40d4      	lsrs	r4, r2
 8000af4:	0743      	lsls	r3, r0, #29
 8000af6:	d009      	beq.n	8000b0c <__aeabi_dmul+0x474>
 8000af8:	230f      	movs	r3, #15
 8000afa:	4003      	ands	r3, r0
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d005      	beq.n	8000b0c <__aeabi_dmul+0x474>
 8000b00:	0003      	movs	r3, r0
 8000b02:	1d18      	adds	r0, r3, #4
 8000b04:	4298      	cmp	r0, r3
 8000b06:	419b      	sbcs	r3, r3
 8000b08:	425b      	negs	r3, r3
 8000b0a:	18e4      	adds	r4, r4, r3
 8000b0c:	0223      	lsls	r3, r4, #8
 8000b0e:	d521      	bpl.n	8000b54 <__aeabi_dmul+0x4bc>
 8000b10:	2501      	movs	r5, #1
 8000b12:	9b01      	ldr	r3, [sp, #4]
 8000b14:	2401      	movs	r4, #1
 8000b16:	401d      	ands	r5, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4699      	mov	r9, r3
 8000b1e:	e622      	b.n	8000766 <__aeabi_dmul+0xce>
 8000b20:	251f      	movs	r5, #31
 8000b22:	0021      	movs	r1, r4
 8000b24:	426d      	negs	r5, r5
 8000b26:	1a28      	subs	r0, r5, r0
 8000b28:	40c1      	lsrs	r1, r0
 8000b2a:	0008      	movs	r0, r1
 8000b2c:	2a20      	cmp	r2, #32
 8000b2e:	d01d      	beq.n	8000b6c <__aeabi_dmul+0x4d4>
 8000b30:	355f      	adds	r5, #95	; 0x5f
 8000b32:	1aaa      	subs	r2, r5, r2
 8000b34:	4094      	lsls	r4, r2
 8000b36:	4323      	orrs	r3, r4
 8000b38:	1e5c      	subs	r4, r3, #1
 8000b3a:	41a3      	sbcs	r3, r4
 8000b3c:	2507      	movs	r5, #7
 8000b3e:	4303      	orrs	r3, r0
 8000b40:	401d      	ands	r5, r3
 8000b42:	2200      	movs	r2, #0
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	d009      	beq.n	8000b5c <__aeabi_dmul+0x4c4>
 8000b48:	220f      	movs	r2, #15
 8000b4a:	2400      	movs	r4, #0
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2a04      	cmp	r2, #4
 8000b52:	d1d6      	bne.n	8000b02 <__aeabi_dmul+0x46a>
 8000b54:	0003      	movs	r3, r0
 8000b56:	0765      	lsls	r5, r4, #29
 8000b58:	0264      	lsls	r4, r4, #9
 8000b5a:	0b22      	lsrs	r2, r4, #12
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	432b      	orrs	r3, r5
 8000b60:	2501      	movs	r5, #1
 8000b62:	4699      	mov	r9, r3
 8000b64:	9b01      	ldr	r3, [sp, #4]
 8000b66:	2400      	movs	r4, #0
 8000b68:	401d      	ands	r5, r3
 8000b6a:	e5fc      	b.n	8000766 <__aeabi_dmul+0xce>
 8000b6c:	2400      	movs	r4, #0
 8000b6e:	e7e2      	b.n	8000b36 <__aeabi_dmul+0x49e>
 8000b70:	2280      	movs	r2, #128	; 0x80
 8000b72:	2501      	movs	r5, #1
 8000b74:	0312      	lsls	r2, r2, #12
 8000b76:	4322      	orrs	r2, r4
 8000b78:	9901      	ldr	r1, [sp, #4]
 8000b7a:	0312      	lsls	r2, r2, #12
 8000b7c:	0b12      	lsrs	r2, r2, #12
 8000b7e:	400d      	ands	r5, r1
 8000b80:	4699      	mov	r9, r3
 8000b82:	4c04      	ldr	r4, [pc, #16]	; (8000b94 <__aeabi_dmul+0x4fc>)
 8000b84:	e5ef      	b.n	8000766 <__aeabi_dmul+0xce>
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	000003ff 	.word	0x000003ff
 8000b8c:	feffffff 	.word	0xfeffffff
 8000b90:	000007fe 	.word	0x000007fe
 8000b94:	000007ff 	.word	0x000007ff

08000b98 <__aeabi_dsub>:
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	4646      	mov	r6, r8
 8000b9c:	46d6      	mov	lr, sl
 8000b9e:	464f      	mov	r7, r9
 8000ba0:	030c      	lsls	r4, r1, #12
 8000ba2:	b5c0      	push	{r6, r7, lr}
 8000ba4:	0fcd      	lsrs	r5, r1, #31
 8000ba6:	004e      	lsls	r6, r1, #1
 8000ba8:	0a61      	lsrs	r1, r4, #9
 8000baa:	0f44      	lsrs	r4, r0, #29
 8000bac:	430c      	orrs	r4, r1
 8000bae:	00c1      	lsls	r1, r0, #3
 8000bb0:	0058      	lsls	r0, r3, #1
 8000bb2:	0d40      	lsrs	r0, r0, #21
 8000bb4:	4684      	mov	ip, r0
 8000bb6:	468a      	mov	sl, r1
 8000bb8:	000f      	movs	r7, r1
 8000bba:	0319      	lsls	r1, r3, #12
 8000bbc:	0f50      	lsrs	r0, r2, #29
 8000bbe:	0a49      	lsrs	r1, r1, #9
 8000bc0:	4301      	orrs	r1, r0
 8000bc2:	48c6      	ldr	r0, [pc, #792]	; (8000edc <__aeabi_dsub+0x344>)
 8000bc4:	0d76      	lsrs	r6, r6, #21
 8000bc6:	46a8      	mov	r8, r5
 8000bc8:	0fdb      	lsrs	r3, r3, #31
 8000bca:	00d2      	lsls	r2, r2, #3
 8000bcc:	4584      	cmp	ip, r0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dsub+0x3a>
 8000bd0:	e0d8      	b.n	8000d84 <__aeabi_dsub+0x1ec>
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4043      	eors	r3, r0
 8000bd6:	42ab      	cmp	r3, r5
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dsub+0x44>
 8000bda:	e0a6      	b.n	8000d2a <__aeabi_dsub+0x192>
 8000bdc:	4660      	mov	r0, ip
 8000bde:	1a35      	subs	r5, r6, r0
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	dc00      	bgt.n	8000be6 <__aeabi_dsub+0x4e>
 8000be4:	e105      	b.n	8000df2 <__aeabi_dsub+0x25a>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d110      	bne.n	8000c0c <__aeabi_dsub+0x74>
 8000bea:	000b      	movs	r3, r1
 8000bec:	4313      	orrs	r3, r2
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dsub+0x5a>
 8000bf0:	e0d7      	b.n	8000da2 <__aeabi_dsub+0x20a>
 8000bf2:	1e6b      	subs	r3, r5, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d000      	beq.n	8000bfa <__aeabi_dsub+0x62>
 8000bf8:	e14b      	b.n	8000e92 <__aeabi_dsub+0x2fa>
 8000bfa:	4653      	mov	r3, sl
 8000bfc:	1a9f      	subs	r7, r3, r2
 8000bfe:	45ba      	cmp	sl, r7
 8000c00:	4180      	sbcs	r0, r0
 8000c02:	1a64      	subs	r4, r4, r1
 8000c04:	4240      	negs	r0, r0
 8000c06:	1a24      	subs	r4, r4, r0
 8000c08:	2601      	movs	r6, #1
 8000c0a:	e01e      	b.n	8000c4a <__aeabi_dsub+0xb2>
 8000c0c:	4bb3      	ldr	r3, [pc, #716]	; (8000edc <__aeabi_dsub+0x344>)
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d048      	beq.n	8000ca4 <__aeabi_dsub+0x10c>
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	041b      	lsls	r3, r3, #16
 8000c16:	4319      	orrs	r1, r3
 8000c18:	2d38      	cmp	r5, #56	; 0x38
 8000c1a:	dd00      	ble.n	8000c1e <__aeabi_dsub+0x86>
 8000c1c:	e119      	b.n	8000e52 <__aeabi_dsub+0x2ba>
 8000c1e:	2d1f      	cmp	r5, #31
 8000c20:	dd00      	ble.n	8000c24 <__aeabi_dsub+0x8c>
 8000c22:	e14c      	b.n	8000ebe <__aeabi_dsub+0x326>
 8000c24:	2320      	movs	r3, #32
 8000c26:	000f      	movs	r7, r1
 8000c28:	1b5b      	subs	r3, r3, r5
 8000c2a:	0010      	movs	r0, r2
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	409f      	lsls	r7, r3
 8000c30:	40e8      	lsrs	r0, r5
 8000c32:	1e53      	subs	r3, r2, #1
 8000c34:	419a      	sbcs	r2, r3
 8000c36:	40e9      	lsrs	r1, r5
 8000c38:	4307      	orrs	r7, r0
 8000c3a:	4317      	orrs	r7, r2
 8000c3c:	4653      	mov	r3, sl
 8000c3e:	1bdf      	subs	r7, r3, r7
 8000c40:	1a61      	subs	r1, r4, r1
 8000c42:	45ba      	cmp	sl, r7
 8000c44:	41a4      	sbcs	r4, r4
 8000c46:	4264      	negs	r4, r4
 8000c48:	1b0c      	subs	r4, r1, r4
 8000c4a:	0223      	lsls	r3, r4, #8
 8000c4c:	d400      	bmi.n	8000c50 <__aeabi_dsub+0xb8>
 8000c4e:	e0c5      	b.n	8000ddc <__aeabi_dsub+0x244>
 8000c50:	0264      	lsls	r4, r4, #9
 8000c52:	0a65      	lsrs	r5, r4, #9
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dsub+0xc2>
 8000c58:	e0f6      	b.n	8000e48 <__aeabi_dsub+0x2b0>
 8000c5a:	0028      	movs	r0, r5
 8000c5c:	f000 fb28 	bl	80012b0 <__clzsi2>
 8000c60:	0003      	movs	r3, r0
 8000c62:	3b08      	subs	r3, #8
 8000c64:	2b1f      	cmp	r3, #31
 8000c66:	dd00      	ble.n	8000c6a <__aeabi_dsub+0xd2>
 8000c68:	e0e9      	b.n	8000e3e <__aeabi_dsub+0x2a6>
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	003c      	movs	r4, r7
 8000c6e:	1ad2      	subs	r2, r2, r3
 8000c70:	409d      	lsls	r5, r3
 8000c72:	40d4      	lsrs	r4, r2
 8000c74:	409f      	lsls	r7, r3
 8000c76:	4325      	orrs	r5, r4
 8000c78:	429e      	cmp	r6, r3
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_dsub+0xe6>
 8000c7c:	e0db      	b.n	8000e36 <__aeabi_dsub+0x29e>
 8000c7e:	1b9e      	subs	r6, r3, r6
 8000c80:	1c73      	adds	r3, r6, #1
 8000c82:	2b1f      	cmp	r3, #31
 8000c84:	dd00      	ble.n	8000c88 <__aeabi_dsub+0xf0>
 8000c86:	e10a      	b.n	8000e9e <__aeabi_dsub+0x306>
 8000c88:	2220      	movs	r2, #32
 8000c8a:	0038      	movs	r0, r7
 8000c8c:	1ad2      	subs	r2, r2, r3
 8000c8e:	0029      	movs	r1, r5
 8000c90:	4097      	lsls	r7, r2
 8000c92:	002c      	movs	r4, r5
 8000c94:	4091      	lsls	r1, r2
 8000c96:	40d8      	lsrs	r0, r3
 8000c98:	1e7a      	subs	r2, r7, #1
 8000c9a:	4197      	sbcs	r7, r2
 8000c9c:	40dc      	lsrs	r4, r3
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4301      	orrs	r1, r0
 8000ca2:	430f      	orrs	r7, r1
 8000ca4:	077b      	lsls	r3, r7, #29
 8000ca6:	d009      	beq.n	8000cbc <__aeabi_dsub+0x124>
 8000ca8:	230f      	movs	r3, #15
 8000caa:	403b      	ands	r3, r7
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d005      	beq.n	8000cbc <__aeabi_dsub+0x124>
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	42bb      	cmp	r3, r7
 8000cb4:	41bf      	sbcs	r7, r7
 8000cb6:	427f      	negs	r7, r7
 8000cb8:	19e4      	adds	r4, r4, r7
 8000cba:	001f      	movs	r7, r3
 8000cbc:	0223      	lsls	r3, r4, #8
 8000cbe:	d525      	bpl.n	8000d0c <__aeabi_dsub+0x174>
 8000cc0:	4b86      	ldr	r3, [pc, #536]	; (8000edc <__aeabi_dsub+0x344>)
 8000cc2:	3601      	adds	r6, #1
 8000cc4:	429e      	cmp	r6, r3
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dsub+0x132>
 8000cc8:	e0af      	b.n	8000e2a <__aeabi_dsub+0x292>
 8000cca:	4b85      	ldr	r3, [pc, #532]	; (8000ee0 <__aeabi_dsub+0x348>)
 8000ccc:	2501      	movs	r5, #1
 8000cce:	401c      	ands	r4, r3
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	0762      	lsls	r2, r4, #29
 8000cd4:	08ff      	lsrs	r7, r7, #3
 8000cd6:	0264      	lsls	r4, r4, #9
 8000cd8:	0576      	lsls	r6, r6, #21
 8000cda:	4317      	orrs	r7, r2
 8000cdc:	0b24      	lsrs	r4, r4, #12
 8000cde:	0d76      	lsrs	r6, r6, #21
 8000ce0:	401d      	ands	r5, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	0324      	lsls	r4, r4, #12
 8000ce6:	0b23      	lsrs	r3, r4, #12
 8000ce8:	0d0c      	lsrs	r4, r1, #20
 8000cea:	4a7e      	ldr	r2, [pc, #504]	; (8000ee4 <__aeabi_dsub+0x34c>)
 8000cec:	0524      	lsls	r4, r4, #20
 8000cee:	431c      	orrs	r4, r3
 8000cf0:	4014      	ands	r4, r2
 8000cf2:	0533      	lsls	r3, r6, #20
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	07ed      	lsls	r5, r5, #31
 8000cfa:	085b      	lsrs	r3, r3, #1
 8000cfc:	432b      	orrs	r3, r5
 8000cfe:	0038      	movs	r0, r7
 8000d00:	0019      	movs	r1, r3
 8000d02:	bc1c      	pop	{r2, r3, r4}
 8000d04:	4690      	mov	r8, r2
 8000d06:	4699      	mov	r9, r3
 8000d08:	46a2      	mov	sl, r4
 8000d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d0c:	2501      	movs	r5, #1
 8000d0e:	4643      	mov	r3, r8
 8000d10:	0762      	lsls	r2, r4, #29
 8000d12:	08ff      	lsrs	r7, r7, #3
 8000d14:	4317      	orrs	r7, r2
 8000d16:	08e4      	lsrs	r4, r4, #3
 8000d18:	401d      	ands	r5, r3
 8000d1a:	4b70      	ldr	r3, [pc, #448]	; (8000edc <__aeabi_dsub+0x344>)
 8000d1c:	429e      	cmp	r6, r3
 8000d1e:	d036      	beq.n	8000d8e <__aeabi_dsub+0x1f6>
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	0576      	lsls	r6, r6, #21
 8000d24:	0b24      	lsrs	r4, r4, #12
 8000d26:	0d76      	lsrs	r6, r6, #21
 8000d28:	e7db      	b.n	8000ce2 <__aeabi_dsub+0x14a>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	1af3      	subs	r3, r6, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	dc00      	bgt.n	8000d34 <__aeabi_dsub+0x19c>
 8000d32:	e094      	b.n	8000e5e <__aeabi_dsub+0x2c6>
 8000d34:	4660      	mov	r0, ip
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d035      	beq.n	8000da6 <__aeabi_dsub+0x20e>
 8000d3a:	4868      	ldr	r0, [pc, #416]	; (8000edc <__aeabi_dsub+0x344>)
 8000d3c:	4286      	cmp	r6, r0
 8000d3e:	d0b1      	beq.n	8000ca4 <__aeabi_dsub+0x10c>
 8000d40:	2780      	movs	r7, #128	; 0x80
 8000d42:	043f      	lsls	r7, r7, #16
 8000d44:	4339      	orrs	r1, r7
 8000d46:	2b38      	cmp	r3, #56	; 0x38
 8000d48:	dc00      	bgt.n	8000d4c <__aeabi_dsub+0x1b4>
 8000d4a:	e0fd      	b.n	8000f48 <__aeabi_dsub+0x3b0>
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	0017      	movs	r7, r2
 8000d50:	2100      	movs	r1, #0
 8000d52:	1e7a      	subs	r2, r7, #1
 8000d54:	4197      	sbcs	r7, r2
 8000d56:	4457      	add	r7, sl
 8000d58:	4557      	cmp	r7, sl
 8000d5a:	4180      	sbcs	r0, r0
 8000d5c:	1909      	adds	r1, r1, r4
 8000d5e:	4244      	negs	r4, r0
 8000d60:	190c      	adds	r4, r1, r4
 8000d62:	0223      	lsls	r3, r4, #8
 8000d64:	d53a      	bpl.n	8000ddc <__aeabi_dsub+0x244>
 8000d66:	4b5d      	ldr	r3, [pc, #372]	; (8000edc <__aeabi_dsub+0x344>)
 8000d68:	3601      	adds	r6, #1
 8000d6a:	429e      	cmp	r6, r3
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dsub+0x1d8>
 8000d6e:	e14b      	b.n	8001008 <__aeabi_dsub+0x470>
 8000d70:	2201      	movs	r2, #1
 8000d72:	4b5b      	ldr	r3, [pc, #364]	; (8000ee0 <__aeabi_dsub+0x348>)
 8000d74:	401c      	ands	r4, r3
 8000d76:	087b      	lsrs	r3, r7, #1
 8000d78:	4017      	ands	r7, r2
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	07e2      	lsls	r2, r4, #31
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	0864      	lsrs	r4, r4, #1
 8000d82:	e78f      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8000d84:	0008      	movs	r0, r1
 8000d86:	4310      	orrs	r0, r2
 8000d88:	d000      	beq.n	8000d8c <__aeabi_dsub+0x1f4>
 8000d8a:	e724      	b.n	8000bd6 <__aeabi_dsub+0x3e>
 8000d8c:	e721      	b.n	8000bd2 <__aeabi_dsub+0x3a>
 8000d8e:	0023      	movs	r3, r4
 8000d90:	433b      	orrs	r3, r7
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dsub+0x1fe>
 8000d94:	e1b9      	b.n	800110a <__aeabi_dsub+0x572>
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	0312      	lsls	r2, r2, #12
 8000d9a:	4314      	orrs	r4, r2
 8000d9c:	0324      	lsls	r4, r4, #12
 8000d9e:	0b24      	lsrs	r4, r4, #12
 8000da0:	e79f      	b.n	8000ce2 <__aeabi_dsub+0x14a>
 8000da2:	002e      	movs	r6, r5
 8000da4:	e77e      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8000da6:	0008      	movs	r0, r1
 8000da8:	4310      	orrs	r0, r2
 8000daa:	d100      	bne.n	8000dae <__aeabi_dsub+0x216>
 8000dac:	e0ca      	b.n	8000f44 <__aeabi_dsub+0x3ac>
 8000dae:	1e58      	subs	r0, r3, #1
 8000db0:	4684      	mov	ip, r0
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d000      	beq.n	8000db8 <__aeabi_dsub+0x220>
 8000db6:	e0e7      	b.n	8000f88 <__aeabi_dsub+0x3f0>
 8000db8:	4452      	add	r2, sl
 8000dba:	4552      	cmp	r2, sl
 8000dbc:	4180      	sbcs	r0, r0
 8000dbe:	1864      	adds	r4, r4, r1
 8000dc0:	4240      	negs	r0, r0
 8000dc2:	1824      	adds	r4, r4, r0
 8000dc4:	0017      	movs	r7, r2
 8000dc6:	2601      	movs	r6, #1
 8000dc8:	0223      	lsls	r3, r4, #8
 8000dca:	d507      	bpl.n	8000ddc <__aeabi_dsub+0x244>
 8000dcc:	2602      	movs	r6, #2
 8000dce:	e7cf      	b.n	8000d70 <__aeabi_dsub+0x1d8>
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	432c      	orrs	r4, r5
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dsub+0x240>
 8000dd6:	e1b3      	b.n	8001140 <__aeabi_dsub+0x5a8>
 8000dd8:	002c      	movs	r4, r5
 8000dda:	4667      	mov	r7, ip
 8000ddc:	077b      	lsls	r3, r7, #29
 8000dde:	d000      	beq.n	8000de2 <__aeabi_dsub+0x24a>
 8000de0:	e762      	b.n	8000ca8 <__aeabi_dsub+0x110>
 8000de2:	0763      	lsls	r3, r4, #29
 8000de4:	08ff      	lsrs	r7, r7, #3
 8000de6:	431f      	orrs	r7, r3
 8000de8:	2501      	movs	r5, #1
 8000dea:	4643      	mov	r3, r8
 8000dec:	08e4      	lsrs	r4, r4, #3
 8000dee:	401d      	ands	r5, r3
 8000df0:	e793      	b.n	8000d1a <__aeabi_dsub+0x182>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d178      	bne.n	8000ee8 <__aeabi_dsub+0x350>
 8000df6:	1c75      	adds	r5, r6, #1
 8000df8:	056d      	lsls	r5, r5, #21
 8000dfa:	0d6d      	lsrs	r5, r5, #21
 8000dfc:	2d01      	cmp	r5, #1
 8000dfe:	dc00      	bgt.n	8000e02 <__aeabi_dsub+0x26a>
 8000e00:	e0f2      	b.n	8000fe8 <__aeabi_dsub+0x450>
 8000e02:	4650      	mov	r0, sl
 8000e04:	1a80      	subs	r0, r0, r2
 8000e06:	4582      	cmp	sl, r0
 8000e08:	41bf      	sbcs	r7, r7
 8000e0a:	1a65      	subs	r5, r4, r1
 8000e0c:	427f      	negs	r7, r7
 8000e0e:	1bed      	subs	r5, r5, r7
 8000e10:	4684      	mov	ip, r0
 8000e12:	0228      	lsls	r0, r5, #8
 8000e14:	d400      	bmi.n	8000e18 <__aeabi_dsub+0x280>
 8000e16:	e08c      	b.n	8000f32 <__aeabi_dsub+0x39a>
 8000e18:	4650      	mov	r0, sl
 8000e1a:	1a17      	subs	r7, r2, r0
 8000e1c:	42ba      	cmp	r2, r7
 8000e1e:	4192      	sbcs	r2, r2
 8000e20:	1b0c      	subs	r4, r1, r4
 8000e22:	4255      	negs	r5, r2
 8000e24:	1b65      	subs	r5, r4, r5
 8000e26:	4698      	mov	r8, r3
 8000e28:	e714      	b.n	8000c54 <__aeabi_dsub+0xbc>
 8000e2a:	2501      	movs	r5, #1
 8000e2c:	4643      	mov	r3, r8
 8000e2e:	2400      	movs	r4, #0
 8000e30:	401d      	ands	r5, r3
 8000e32:	2700      	movs	r7, #0
 8000e34:	e755      	b.n	8000ce2 <__aeabi_dsub+0x14a>
 8000e36:	4c2a      	ldr	r4, [pc, #168]	; (8000ee0 <__aeabi_dsub+0x348>)
 8000e38:	1af6      	subs	r6, r6, r3
 8000e3a:	402c      	ands	r4, r5
 8000e3c:	e732      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8000e3e:	003d      	movs	r5, r7
 8000e40:	3828      	subs	r0, #40	; 0x28
 8000e42:	4085      	lsls	r5, r0
 8000e44:	2700      	movs	r7, #0
 8000e46:	e717      	b.n	8000c78 <__aeabi_dsub+0xe0>
 8000e48:	0038      	movs	r0, r7
 8000e4a:	f000 fa31 	bl	80012b0 <__clzsi2>
 8000e4e:	3020      	adds	r0, #32
 8000e50:	e706      	b.n	8000c60 <__aeabi_dsub+0xc8>
 8000e52:	430a      	orrs	r2, r1
 8000e54:	0017      	movs	r7, r2
 8000e56:	2100      	movs	r1, #0
 8000e58:	1e7a      	subs	r2, r7, #1
 8000e5a:	4197      	sbcs	r7, r2
 8000e5c:	e6ee      	b.n	8000c3c <__aeabi_dsub+0xa4>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d000      	beq.n	8000e64 <__aeabi_dsub+0x2cc>
 8000e62:	e0e5      	b.n	8001030 <__aeabi_dsub+0x498>
 8000e64:	1c73      	adds	r3, r6, #1
 8000e66:	469c      	mov	ip, r3
 8000e68:	055b      	lsls	r3, r3, #21
 8000e6a:	0d5b      	lsrs	r3, r3, #21
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	dc00      	bgt.n	8000e72 <__aeabi_dsub+0x2da>
 8000e70:	e09f      	b.n	8000fb2 <__aeabi_dsub+0x41a>
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <__aeabi_dsub+0x344>)
 8000e74:	459c      	cmp	ip, r3
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dsub+0x2e2>
 8000e78:	e0c5      	b.n	8001006 <__aeabi_dsub+0x46e>
 8000e7a:	4452      	add	r2, sl
 8000e7c:	4552      	cmp	r2, sl
 8000e7e:	4180      	sbcs	r0, r0
 8000e80:	1864      	adds	r4, r4, r1
 8000e82:	4240      	negs	r0, r0
 8000e84:	1824      	adds	r4, r4, r0
 8000e86:	07e7      	lsls	r7, r4, #31
 8000e88:	0852      	lsrs	r2, r2, #1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	0864      	lsrs	r4, r4, #1
 8000e8e:	4666      	mov	r6, ip
 8000e90:	e708      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8000e92:	4812      	ldr	r0, [pc, #72]	; (8000edc <__aeabi_dsub+0x344>)
 8000e94:	4285      	cmp	r5, r0
 8000e96:	d100      	bne.n	8000e9a <__aeabi_dsub+0x302>
 8000e98:	e085      	b.n	8000fa6 <__aeabi_dsub+0x40e>
 8000e9a:	001d      	movs	r5, r3
 8000e9c:	e6bc      	b.n	8000c18 <__aeabi_dsub+0x80>
 8000e9e:	0029      	movs	r1, r5
 8000ea0:	3e1f      	subs	r6, #31
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	2b20      	cmp	r3, #32
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_dsub+0x312>
 8000ea8:	e07f      	b.n	8000faa <__aeabi_dsub+0x412>
 8000eaa:	2240      	movs	r2, #64	; 0x40
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	409d      	lsls	r5, r3
 8000eb0:	432f      	orrs	r7, r5
 8000eb2:	1e7d      	subs	r5, r7, #1
 8000eb4:	41af      	sbcs	r7, r5
 8000eb6:	2400      	movs	r4, #0
 8000eb8:	430f      	orrs	r7, r1
 8000eba:	2600      	movs	r6, #0
 8000ebc:	e78e      	b.n	8000ddc <__aeabi_dsub+0x244>
 8000ebe:	002b      	movs	r3, r5
 8000ec0:	000f      	movs	r7, r1
 8000ec2:	3b20      	subs	r3, #32
 8000ec4:	40df      	lsrs	r7, r3
 8000ec6:	2d20      	cmp	r5, #32
 8000ec8:	d071      	beq.n	8000fae <__aeabi_dsub+0x416>
 8000eca:	2340      	movs	r3, #64	; 0x40
 8000ecc:	1b5d      	subs	r5, r3, r5
 8000ece:	40a9      	lsls	r1, r5
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	1e51      	subs	r1, r2, #1
 8000ed4:	418a      	sbcs	r2, r1
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4317      	orrs	r7, r2
 8000eda:	e6af      	b.n	8000c3c <__aeabi_dsub+0xa4>
 8000edc:	000007ff 	.word	0x000007ff
 8000ee0:	ff7fffff 	.word	0xff7fffff
 8000ee4:	800fffff 	.word	0x800fffff
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d03e      	beq.n	8000f6a <__aeabi_dsub+0x3d2>
 8000eec:	4eb3      	ldr	r6, [pc, #716]	; (80011bc <__aeabi_dsub+0x624>)
 8000eee:	45b4      	cmp	ip, r6
 8000ef0:	d045      	beq.n	8000f7e <__aeabi_dsub+0x3e6>
 8000ef2:	2680      	movs	r6, #128	; 0x80
 8000ef4:	0436      	lsls	r6, r6, #16
 8000ef6:	426d      	negs	r5, r5
 8000ef8:	4334      	orrs	r4, r6
 8000efa:	2d38      	cmp	r5, #56	; 0x38
 8000efc:	dd00      	ble.n	8000f00 <__aeabi_dsub+0x368>
 8000efe:	e0a8      	b.n	8001052 <__aeabi_dsub+0x4ba>
 8000f00:	2d1f      	cmp	r5, #31
 8000f02:	dd00      	ble.n	8000f06 <__aeabi_dsub+0x36e>
 8000f04:	e11f      	b.n	8001146 <__aeabi_dsub+0x5ae>
 8000f06:	2620      	movs	r6, #32
 8000f08:	0027      	movs	r7, r4
 8000f0a:	4650      	mov	r0, sl
 8000f0c:	1b76      	subs	r6, r6, r5
 8000f0e:	40b7      	lsls	r7, r6
 8000f10:	40e8      	lsrs	r0, r5
 8000f12:	4307      	orrs	r7, r0
 8000f14:	4650      	mov	r0, sl
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	1e46      	subs	r6, r0, #1
 8000f1a:	41b0      	sbcs	r0, r6
 8000f1c:	40ec      	lsrs	r4, r5
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	1a17      	subs	r7, r2, r0
 8000f22:	42ba      	cmp	r2, r7
 8000f24:	4192      	sbcs	r2, r2
 8000f26:	1b0c      	subs	r4, r1, r4
 8000f28:	4252      	negs	r2, r2
 8000f2a:	1aa4      	subs	r4, r4, r2
 8000f2c:	4666      	mov	r6, ip
 8000f2e:	4698      	mov	r8, r3
 8000f30:	e68b      	b.n	8000c4a <__aeabi_dsub+0xb2>
 8000f32:	4664      	mov	r4, ip
 8000f34:	4667      	mov	r7, ip
 8000f36:	432c      	orrs	r4, r5
 8000f38:	d000      	beq.n	8000f3c <__aeabi_dsub+0x3a4>
 8000f3a:	e68b      	b.n	8000c54 <__aeabi_dsub+0xbc>
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	2600      	movs	r6, #0
 8000f40:	2700      	movs	r7, #0
 8000f42:	e6ea      	b.n	8000d1a <__aeabi_dsub+0x182>
 8000f44:	001e      	movs	r6, r3
 8000f46:	e6ad      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8000f48:	2b1f      	cmp	r3, #31
 8000f4a:	dc60      	bgt.n	800100e <__aeabi_dsub+0x476>
 8000f4c:	2720      	movs	r7, #32
 8000f4e:	1af8      	subs	r0, r7, r3
 8000f50:	000f      	movs	r7, r1
 8000f52:	4684      	mov	ip, r0
 8000f54:	4087      	lsls	r7, r0
 8000f56:	0010      	movs	r0, r2
 8000f58:	40d8      	lsrs	r0, r3
 8000f5a:	4307      	orrs	r7, r0
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	4082      	lsls	r2, r0
 8000f60:	1e50      	subs	r0, r2, #1
 8000f62:	4182      	sbcs	r2, r0
 8000f64:	40d9      	lsrs	r1, r3
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e6f5      	b.n	8000d56 <__aeabi_dsub+0x1be>
 8000f6a:	0026      	movs	r6, r4
 8000f6c:	4650      	mov	r0, sl
 8000f6e:	4306      	orrs	r6, r0
 8000f70:	d005      	beq.n	8000f7e <__aeabi_dsub+0x3e6>
 8000f72:	43ed      	mvns	r5, r5
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d0d3      	beq.n	8000f20 <__aeabi_dsub+0x388>
 8000f78:	4e90      	ldr	r6, [pc, #576]	; (80011bc <__aeabi_dsub+0x624>)
 8000f7a:	45b4      	cmp	ip, r6
 8000f7c:	d1bd      	bne.n	8000efa <__aeabi_dsub+0x362>
 8000f7e:	000c      	movs	r4, r1
 8000f80:	0017      	movs	r7, r2
 8000f82:	4666      	mov	r6, ip
 8000f84:	4698      	mov	r8, r3
 8000f86:	e68d      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8000f88:	488c      	ldr	r0, [pc, #560]	; (80011bc <__aeabi_dsub+0x624>)
 8000f8a:	4283      	cmp	r3, r0
 8000f8c:	d00b      	beq.n	8000fa6 <__aeabi_dsub+0x40e>
 8000f8e:	4663      	mov	r3, ip
 8000f90:	e6d9      	b.n	8000d46 <__aeabi_dsub+0x1ae>
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	d000      	beq.n	8000f98 <__aeabi_dsub+0x400>
 8000f96:	e096      	b.n	80010c6 <__aeabi_dsub+0x52e>
 8000f98:	0008      	movs	r0, r1
 8000f9a:	4310      	orrs	r0, r2
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dsub+0x408>
 8000f9e:	e0e2      	b.n	8001166 <__aeabi_dsub+0x5ce>
 8000fa0:	000c      	movs	r4, r1
 8000fa2:	0017      	movs	r7, r2
 8000fa4:	4698      	mov	r8, r3
 8000fa6:	4e85      	ldr	r6, [pc, #532]	; (80011bc <__aeabi_dsub+0x624>)
 8000fa8:	e67c      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8000faa:	2500      	movs	r5, #0
 8000fac:	e780      	b.n	8000eb0 <__aeabi_dsub+0x318>
 8000fae:	2100      	movs	r1, #0
 8000fb0:	e78e      	b.n	8000ed0 <__aeabi_dsub+0x338>
 8000fb2:	0023      	movs	r3, r4
 8000fb4:	4650      	mov	r0, sl
 8000fb6:	4303      	orrs	r3, r0
 8000fb8:	2e00      	cmp	r6, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_dsub+0x426>
 8000fbc:	e0a8      	b.n	8001110 <__aeabi_dsub+0x578>
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_dsub+0x42c>
 8000fc2:	e0de      	b.n	8001182 <__aeabi_dsub+0x5ea>
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_dsub+0x434>
 8000fca:	e66b      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8000fcc:	4452      	add	r2, sl
 8000fce:	4552      	cmp	r2, sl
 8000fd0:	4180      	sbcs	r0, r0
 8000fd2:	1864      	adds	r4, r4, r1
 8000fd4:	4240      	negs	r0, r0
 8000fd6:	1824      	adds	r4, r4, r0
 8000fd8:	0017      	movs	r7, r2
 8000fda:	0223      	lsls	r3, r4, #8
 8000fdc:	d400      	bmi.n	8000fe0 <__aeabi_dsub+0x448>
 8000fde:	e6fd      	b.n	8000ddc <__aeabi_dsub+0x244>
 8000fe0:	4b77      	ldr	r3, [pc, #476]	; (80011c0 <__aeabi_dsub+0x628>)
 8000fe2:	4666      	mov	r6, ip
 8000fe4:	401c      	ands	r4, r3
 8000fe6:	e65d      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8000fe8:	0025      	movs	r5, r4
 8000fea:	4650      	mov	r0, sl
 8000fec:	4305      	orrs	r5, r0
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	d1cf      	bne.n	8000f92 <__aeabi_dsub+0x3fa>
 8000ff2:	2d00      	cmp	r5, #0
 8000ff4:	d14f      	bne.n	8001096 <__aeabi_dsub+0x4fe>
 8000ff6:	000c      	movs	r4, r1
 8000ff8:	4314      	orrs	r4, r2
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dsub+0x466>
 8000ffc:	e0a0      	b.n	8001140 <__aeabi_dsub+0x5a8>
 8000ffe:	000c      	movs	r4, r1
 8001000:	0017      	movs	r7, r2
 8001002:	4698      	mov	r8, r3
 8001004:	e64e      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8001006:	4666      	mov	r6, ip
 8001008:	2400      	movs	r4, #0
 800100a:	2700      	movs	r7, #0
 800100c:	e685      	b.n	8000d1a <__aeabi_dsub+0x182>
 800100e:	001f      	movs	r7, r3
 8001010:	0008      	movs	r0, r1
 8001012:	3f20      	subs	r7, #32
 8001014:	40f8      	lsrs	r0, r7
 8001016:	0007      	movs	r7, r0
 8001018:	2b20      	cmp	r3, #32
 800101a:	d100      	bne.n	800101e <__aeabi_dsub+0x486>
 800101c:	e08e      	b.n	800113c <__aeabi_dsub+0x5a4>
 800101e:	2040      	movs	r0, #64	; 0x40
 8001020:	1ac3      	subs	r3, r0, r3
 8001022:	4099      	lsls	r1, r3
 8001024:	430a      	orrs	r2, r1
 8001026:	1e51      	subs	r1, r2, #1
 8001028:	418a      	sbcs	r2, r1
 800102a:	2100      	movs	r1, #0
 800102c:	4317      	orrs	r7, r2
 800102e:	e692      	b.n	8000d56 <__aeabi_dsub+0x1be>
 8001030:	2e00      	cmp	r6, #0
 8001032:	d114      	bne.n	800105e <__aeabi_dsub+0x4c6>
 8001034:	0026      	movs	r6, r4
 8001036:	4650      	mov	r0, sl
 8001038:	4306      	orrs	r6, r0
 800103a:	d062      	beq.n	8001102 <__aeabi_dsub+0x56a>
 800103c:	43db      	mvns	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d15c      	bne.n	80010fc <__aeabi_dsub+0x564>
 8001042:	1887      	adds	r7, r0, r2
 8001044:	4297      	cmp	r7, r2
 8001046:	4192      	sbcs	r2, r2
 8001048:	1864      	adds	r4, r4, r1
 800104a:	4252      	negs	r2, r2
 800104c:	18a4      	adds	r4, r4, r2
 800104e:	4666      	mov	r6, ip
 8001050:	e687      	b.n	8000d62 <__aeabi_dsub+0x1ca>
 8001052:	4650      	mov	r0, sl
 8001054:	4320      	orrs	r0, r4
 8001056:	1e44      	subs	r4, r0, #1
 8001058:	41a0      	sbcs	r0, r4
 800105a:	2400      	movs	r4, #0
 800105c:	e760      	b.n	8000f20 <__aeabi_dsub+0x388>
 800105e:	4e57      	ldr	r6, [pc, #348]	; (80011bc <__aeabi_dsub+0x624>)
 8001060:	45b4      	cmp	ip, r6
 8001062:	d04e      	beq.n	8001102 <__aeabi_dsub+0x56a>
 8001064:	2680      	movs	r6, #128	; 0x80
 8001066:	0436      	lsls	r6, r6, #16
 8001068:	425b      	negs	r3, r3
 800106a:	4334      	orrs	r4, r6
 800106c:	2b38      	cmp	r3, #56	; 0x38
 800106e:	dd00      	ble.n	8001072 <__aeabi_dsub+0x4da>
 8001070:	e07f      	b.n	8001172 <__aeabi_dsub+0x5da>
 8001072:	2b1f      	cmp	r3, #31
 8001074:	dd00      	ble.n	8001078 <__aeabi_dsub+0x4e0>
 8001076:	e08b      	b.n	8001190 <__aeabi_dsub+0x5f8>
 8001078:	2620      	movs	r6, #32
 800107a:	0027      	movs	r7, r4
 800107c:	4650      	mov	r0, sl
 800107e:	1af6      	subs	r6, r6, r3
 8001080:	40b7      	lsls	r7, r6
 8001082:	40d8      	lsrs	r0, r3
 8001084:	4307      	orrs	r7, r0
 8001086:	4650      	mov	r0, sl
 8001088:	40b0      	lsls	r0, r6
 800108a:	1e46      	subs	r6, r0, #1
 800108c:	41b0      	sbcs	r0, r6
 800108e:	4307      	orrs	r7, r0
 8001090:	40dc      	lsrs	r4, r3
 8001092:	18bf      	adds	r7, r7, r2
 8001094:	e7d6      	b.n	8001044 <__aeabi_dsub+0x4ac>
 8001096:	000d      	movs	r5, r1
 8001098:	4315      	orrs	r5, r2
 800109a:	d100      	bne.n	800109e <__aeabi_dsub+0x506>
 800109c:	e602      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 800109e:	4650      	mov	r0, sl
 80010a0:	1a80      	subs	r0, r0, r2
 80010a2:	4582      	cmp	sl, r0
 80010a4:	41bf      	sbcs	r7, r7
 80010a6:	1a65      	subs	r5, r4, r1
 80010a8:	427f      	negs	r7, r7
 80010aa:	1bed      	subs	r5, r5, r7
 80010ac:	4684      	mov	ip, r0
 80010ae:	0228      	lsls	r0, r5, #8
 80010b0:	d400      	bmi.n	80010b4 <__aeabi_dsub+0x51c>
 80010b2:	e68d      	b.n	8000dd0 <__aeabi_dsub+0x238>
 80010b4:	4650      	mov	r0, sl
 80010b6:	1a17      	subs	r7, r2, r0
 80010b8:	42ba      	cmp	r2, r7
 80010ba:	4192      	sbcs	r2, r2
 80010bc:	1b0c      	subs	r4, r1, r4
 80010be:	4252      	negs	r2, r2
 80010c0:	1aa4      	subs	r4, r4, r2
 80010c2:	4698      	mov	r8, r3
 80010c4:	e5ee      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 80010c6:	000d      	movs	r5, r1
 80010c8:	4315      	orrs	r5, r2
 80010ca:	d100      	bne.n	80010ce <__aeabi_dsub+0x536>
 80010cc:	e76b      	b.n	8000fa6 <__aeabi_dsub+0x40e>
 80010ce:	4650      	mov	r0, sl
 80010d0:	0767      	lsls	r7, r4, #29
 80010d2:	08c0      	lsrs	r0, r0, #3
 80010d4:	4307      	orrs	r7, r0
 80010d6:	2080      	movs	r0, #128	; 0x80
 80010d8:	08e4      	lsrs	r4, r4, #3
 80010da:	0300      	lsls	r0, r0, #12
 80010dc:	4204      	tst	r4, r0
 80010de:	d007      	beq.n	80010f0 <__aeabi_dsub+0x558>
 80010e0:	08cd      	lsrs	r5, r1, #3
 80010e2:	4205      	tst	r5, r0
 80010e4:	d104      	bne.n	80010f0 <__aeabi_dsub+0x558>
 80010e6:	002c      	movs	r4, r5
 80010e8:	4698      	mov	r8, r3
 80010ea:	08d7      	lsrs	r7, r2, #3
 80010ec:	0749      	lsls	r1, r1, #29
 80010ee:	430f      	orrs	r7, r1
 80010f0:	0f7b      	lsrs	r3, r7, #29
 80010f2:	00e4      	lsls	r4, r4, #3
 80010f4:	431c      	orrs	r4, r3
 80010f6:	00ff      	lsls	r7, r7, #3
 80010f8:	4e30      	ldr	r6, [pc, #192]	; (80011bc <__aeabi_dsub+0x624>)
 80010fa:	e5d3      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 80010fc:	4e2f      	ldr	r6, [pc, #188]	; (80011bc <__aeabi_dsub+0x624>)
 80010fe:	45b4      	cmp	ip, r6
 8001100:	d1b4      	bne.n	800106c <__aeabi_dsub+0x4d4>
 8001102:	000c      	movs	r4, r1
 8001104:	0017      	movs	r7, r2
 8001106:	4666      	mov	r6, ip
 8001108:	e5cc      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 800110a:	2700      	movs	r7, #0
 800110c:	2400      	movs	r4, #0
 800110e:	e5e8      	b.n	8000ce2 <__aeabi_dsub+0x14a>
 8001110:	2b00      	cmp	r3, #0
 8001112:	d039      	beq.n	8001188 <__aeabi_dsub+0x5f0>
 8001114:	000b      	movs	r3, r1
 8001116:	4313      	orrs	r3, r2
 8001118:	d100      	bne.n	800111c <__aeabi_dsub+0x584>
 800111a:	e744      	b.n	8000fa6 <__aeabi_dsub+0x40e>
 800111c:	08c0      	lsrs	r0, r0, #3
 800111e:	0767      	lsls	r7, r4, #29
 8001120:	4307      	orrs	r7, r0
 8001122:	2080      	movs	r0, #128	; 0x80
 8001124:	08e4      	lsrs	r4, r4, #3
 8001126:	0300      	lsls	r0, r0, #12
 8001128:	4204      	tst	r4, r0
 800112a:	d0e1      	beq.n	80010f0 <__aeabi_dsub+0x558>
 800112c:	08cb      	lsrs	r3, r1, #3
 800112e:	4203      	tst	r3, r0
 8001130:	d1de      	bne.n	80010f0 <__aeabi_dsub+0x558>
 8001132:	08d7      	lsrs	r7, r2, #3
 8001134:	0749      	lsls	r1, r1, #29
 8001136:	430f      	orrs	r7, r1
 8001138:	001c      	movs	r4, r3
 800113a:	e7d9      	b.n	80010f0 <__aeabi_dsub+0x558>
 800113c:	2100      	movs	r1, #0
 800113e:	e771      	b.n	8001024 <__aeabi_dsub+0x48c>
 8001140:	2500      	movs	r5, #0
 8001142:	2700      	movs	r7, #0
 8001144:	e5e9      	b.n	8000d1a <__aeabi_dsub+0x182>
 8001146:	002e      	movs	r6, r5
 8001148:	0027      	movs	r7, r4
 800114a:	3e20      	subs	r6, #32
 800114c:	40f7      	lsrs	r7, r6
 800114e:	2d20      	cmp	r5, #32
 8001150:	d02f      	beq.n	80011b2 <__aeabi_dsub+0x61a>
 8001152:	2640      	movs	r6, #64	; 0x40
 8001154:	1b75      	subs	r5, r6, r5
 8001156:	40ac      	lsls	r4, r5
 8001158:	4650      	mov	r0, sl
 800115a:	4320      	orrs	r0, r4
 800115c:	1e44      	subs	r4, r0, #1
 800115e:	41a0      	sbcs	r0, r4
 8001160:	2400      	movs	r4, #0
 8001162:	4338      	orrs	r0, r7
 8001164:	e6dc      	b.n	8000f20 <__aeabi_dsub+0x388>
 8001166:	2480      	movs	r4, #128	; 0x80
 8001168:	2500      	movs	r5, #0
 800116a:	0324      	lsls	r4, r4, #12
 800116c:	4e13      	ldr	r6, [pc, #76]	; (80011bc <__aeabi_dsub+0x624>)
 800116e:	2700      	movs	r7, #0
 8001170:	e5d3      	b.n	8000d1a <__aeabi_dsub+0x182>
 8001172:	4650      	mov	r0, sl
 8001174:	4320      	orrs	r0, r4
 8001176:	0007      	movs	r7, r0
 8001178:	1e78      	subs	r0, r7, #1
 800117a:	4187      	sbcs	r7, r0
 800117c:	2400      	movs	r4, #0
 800117e:	18bf      	adds	r7, r7, r2
 8001180:	e760      	b.n	8001044 <__aeabi_dsub+0x4ac>
 8001182:	000c      	movs	r4, r1
 8001184:	0017      	movs	r7, r2
 8001186:	e58d      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8001188:	000c      	movs	r4, r1
 800118a:	0017      	movs	r7, r2
 800118c:	4e0b      	ldr	r6, [pc, #44]	; (80011bc <__aeabi_dsub+0x624>)
 800118e:	e589      	b.n	8000ca4 <__aeabi_dsub+0x10c>
 8001190:	001e      	movs	r6, r3
 8001192:	0027      	movs	r7, r4
 8001194:	3e20      	subs	r6, #32
 8001196:	40f7      	lsrs	r7, r6
 8001198:	2b20      	cmp	r3, #32
 800119a:	d00c      	beq.n	80011b6 <__aeabi_dsub+0x61e>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	409c      	lsls	r4, r3
 80011a2:	4650      	mov	r0, sl
 80011a4:	4320      	orrs	r0, r4
 80011a6:	1e44      	subs	r4, r0, #1
 80011a8:	41a0      	sbcs	r0, r4
 80011aa:	4307      	orrs	r7, r0
 80011ac:	2400      	movs	r4, #0
 80011ae:	18bf      	adds	r7, r7, r2
 80011b0:	e748      	b.n	8001044 <__aeabi_dsub+0x4ac>
 80011b2:	2400      	movs	r4, #0
 80011b4:	e7d0      	b.n	8001158 <__aeabi_dsub+0x5c0>
 80011b6:	2400      	movs	r4, #0
 80011b8:	e7f3      	b.n	80011a2 <__aeabi_dsub+0x60a>
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	000007ff 	.word	0x000007ff
 80011c0:	ff7fffff 	.word	0xff7fffff

080011c4 <__aeabi_d2iz>:
 80011c4:	b530      	push	{r4, r5, lr}
 80011c6:	4d13      	ldr	r5, [pc, #76]	; (8001214 <__aeabi_d2iz+0x50>)
 80011c8:	030a      	lsls	r2, r1, #12
 80011ca:	004b      	lsls	r3, r1, #1
 80011cc:	0b12      	lsrs	r2, r2, #12
 80011ce:	0d5b      	lsrs	r3, r3, #21
 80011d0:	0fc9      	lsrs	r1, r1, #31
 80011d2:	2400      	movs	r4, #0
 80011d4:	42ab      	cmp	r3, r5
 80011d6:	dd10      	ble.n	80011fa <__aeabi_d2iz+0x36>
 80011d8:	4c0f      	ldr	r4, [pc, #60]	; (8001218 <__aeabi_d2iz+0x54>)
 80011da:	42a3      	cmp	r3, r4
 80011dc:	dc0f      	bgt.n	80011fe <__aeabi_d2iz+0x3a>
 80011de:	2480      	movs	r4, #128	; 0x80
 80011e0:	4d0e      	ldr	r5, [pc, #56]	; (800121c <__aeabi_d2iz+0x58>)
 80011e2:	0364      	lsls	r4, r4, #13
 80011e4:	4322      	orrs	r2, r4
 80011e6:	1aed      	subs	r5, r5, r3
 80011e8:	2d1f      	cmp	r5, #31
 80011ea:	dd0b      	ble.n	8001204 <__aeabi_d2iz+0x40>
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <__aeabi_d2iz+0x5c>)
 80011ee:	1ac3      	subs	r3, r0, r3
 80011f0:	40da      	lsrs	r2, r3
 80011f2:	4254      	negs	r4, r2
 80011f4:	2900      	cmp	r1, #0
 80011f6:	d100      	bne.n	80011fa <__aeabi_d2iz+0x36>
 80011f8:	0014      	movs	r4, r2
 80011fa:	0020      	movs	r0, r4
 80011fc:	bd30      	pop	{r4, r5, pc}
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <__aeabi_d2iz+0x60>)
 8001200:	18cc      	adds	r4, r1, r3
 8001202:	e7fa      	b.n	80011fa <__aeabi_d2iz+0x36>
 8001204:	4c08      	ldr	r4, [pc, #32]	; (8001228 <__aeabi_d2iz+0x64>)
 8001206:	40e8      	lsrs	r0, r5
 8001208:	46a4      	mov	ip, r4
 800120a:	4463      	add	r3, ip
 800120c:	409a      	lsls	r2, r3
 800120e:	4302      	orrs	r2, r0
 8001210:	e7ef      	b.n	80011f2 <__aeabi_d2iz+0x2e>
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	000003fe 	.word	0x000003fe
 8001218:	0000041d 	.word	0x0000041d
 800121c:	00000433 	.word	0x00000433
 8001220:	00000413 	.word	0x00000413
 8001224:	7fffffff 	.word	0x7fffffff
 8001228:	fffffbed 	.word	0xfffffbed

0800122c <__aeabi_i2d>:
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	2800      	cmp	r0, #0
 8001230:	d030      	beq.n	8001294 <__aeabi_i2d+0x68>
 8001232:	17c3      	asrs	r3, r0, #31
 8001234:	18c4      	adds	r4, r0, r3
 8001236:	405c      	eors	r4, r3
 8001238:	0fc5      	lsrs	r5, r0, #31
 800123a:	0020      	movs	r0, r4
 800123c:	f000 f838 	bl	80012b0 <__clzsi2>
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <__aeabi_i2d+0x74>)
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <__aeabi_i2d+0x78>)
 8001244:	1a1b      	subs	r3, r3, r0
 8001246:	1ad2      	subs	r2, r2, r3
 8001248:	2a1f      	cmp	r2, #31
 800124a:	dd18      	ble.n	800127e <__aeabi_i2d+0x52>
 800124c:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <__aeabi_i2d+0x7c>)
 800124e:	1ad2      	subs	r2, r2, r3
 8001250:	4094      	lsls	r4, r2
 8001252:	2200      	movs	r2, #0
 8001254:	0324      	lsls	r4, r4, #12
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	0b24      	lsrs	r4, r4, #12
 800125a:	0d5b      	lsrs	r3, r3, #21
 800125c:	2100      	movs	r1, #0
 800125e:	0010      	movs	r0, r2
 8001260:	0324      	lsls	r4, r4, #12
 8001262:	0d0a      	lsrs	r2, r1, #20
 8001264:	0b24      	lsrs	r4, r4, #12
 8001266:	0512      	lsls	r2, r2, #20
 8001268:	4322      	orrs	r2, r4
 800126a:	4c10      	ldr	r4, [pc, #64]	; (80012ac <__aeabi_i2d+0x80>)
 800126c:	051b      	lsls	r3, r3, #20
 800126e:	4022      	ands	r2, r4
 8001270:	4313      	orrs	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	07ed      	lsls	r5, r5, #31
 8001276:	085b      	lsrs	r3, r3, #1
 8001278:	432b      	orrs	r3, r5
 800127a:	0019      	movs	r1, r3
 800127c:	bd70      	pop	{r4, r5, r6, pc}
 800127e:	0021      	movs	r1, r4
 8001280:	4091      	lsls	r1, r2
 8001282:	000a      	movs	r2, r1
 8001284:	210b      	movs	r1, #11
 8001286:	1a08      	subs	r0, r1, r0
 8001288:	40c4      	lsrs	r4, r0
 800128a:	055b      	lsls	r3, r3, #21
 800128c:	0324      	lsls	r4, r4, #12
 800128e:	0b24      	lsrs	r4, r4, #12
 8001290:	0d5b      	lsrs	r3, r3, #21
 8001292:	e7e3      	b.n	800125c <__aeabi_i2d+0x30>
 8001294:	2500      	movs	r5, #0
 8001296:	2300      	movs	r3, #0
 8001298:	2400      	movs	r4, #0
 800129a:	2200      	movs	r2, #0
 800129c:	e7de      	b.n	800125c <__aeabi_i2d+0x30>
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	0000041e 	.word	0x0000041e
 80012a4:	00000433 	.word	0x00000433
 80012a8:	00000413 	.word	0x00000413
 80012ac:	800fffff 	.word	0x800fffff

080012b0 <__clzsi2>:
 80012b0:	211c      	movs	r1, #28
 80012b2:	2301      	movs	r3, #1
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	4298      	cmp	r0, r3
 80012b8:	d301      	bcc.n	80012be <__clzsi2+0xe>
 80012ba:	0c00      	lsrs	r0, r0, #16
 80012bc:	3910      	subs	r1, #16
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	4298      	cmp	r0, r3
 80012c2:	d301      	bcc.n	80012c8 <__clzsi2+0x18>
 80012c4:	0a00      	lsrs	r0, r0, #8
 80012c6:	3908      	subs	r1, #8
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d301      	bcc.n	80012d2 <__clzsi2+0x22>
 80012ce:	0900      	lsrs	r0, r0, #4
 80012d0:	3904      	subs	r1, #4
 80012d2:	a202      	add	r2, pc, #8	; (adr r2, 80012dc <__clzsi2+0x2c>)
 80012d4:	5c10      	ldrb	r0, [r2, r0]
 80012d6:	1840      	adds	r0, r0, r1
 80012d8:	4770      	bx	lr
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	02020304 	.word	0x02020304
 80012e0:	01010101 	.word	0x01010101
	...

080012ec <IFLASH_setup>:
}
/*---------------------------------------------------------------------
 * @brief:	initial flash memory.
 ----------------------------------------------------------------------*/
void IFLASH_setup(IFLASH_delay10ms_CB cb)
{
 80012ec:	b510      	push	{r4, lr}
	IFLASH_delay10ms = cb;
 80012ee:	4c0a      	ldr	r4, [pc, #40]	; (8001318 <IFLASH_setup+0x2c>)
 80012f0:	6020      	str	r0, [r4, #0]
	RCC_HSICmd(ENABLE);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f001 fa8c 	bl	8002810 <RCC_HSICmd>
	FLASH_PrefetchBufferCmd(DISABLE);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f001 f94f 	bl	800259c <FLASH_PrefetchBufferCmd>
	//FLASH_SetLatency(FLASH_Latency_2);
	while( FLASH_GetStatus() != FLASH_COMPLETE )
 80012fe:	f001 f979 	bl	80025f4 <FLASH_GetStatus>
 8001302:	2804      	cmp	r0, #4
 8001304:	d100      	bne.n	8001308 <IFLASH_setup+0x1c>
	}
#ifdef STM32F1_FLASH_SAFEWRITE
	memset(&safeWrtParam, 0, sizeof(SAFEWRT_PARAM_t));
#endif

}
 8001306:	bd10      	pop	{r4, pc}
		if (IFLASH_delay10ms != NULL)
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f7      	beq.n	80012fe <IFLASH_setup+0x12>
			IFLASH_delay10ms(10);
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	200a      	movs	r0, #10
 8001312:	4798      	blx	r3
 8001314:	e7f3      	b.n	80012fe <IFLASH_setup+0x12>
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	2000020c 	.word	0x2000020c

0800131c <IFLASH_rd>:
/*--------------------------------------------------------------------
 *
 ---------------------------------------------------------------------*/
void IFLASH_rd(U32 addr, U16 size, void *dat)
{
 800131c:	0013      	movs	r3, r2
 800131e:	b510      	push	{r4, lr}
	memcpy(dat, (void*)addr, size);
 8001320:	000a      	movs	r2, r1
 8001322:	0001      	movs	r1, r0
 8001324:	0018      	movs	r0, r3
 8001326:	f002 f9b4 	bl	8003692 <memcpy>
}
 800132a:	bd10      	pop	{r4, pc}

0800132c <IFLASH_waitUntilOccupied>:
//}
/*---------------------------------------------------------------------
 * @brief:
 ----------------------------------------------------------------------*/
void IFLASH_waitUntilOccupied(void)
{
 800132c:	b510      	push	{r4, lr}
	while (flashIsBusy)
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <IFLASH_waitUntilOccupied+0x20>)
	{
		if (IFLASH_delay10ms != NULL)
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <IFLASH_waitUntilOccupied+0x24>)
	while (flashIsBusy)
 8001332:	7819      	ldrb	r1, [r3, #0]
 8001334:	2900      	cmp	r1, #0
 8001336:	d102      	bne.n	800133e <IFLASH_waitUntilOccupied+0x12>
		{
			IFLASH_delay10ms(10);
		}
	}
	flashIsBusy = 1;
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
}
 800133c:	bd10      	pop	{r4, pc}
		if (IFLASH_delay10ms != NULL)
 800133e:	6811      	ldr	r1, [r2, #0]
 8001340:	2900      	cmp	r1, #0
 8001342:	d0f6      	beq.n	8001332 <IFLASH_waitUntilOccupied+0x6>
			IFLASH_delay10ms(10);
 8001344:	6813      	ldr	r3, [r2, #0]
 8001346:	200a      	movs	r0, #10
 8001348:	4798      	blx	r3
 800134a:	e7f0      	b.n	800132e <IFLASH_waitUntilOccupied+0x2>
 800134c:	20000210 	.word	0x20000210
 8001350:	2000020c 	.word	0x2000020c

08001354 <IFLASH_wrt>:
{
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	0016      	movs	r6, r2
	U32 wTmp = 0//
 8001358:	2400      	movs	r4, #0
{
 800135a:	b085      	sub	sp, #20
 800135c:	9100      	str	r1, [sp, #0]
	if (!memcmp(dat, (void*)addr, len))
 800135e:	000a      	movs	r2, r1
{
 8001360:	0007      	movs	r7, r0
	if (!memcmp(dat, (void*)addr, len))
 8001362:	0001      	movs	r1, r0
 8001364:	0030      	movs	r0, r6
	U32 wTmp = 0//
 8001366:	9403      	str	r4, [sp, #12]
	if (!memcmp(dat, (void*)addr, len))
 8001368:	f002 f984 	bl	8003674 <memcmp>
 800136c:	0003      	movs	r3, r0
		return 0;
 800136e:	0020      	movs	r0, r4
	if (!memcmp(dat, (void*)addr, len))
 8001370:	42a3      	cmp	r3, r4
 8001372:	d023      	beq.n	80013bc <IFLASH_wrt+0x68>
	IFLASH_waitUntilOccupied();
 8001374:	f7ff ffda 	bl	800132c <IFLASH_waitUntilOccupied>
	FLASH_Unlock();
 8001378:	f001 f91e 	bl	80025b8 <FLASH_Unlock>
	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 800137c:	2034      	movs	r0, #52	; 0x34
 800137e:	f001 f933 	bl	80025e8 <FLASH_ClearFlag>
	for (index = 0; index < len; index += 4)
 8001382:	0034      	movs	r4, r6
 8001384:	9a00      	ldr	r2, [sp, #0]
 8001386:	1ba3      	subs	r3, r4, r6
 8001388:	429a      	cmp	r2, r3
 800138a:	d805      	bhi.n	8001398 <IFLASH_wrt+0x44>
	FLASH_Lock();
 800138c:	f001 f924 	bl	80025d8 <FLASH_Lock>
/*---------------------------------------------------------------------
 * @brief:
 ----------------------------------------------------------------------*/
void IFLASH_releaseOccupying(void)
{
	flashIsBusy = 0;
 8001390:	2000      	movs	r0, #0
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <IFLASH_wrt+0x94>)
 8001394:	7018      	strb	r0, [r3, #0]
	return 0;
 8001396:	e011      	b.n	80013bc <IFLASH_wrt+0x68>
 8001398:	1bbd      	subs	r5, r7, r6
 800139a:	192d      	adds	r5, r5, r4
		if (!((index + addr) % FLASH_PAGESIZE))
 800139c:	05ab      	lsls	r3, r5, #22
 800139e:	0d9b      	lsrs	r3, r3, #22
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	d10d      	bne.n	80013c0 <IFLASH_wrt+0x6c>
			FLASHStatus = FLASH_ErasePage(index + addr);
 80013a4:	0028      	movs	r0, r5
 80013a6:	f001 f949 	bl	800263c <FLASH_ErasePage>
			if( FLASHStatus != FLASH_COMPLETE)
 80013aa:	2804      	cmp	r0, #4
 80013ac:	d008      	beq.n	80013c0 <IFLASH_wrt+0x6c>
				FLASH_Lock();
 80013ae:	f001 f913 	bl	80025d8 <FLASH_Lock>
	flashIsBusy = 0;
 80013b2:	466a      	mov	r2, sp
				return 2;
 80013b4:	2002      	movs	r0, #2
	flashIsBusy = 0;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <IFLASH_wrt+0x94>)
 80013b8:	7912      	ldrb	r2, [r2, #4]
 80013ba:	701a      	strb	r2, [r3, #0]
}
 80013bc:	b005      	add	sp, #20
 80013be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&wTmp, &dat[index], 4);// 1 word = 4 bytes
 80013c0:	0021      	movs	r1, r4
 80013c2:	2204      	movs	r2, #4
 80013c4:	a803      	add	r0, sp, #12
 80013c6:	f002 f964 	bl	8003692 <memcpy>
		FLASHStatus = FLASH_ProgramWord(index + addr, wTmp);
 80013ca:	9903      	ldr	r1, [sp, #12]
 80013cc:	0028      	movs	r0, r5
 80013ce:	f001 f951 	bl	8002674 <FLASH_ProgramWord>
 80013d2:	3404      	adds	r4, #4
		if (FLASHStatus != FLASH_COMPLETE)
 80013d4:	2804      	cmp	r0, #4
 80013d6:	d0d5      	beq.n	8001384 <IFLASH_wrt+0x30>
			FLASH_Lock();
 80013d8:	f001 f8fe 	bl	80025d8 <FLASH_Lock>
	flashIsBusy = 0;
 80013dc:	2200      	movs	r2, #0
 80013de:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <IFLASH_wrt+0x94>)
			return 3;
 80013e0:	2003      	movs	r0, #3
	flashIsBusy = 0;
 80013e2:	701a      	strb	r2, [r3, #0]
			return 3;
 80013e4:	e7ea      	b.n	80013bc <IFLASH_wrt+0x68>
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	20000210 	.word	0x20000210

080013ec <IO_setup>:
 * 			pin		|	IN	|	pin selection: 1->15
 * 			dir		|	IN	|	direction selection
 *
 -----------------------------------------------------------------------------------------*/
void IO_setup(IO_PORT_t port, U8 pin, IO_DIR_t dir)
{
 80013ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013ee:	0006      	movs	r6, r0
	GPIO_TypeDef *portx;
	U16 pinx;
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA//
 80013f0:	20fc      	movs	r0, #252	; 0xfc
{
 80013f2:	000d      	movs	r5, r1
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA//
 80013f4:	03c0      	lsls	r0, r0, #15
 80013f6:	2101      	movs	r1, #1
{
 80013f8:	0014      	movs	r4, r2
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA//
 80013fa:	f001 faf5 	bl	80029e8 <RCC_AHBPeriphClockCmd>
		/* PA14: default is JTCK-SWCLK */
		/* PA15: default is JTDI */
		GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
	}
#endif //
	GPIO_StructInit(&GPIO_InitStruct);
 80013fe:	4668      	mov	r0, sp
 8001400:	f001 f99c 	bl	800273c <GPIO_StructInit>
	switch (port)
 8001404:	2e05      	cmp	r6, #5
 8001406:	d826      	bhi.n	8001456 <IO_setup+0x6a>
 8001408:	0030      	movs	r0, r6
 800140a:	f7fe fe7d 	bl	8000108 <__gnu_thumb1_case_uqi>
 800140e:	0317      	.short	0x0317
 8001410:	1513110f 	.word	0x1513110f
	{
		case IOPORT_A: portx = GPIOA;
			break;
		case IOPORT_B: portx = GPIOB;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <IO_setup+0x90>)
		case IOPORT_F: portx = GPIOF;
			break;
		default:
			return;
	}
	pinx = 1 << pin;
 8001416:	2201      	movs	r2, #1
 8001418:	0011      	movs	r1, r2
 800141a:	40a9      	lsls	r1, r5
	switch (dir)
 800141c:	2c04      	cmp	r4, #4
 800141e:	d81a      	bhi.n	8001456 <IO_setup+0x6a>
 8001420:	0020      	movs	r0, r4
 8001422:	f7fe fe71 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001426:	190e      	.short	0x190e
 8001428:	231e      	.short	0x231e
 800142a:	28          	.byte	0x28
 800142b:	00          	.byte	0x00
		case IOPORT_C: portx = GPIOC;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <IO_setup+0x94>)
			break;
 800142e:	e7f2      	b.n	8001416 <IO_setup+0x2a>
		case IOPORT_D: portx = GPIOD;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <IO_setup+0x98>)
			break;
 8001432:	e7f0      	b.n	8001416 <IO_setup+0x2a>
		case IOPORT_E: portx = GPIOE;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <IO_setup+0x9c>)
			break;
 8001436:	e7ee      	b.n	8001416 <IO_setup+0x2a>
		case IOPORT_F: portx = GPIOF;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <IO_setup+0xa0>)
			break;
 800143a:	e7ec      	b.n	8001416 <IO_setup+0x2a>
		case IOPORT_A: portx = GPIOA;
 800143c:	2390      	movs	r3, #144	; 0x90
 800143e:	05db      	lsls	r3, r3, #23
 8001440:	e7e9      	b.n	8001416 <IO_setup+0x2a>
	{
		case IODIR_INF:
			GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001442:	2200      	movs	r2, #0
 8001444:	4668      	mov	r0, sp
 8001446:	7102      	strb	r2, [r0, #4]
			GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
			break;
		case IODIR_IPU:
			GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
			GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001448:	71c2      	strb	r2, [r0, #7]
			GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
			break;
		default:
			return;
	}
	GPIO_InitStruct.GPIO_Pin = pinx;
 800144a:	b289      	uxth	r1, r1
 800144c:	9100      	str	r1, [sp, #0]
	GPIO_Init(portx, &GPIO_InitStruct);
 800144e:	0018      	movs	r0, r3
 8001450:	4669      	mov	r1, sp
 8001452:	f001 f937 	bl	80026c4 <GPIO_Init>
}
 8001456:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
			GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001458:	2200      	movs	r2, #0
 800145a:	4668      	mov	r0, sp
 800145c:	7102      	strb	r2, [r0, #4]
			GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800145e:	3201      	adds	r2, #1
 8001460:	e7f2      	b.n	8001448 <IO_setup+0x5c>
			GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001462:	2200      	movs	r2, #0
 8001464:	4668      	mov	r0, sp
 8001466:	7102      	strb	r2, [r0, #4]
			GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001468:	3202      	adds	r2, #2
 800146a:	e7ed      	b.n	8001448 <IO_setup+0x5c>
			GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 800146c:	4668      	mov	r0, sp
 800146e:	7102      	strb	r2, [r0, #4]
			GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001470:	2200      	movs	r2, #0
			GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001472:	7182      	strb	r2, [r0, #6]
			break;
 8001474:	e7e9      	b.n	800144a <IO_setup+0x5e>
			GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8001476:	4668      	mov	r0, sp
 8001478:	7102      	strb	r2, [r0, #4]
 800147a:	e7fa      	b.n	8001472 <IO_setup+0x86>
 800147c:	48000400 	.word	0x48000400
 8001480:	48000800 	.word	0x48000800
 8001484:	48000c00 	.word	0x48000c00
 8001488:	48001000 	.word	0x48001000
 800148c:	48001400 	.word	0x48001400

08001490 <IO_EXTI_setup>:
 * 			dir		|	IN	|	direction selection. Only accept 'input' types here.
 * 			trig	|	IN	|	trigger type selection
 *
 -----------------------------------------------------------------------------------------*/
void IO_EXTI_setup(IO_PORT_t port, U8 pin, IO_DIR_t dir, EXTI_TRIG_t trig, IO_EXTI_int_CB cb)
{
 8001490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001492:	0007      	movs	r7, r0
 8001494:	000c      	movs	r4, r1
 8001496:	001e      	movs	r6, r3
	EXTI_InitTypeDef EXTI_InitStructure;
	U8 portSrc;

	switch (port)
 8001498:	2805      	cmp	r0, #5
 800149a:	d82a      	bhi.n	80014f2 <IO_EXTI_setup+0x62>
 800149c:	f7fe fe34 	bl	8000108 <__gnu_thumb1_case_uqi>
 80014a0:	2c2a0332 	.word	0x2c2a0332
 80014a4:	302e      	.short	0x302e
	{
		case IOPORT_A:
			portSrc = EXTI_PortSourceGPIOA;
			break;
		case IOPORT_B:
			portSrc = EXTI_PortSourceGPIOB;
 80014a6:	2501      	movs	r5, #1
			portSrc = EXTI_PortSourceGPIOF;
			break;
		default:
			return;
	}
	IO_setup(port, pin, dir);
 80014a8:	0021      	movs	r1, r4
 80014aa:	0038      	movs	r0, r7
 80014ac:	f7ff ff9e 	bl	80013ec <IO_setup>
	/* Enable SYSCFG clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80014b0:	2101      	movs	r1, #1
 80014b2:	0008      	movs	r0, r1
 80014b4:	f001 faa4 	bl	8002a00 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(portSrc, pin);
 80014b8:	0021      	movs	r1, r4
 80014ba:	0028      	movs	r0, r5
 80014bc:	f001 fb28 	bl	8002b10 <SYSCFG_EXTILineConfig>
	EXTI_InitStructure.EXTI_Line = 1 << pin;
 80014c0:	2301      	movs	r3, #1
 80014c2:	001a      	movs	r2, r3
 80014c4:	40a2      	lsls	r2, r4
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80014c6:	4669      	mov	r1, sp
	EXTI_InitStructure.EXTI_Line = 1 << pin;
 80014c8:	9200      	str	r2, [sp, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80014ca:	2200      	movs	r2, #0
 80014cc:	710a      	strb	r2, [r1, #4]
	switch (trig)
 80014ce:	429e      	cmp	r6, r3
 80014d0:	d01e      	beq.n	8001510 <IO_EXTI_setup+0x80>
 80014d2:	4296      	cmp	r6, r2
 80014d4:	d018      	beq.n	8001508 <IO_EXTI_setup+0x78>
 80014d6:	2e02      	cmp	r6, #2
 80014d8:	d01c      	beq.n	8001514 <IO_EXTI_setup+0x84>
			break;
		case EXTITRIG_BOTH:
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
			break;
	}
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80014da:	466a      	mov	r2, sp
	EXTI_Init(&EXTI_InitStructure);
 80014dc:	4668      	mov	r0, sp
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80014de:	7193      	strb	r3, [r2, #6]
	EXTI_Init(&EXTI_InitStructure);
 80014e0:	f001 f81a 	bl	8002518 <EXTI_Init>
	IO_EXTI_int[pin] = cb;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <IO_EXTI_setup+0x88>)
 80014e6:	9a08      	ldr	r2, [sp, #32]
 80014e8:	00a4      	lsls	r4, r4, #2
	if ((pin >= 0) || (pin <= 1))
	{
		NVIC_add(EXTI0_1_IRQn);
 80014ea:	2005      	movs	r0, #5
	IO_EXTI_int[pin] = cb;
 80014ec:	50e2      	str	r2, [r4, r3]
		NVIC_add(EXTI0_1_IRQn);
 80014ee:	f000 f8c1 	bl	8001674 <NVIC_add>
	}
	else if ((pin >= 4) || (pin <= 15))
	{
		NVIC_add(EXTI4_15_IRQn);
	}
}
 80014f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			portSrc = EXTI_PortSourceGPIOC;
 80014f4:	2502      	movs	r5, #2
			break;
 80014f6:	e7d7      	b.n	80014a8 <IO_EXTI_setup+0x18>
			portSrc = EXTI_PortSourceGPIOD;
 80014f8:	2503      	movs	r5, #3
			break;
 80014fa:	e7d5      	b.n	80014a8 <IO_EXTI_setup+0x18>
			portSrc = EXTI_PortSourceGPIOE;
 80014fc:	2504      	movs	r5, #4
			break;
 80014fe:	e7d3      	b.n	80014a8 <IO_EXTI_setup+0x18>
			portSrc = EXTI_PortSourceGPIOF;
 8001500:	2505      	movs	r5, #5
			break;
 8001502:	e7d1      	b.n	80014a8 <IO_EXTI_setup+0x18>
			portSrc = EXTI_PortSourceGPIOA;
 8001504:	2500      	movs	r5, #0
 8001506:	e7cf      	b.n	80014a8 <IO_EXTI_setup+0x18>
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001508:	2208      	movs	r2, #8
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 800150a:	4669      	mov	r1, sp
 800150c:	714a      	strb	r2, [r1, #5]
			break;
 800150e:	e7e4      	b.n	80014da <IO_EXTI_setup+0x4a>
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8001510:	220c      	movs	r2, #12
 8001512:	e7fa      	b.n	800150a <IO_EXTI_setup+0x7a>
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8001514:	2210      	movs	r2, #16
 8001516:	e7f8      	b.n	800150a <IO_EXTI_setup+0x7a>
 8001518:	20000214 	.word	0x20000214

0800151c <IO_wrt>:
 * 			pin		|	IN	|	pin selection: 1->15
 * 			val		|	IN	|	1:high 0:low
 *
 -----------------------------------------------------------------------------------------*/
void IO_wrt(IO_PORT_t port, U8 pin, U8 val)
{
 800151c:	b510      	push	{r4, lr}
 800151e:	000b      	movs	r3, r1
	GPIO_TypeDef *portx;
	U16 pinx;

	switch (port)
 8001520:	2805      	cmp	r0, #5
 8001522:	d80a      	bhi.n	800153a <IO_wrt+0x1e>
 8001524:	f7fe fdf0 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001528:	0c0a0312 	.word	0x0c0a0312
 800152c:	100e      	.short	0x100e
	{
		case IOPORT_A: portx = GPIOA;
			break;
		case IOPORT_B: portx = GPIOB;
 800152e:	4809      	ldr	r0, [pc, #36]	; (8001554 <IO_wrt+0x38>)
		case IOPORT_F: portx = GPIOF;
			break;
		default:
			return;
	}
	pinx = 1 << pin;
 8001530:	2101      	movs	r1, #1
 8001532:	4099      	lsls	r1, r3
	GPIO_WriteBit(portx, pinx, val);
 8001534:	b289      	uxth	r1, r1
 8001536:	f001 f913 	bl	8002760 <GPIO_WriteBit>
}
 800153a:	bd10      	pop	{r4, pc}
		case IOPORT_C: portx = GPIOC;
 800153c:	4806      	ldr	r0, [pc, #24]	; (8001558 <IO_wrt+0x3c>)
			break;
 800153e:	e7f7      	b.n	8001530 <IO_wrt+0x14>
		case IOPORT_D: portx = GPIOD;
 8001540:	4806      	ldr	r0, [pc, #24]	; (800155c <IO_wrt+0x40>)
			break;
 8001542:	e7f5      	b.n	8001530 <IO_wrt+0x14>
		case IOPORT_E: portx = GPIOE;
 8001544:	4806      	ldr	r0, [pc, #24]	; (8001560 <IO_wrt+0x44>)
			break;
 8001546:	e7f3      	b.n	8001530 <IO_wrt+0x14>
		case IOPORT_F: portx = GPIOF;
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <IO_wrt+0x48>)
			break;
 800154a:	e7f1      	b.n	8001530 <IO_wrt+0x14>
		case IOPORT_A: portx = GPIOA;
 800154c:	2090      	movs	r0, #144	; 0x90
 800154e:	05c0      	lsls	r0, r0, #23
 8001550:	e7ee      	b.n	8001530 <IO_wrt+0x14>
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	48000400 	.word	0x48000400
 8001558:	48000800 	.word	0x48000800
 800155c:	48000c00 	.word	0x48000c00
 8001560:	48001000 	.word	0x48001000
 8001564:	48001400 	.word	0x48001400

08001568 <IO_rd>:
 * 			pin		|	IN	|	pin selection: 1->15
 * 			val		|	IN	|	1:high 0:low
 *
 -----------------------------------------------------------------------------------------*/
U8 IO_rd(IO_PORT_t port, U8 pin)
{
 8001568:	b510      	push	{r4, lr}
 800156a:	000a      	movs	r2, r1
		case IOPORT_E: portx = GPIOE;
			break;
		case IOPORT_F: portx = GPIOF;
			break;
		default:
			return 0;
 800156c:	2300      	movs	r3, #0
	switch (port)
 800156e:	2805      	cmp	r0, #5
 8001570:	d80b      	bhi.n	800158a <IO_rd+0x22>
 8001572:	f7fe fdc9 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001576:	0314      	.short	0x0314
 8001578:	12100e0c 	.word	0x12100e0c
		case IOPORT_B: portx = GPIOB;
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <IO_rd+0x3c>)
	}
	pinx = 1 << pin;
 800157e:	2101      	movs	r1, #1
 8001580:	4091      	lsls	r1, r2
	return GPIO_ReadInputDataBit(portx, pinx);
 8001582:	b289      	uxth	r1, r1
 8001584:	f001 f8e6 	bl	8002754 <GPIO_ReadInputDataBit>
 8001588:	0003      	movs	r3, r0
}
 800158a:	0018      	movs	r0, r3
 800158c:	bd10      	pop	{r4, pc}
		case IOPORT_C: portx = GPIOC;
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <IO_rd+0x40>)
			break;
 8001590:	e7f5      	b.n	800157e <IO_rd+0x16>
		case IOPORT_D: portx = GPIOD;
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <IO_rd+0x44>)
			break;
 8001594:	e7f3      	b.n	800157e <IO_rd+0x16>
		case IOPORT_E: portx = GPIOE;
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <IO_rd+0x48>)
			break;
 8001598:	e7f1      	b.n	800157e <IO_rd+0x16>
		case IOPORT_F: portx = GPIOF;
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <IO_rd+0x4c>)
			break;
 800159c:	e7ef      	b.n	800157e <IO_rd+0x16>
		case IOPORT_A: portx = GPIOA;
 800159e:	2090      	movs	r0, #144	; 0x90
 80015a0:	05c0      	lsls	r0, r0, #23
 80015a2:	e7ec      	b.n	800157e <IO_rd+0x16>
 80015a4:	48000400 	.word	0x48000400
 80015a8:	48000800 	.word	0x48000800
 80015ac:	48000c00 	.word	0x48000c00
 80015b0:	48001000 	.word	0x48001000
 80015b4:	48001400 	.word	0x48001400

080015b8 <EXTI0_1_IRQHandler>:
/*---------------------------------------------------------------------------------------
 * Brief: handle EXTI 0 interrupt
 *
 -----------------------------------------------------------------------------------------*/
void EXTI0_1_IRQHandler( void )
{
 80015b8:	b510      	push	{r4, lr}
	for (uint8_t i = 0; i <= 1; i++)
	{
		if (EXTI_GetITStatus(1 << i) != RESET)
 80015ba:	2001      	movs	r0, #1
 80015bc:	f000 ffde 	bl	800257c <EXTI_GetITStatus>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d006      	beq.n	80015d2 <EXTI0_1_IRQHandler+0x1a>
		{
			if (IO_EXTI_int[i] != NULL)
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <EXTI0_1_IRQHandler+0x40>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d111      	bne.n	80015f0 <EXTI0_1_IRQHandler+0x38>
			{
				IO_EXTI_int[i]();
			}
			EXTI_ClearITPendingBit(1 << i);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f000 ffdf 	bl	8002590 <EXTI_ClearITPendingBit>
		if (EXTI_GetITStatus(1 << i) != RESET)
 80015d2:	2002      	movs	r0, #2
 80015d4:	f000 ffd2 	bl	800257c <EXTI_GetITStatus>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d008      	beq.n	80015ee <EXTI0_1_IRQHandler+0x36>
			if (IO_EXTI_int[i] != NULL)
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <EXTI0_1_IRQHandler+0x40>)
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	2a00      	cmp	r2, #0
 80015e2:	d001      	beq.n	80015e8 <EXTI0_1_IRQHandler+0x30>
				IO_EXTI_int[i]();
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4798      	blx	r3
			EXTI_ClearITPendingBit(1 << i);
 80015e8:	2002      	movs	r0, #2
 80015ea:	f000 ffd1 	bl	8002590 <EXTI_ClearITPendingBit>
		}
	}
}
 80015ee:	bd10      	pop	{r4, pc}
				IO_EXTI_int[i]();
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4798      	blx	r3
 80015f4:	e7ea      	b.n	80015cc <EXTI0_1_IRQHandler+0x14>
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	20000214 	.word	0x20000214

080015fc <EXTI2_3_IRQHandler>:
/*---------------------------------------------------------------------------------------
 * Brief: handle EXTI 0 interrupt
 *
 -----------------------------------------------------------------------------------------*/
void EXTI2_3_IRQHandler( void )
{
 80015fc:	b510      	push	{r4, lr}
	for (uint8_t i = 2; i <= 3; i++)
	{
		if (EXTI_GetITStatus(1 << i) != RESET)
 80015fe:	2004      	movs	r0, #4
 8001600:	f000 ffbc 	bl	800257c <EXTI_GetITStatus>
 8001604:	2800      	cmp	r0, #0
 8001606:	d006      	beq.n	8001616 <EXTI2_3_IRQHandler+0x1a>
		{
			if (IO_EXTI_int[i] != NULL)
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <EXTI2_3_IRQHandler+0x40>)
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	2a00      	cmp	r2, #0
 800160e:	d111      	bne.n	8001634 <EXTI2_3_IRQHandler+0x38>
			{
				IO_EXTI_int[i]();
			}
			EXTI_ClearITPendingBit(1 << i);
 8001610:	2004      	movs	r0, #4
 8001612:	f000 ffbd 	bl	8002590 <EXTI_ClearITPendingBit>
		if (EXTI_GetITStatus(1 << i) != RESET)
 8001616:	2008      	movs	r0, #8
 8001618:	f000 ffb0 	bl	800257c <EXTI_GetITStatus>
 800161c:	2800      	cmp	r0, #0
 800161e:	d008      	beq.n	8001632 <EXTI2_3_IRQHandler+0x36>
			if (IO_EXTI_int[i] != NULL)
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <EXTI2_3_IRQHandler+0x40>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	2a00      	cmp	r2, #0
 8001626:	d001      	beq.n	800162c <EXTI2_3_IRQHandler+0x30>
				IO_EXTI_int[i]();
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	4798      	blx	r3
			EXTI_ClearITPendingBit(1 << i);
 800162c:	2008      	movs	r0, #8
 800162e:	f000 ffaf 	bl	8002590 <EXTI_ClearITPendingBit>
		}
	}
}
 8001632:	bd10      	pop	{r4, pc}
				IO_EXTI_int[i]();
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4798      	blx	r3
 8001638:	e7ea      	b.n	8001610 <EXTI2_3_IRQHandler+0x14>
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	20000214 	.word	0x20000214

08001640 <EXTI4_15_IRQHandler>:
/*---------------------------------------------------------------------------------------
 * Brief: handle EXTI 0 interrupt
 *
 -----------------------------------------------------------------------------------------*/
void EXTI4_15_IRQHandler( void )
{
 8001640:	b570      	push	{r4, r5, r6, lr}
 8001642:	2404      	movs	r4, #4
	for (uint8_t i = 4; i <= 15; i++)
	{
		if (EXTI_GetITStatus(1 << i) != RESET)
 8001644:	2601      	movs	r6, #1
 8001646:	0035      	movs	r5, r6
 8001648:	40a5      	lsls	r5, r4
 800164a:	0028      	movs	r0, r5
 800164c:	f000 ff96 	bl	800257c <EXTI_GetITStatus>
 8001650:	2800      	cmp	r0, #0
 8001652:	d009      	beq.n	8001668 <EXTI4_15_IRQHandler+0x28>
		{
			if (IO_EXTI_int[i] != NULL)
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <EXTI4_15_IRQHandler+0x30>)
 8001656:	00a2      	lsls	r2, r4, #2
 8001658:	58d1      	ldr	r1, [r2, r3]
 800165a:	2900      	cmp	r1, #0
 800165c:	d001      	beq.n	8001662 <EXTI4_15_IRQHandler+0x22>
			{
				IO_EXTI_int[i]();
 800165e:	58d3      	ldr	r3, [r2, r3]
 8001660:	4798      	blx	r3
			}
			EXTI_ClearITPendingBit(1 << i);
 8001662:	0028      	movs	r0, r5
 8001664:	f000 ff94 	bl	8002590 <EXTI_ClearITPendingBit>
 8001668:	3401      	adds	r4, #1
	for (uint8_t i = 4; i <= 15; i++)
 800166a:	2c10      	cmp	r4, #16
 800166c:	d1eb      	bne.n	8001646 <EXTI4_15_IRQHandler+0x6>
		}
	}
}
 800166e:	bd70      	pop	{r4, r5, r6, pc}
 8001670:	20000214 	.word	0x20000214

08001674 <NVIC_add>:
 * Brief:
 -----------------------------------------------------------------------------------------*/
void NVIC_add(IRQn_Type irq)
{
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001674:	2301      	movs	r3, #1
{
 8001676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NVIC_InitStruct.NVIC_IRQChannel = irq;
	NVIC_InitStruct.NVIC_IRQChannelPriority = NVIC_mngrlist_index;
 8001678:	4e14      	ldr	r6, [pc, #80]	; (80016cc <NVIC_add+0x58>)
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800167a:	ad01      	add	r5, sp, #4
 800167c:	70ab      	strb	r3, [r5, #2]
	NVIC_InitStruct.NVIC_IRQChannelPriority = NVIC_mngrlist_index;
 800167e:	7833      	ldrb	r3, [r6, #0]
	NVIC_InitStruct.NVIC_IRQChannel = irq;
 8001680:	7028      	strb	r0, [r5, #0]
{
 8001682:	0007      	movs	r7, r0
	NVIC_Init(&NVIC_InitStruct);
 8001684:	0028      	movs	r0, r5
	NVIC_InitStruct.NVIC_IRQChannelPriority = NVIC_mngrlist_index;
 8001686:	706b      	strb	r3, [r5, #1]
	NVIC_Init(&NVIC_InitStruct);
 8001688:	f001 f882 	bl	8002790 <NVIC_Init>
	if (NVIC_mngrlist_index < NVIC_MNGR_MAX)
 800168c:	7834      	ldrb	r4, [r6, #0]
 800168e:	4810      	ldr	r0, [pc, #64]	; (80016d0 <NVIC_add+0x5c>)
 8001690:	2300      	movs	r3, #0
	}
	else
	{
		for (U8 i = 0; i < NVIC_mngrlist_index; i++)
		{
			if (NVIC_mngrlist[i].NVIC_IRQChannel == irq)
 8001692:	2103      	movs	r1, #3
	if (NVIC_mngrlist_index < NVIC_MNGR_MAX)
 8001694:	2c0e      	cmp	r4, #14
 8001696:	d80d      	bhi.n	80016b4 <NVIC_add+0x40>
		NVIC_mngrlist[NVIC_mngrlist_index] = NVIC_InitStruct;
 8001698:	000b      	movs	r3, r1
 800169a:	4363      	muls	r3, r4
 800169c:	000a      	movs	r2, r1
 800169e:	18c0      	adds	r0, r0, r3
 80016a0:	0029      	movs	r1, r5
		NVIC_mngrlist_index++;
 80016a2:	3401      	adds	r4, #1
		NVIC_mngrlist[NVIC_mngrlist_index] = NVIC_InitStruct;
 80016a4:	f001 fff5 	bl	8003692 <memcpy>
		NVIC_mngrlist_index++;
 80016a8:	7034      	strb	r4, [r6, #0]
				NVIC_mngrlist[i] = NVIC_InitStruct;
				break;
			}
		}
	}
}
 80016aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80016ac:	3301      	adds	r3, #1
		for (U8 i = 0; i < NVIC_mngrlist_index; i++)
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4294      	cmp	r4, r2
 80016b2:	d9fa      	bls.n	80016aa <NVIC_add+0x36>
			if (NVIC_mngrlist[i].NVIC_IRQChannel == irq)
 80016b4:	000a      	movs	r2, r1
 80016b6:	435a      	muls	r2, r3
 80016b8:	5c86      	ldrb	r6, [r0, r2]
 80016ba:	42be      	cmp	r6, r7
 80016bc:	d1f6      	bne.n	80016ac <NVIC_add+0x38>
				NVIC_mngrlist[i] = NVIC_InitStruct;
 80016be:	1880      	adds	r0, r0, r2
 80016c0:	0029      	movs	r1, r5
 80016c2:	2203      	movs	r2, #3
 80016c4:	f001 ffe5 	bl	8003692 <memcpy>
				break;
 80016c8:	e7ef      	b.n	80016aa <NVIC_add+0x36>
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	2000027d 	.word	0x2000027d
 80016d0:	20000250 	.word	0x20000250

080016d4 <NVIC_rmv>:
/*----------------------------------------------------------------------------------------
 * Brief:
 -----------------------------------------------------------------------------------------*/
void NVIC_rmv(IRQn_Type irq)
{
 80016d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannelCmd = DISABLE;
 80016d6:	2400      	movs	r4, #0
{
 80016d8:	0005      	movs	r5, r0
	NVIC_InitStruct.NVIC_IRQChannelCmd = DISABLE;
 80016da:	a801      	add	r0, sp, #4
 80016dc:	7084      	strb	r4, [r0, #2]
	NVIC_InitStruct.NVIC_IRQChannel = irq;
 80016de:	7005      	strb	r5, [r0, #0]
	NVIC_Init(&NVIC_InitStruct);
 80016e0:	f001 f856 	bl	8002790 <NVIC_Init>
	for (U8 i = 0; i < NVIC_mngrlist_index; i++)
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <NVIC_rmv+0x3c>)
	{
		if (NVIC_mngrlist[i].NVIC_IRQChannel == irq)
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <NVIC_rmv+0x40>)
	for (U8 i = 0; i < NVIC_mngrlist_index; i++)
 80016e8:	7819      	ldrb	r1, [r3, #0]
 80016ea:	0023      	movs	r3, r4
		if (NVIC_mngrlist[i].NVIC_IRQChannel == irq)
 80016ec:	3403      	adds	r4, #3
	for (U8 i = 0; i < NVIC_mngrlist_index; i++)
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4291      	cmp	r1, r2
 80016f2:	d909      	bls.n	8001708 <NVIC_rmv+0x34>
 80016f4:	1c5a      	adds	r2, r3, #1
		if (NVIC_mngrlist[i].NVIC_IRQChannel == irq)
 80016f6:	4363      	muls	r3, r4
 80016f8:	5c1e      	ldrb	r6, [r3, r0]
 80016fa:	42ae      	cmp	r6, r5
 80016fc:	d105      	bne.n	800170a <NVIC_rmv+0x36>
		{
			memset(&NVIC_mngrlist[i], 0, sizeof(NVIC_InitTypeDef));
 80016fe:	18c0      	adds	r0, r0, r3
 8001700:	2203      	movs	r2, #3
 8001702:	2100      	movs	r1, #0
 8001704:	f001 ffce 	bl	80036a4 <memset>
			break;
		}
	}
}
 8001708:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800170a:	0013      	movs	r3, r2
 800170c:	e7ef      	b.n	80016ee <NVIC_rmv+0x1a>
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	2000027d 	.word	0x2000027d
 8001714:	20000250 	.word	0x20000250

08001718 <SPI_setup>:
{
	SPI_InitTypeDef SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	uint8_t dumpRead;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001718:	2080      	movs	r0, #128	; 0x80
{
 800171a:	b5f0      	push	{r4, r5, r6, r7, lr}
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800171c:	0140      	lsls	r0, r0, #5
{
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	000d      	movs	r5, r1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001722:	2101      	movs	r1, #1
{
 8001724:	001c      	movs	r4, r3
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001726:	f001 f96b 	bl	8002a00 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800172a:	2080      	movs	r0, #128	; 0x80
	//SPI_I2S_DeInit(SPI1);
	/* Configure SPI pins: SCK and MOSI with default alternate function (not re-mapped) push-pull */
	GPIO_StructInit(&GPIO_InitStructure);
 800172c:	af01      	add	r7, sp, #4
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800172e:	2101      	movs	r1, #1
 8001730:	0280      	lsls	r0, r0, #10
 8001732:	f001 f959 	bl	80029e8 <RCC_AHBPeriphClockCmd>
	GPIO_StructInit(&GPIO_InitStructure);
 8001736:	0038      	movs	r0, r7
 8001738:	f001 f800 	bl	800273c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800173c:	2602      	movs	r6, #2
	GPIO_InitStructure.GPIO_Pin = SPI1_CLK_PIN;
 800173e:	2308      	movs	r3, #8
	GPIO_Init(SPI1_CLK_PORT, &GPIO_InitStructure);
 8001740:	0039      	movs	r1, r7
 8001742:	482d      	ldr	r0, [pc, #180]	; (80017f8 <SPI_setup+0xe0>)
	GPIO_InitStructure.GPIO_Pin = SPI1_CLK_PIN;
 8001744:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001746:	713e      	strb	r6, [r7, #4]
	GPIO_Init(SPI1_CLK_PORT, &GPIO_InitStructure);
 8001748:	f000 ffbc 	bl	80026c4 <GPIO_Init>
	GPIO_PinAFConfig(SPI1_CLK_PORT, SPI1_CLK_PIN_SRC, GPIO_AF_0);
 800174c:	2200      	movs	r2, #0
 800174e:	2103      	movs	r1, #3
 8001750:	4829      	ldr	r0, [pc, #164]	; (80017f8 <SPI_setup+0xe0>)
 8001752:	f001 f80b 	bl	800276c <GPIO_PinAFConfig>
	GPIO_InitStructure.GPIO_Pin = SPI1_MOSI_PIN;
 8001756:	2320      	movs	r3, #32
	GPIO_Init(SPI1_MOSI_PORT, &GPIO_InitStructure);
 8001758:	0039      	movs	r1, r7
 800175a:	4827      	ldr	r0, [pc, #156]	; (80017f8 <SPI_setup+0xe0>)
	GPIO_InitStructure.GPIO_Pin = SPI1_MOSI_PIN;
 800175c:	9301      	str	r3, [sp, #4]
	GPIO_Init(SPI1_MOSI_PORT, &GPIO_InitStructure);
 800175e:	f000 ffb1 	bl	80026c4 <GPIO_Init>
	GPIO_PinAFConfig(SPI1_MOSI_PORT, SPI1_MOSI_PIN_SRC, GPIO_AF_0);
 8001762:	2200      	movs	r2, #0
 8001764:	2105      	movs	r1, #5
 8001766:	4824      	ldr	r0, [pc, #144]	; (80017f8 <SPI_setup+0xe0>)
 8001768:	f001 f800 	bl	800276c <GPIO_PinAFConfig>
	GPIO_InitStructure.GPIO_Pin = SPI1_MISO_PIN;
 800176c:	2310      	movs	r3, #16
	GPIO_Init(SPI1_MISO_PORT, &GPIO_InitStructure);
 800176e:	0039      	movs	r1, r7
 8001770:	4821      	ldr	r0, [pc, #132]	; (80017f8 <SPI_setup+0xe0>)
	GPIO_InitStructure.GPIO_Pin = SPI1_MISO_PIN;
 8001772:	9301      	str	r3, [sp, #4]
	GPIO_Init(SPI1_MISO_PORT, &GPIO_InitStructure);
 8001774:	f000 ffa6 	bl	80026c4 <GPIO_Init>
	GPIO_PinAFConfig(SPI1_MISO_PORT, SPI1_MISO_PIN_SRC, GPIO_AF_0);
 8001778:	2200      	movs	r2, #0
 800177a:	2104      	movs	r1, #4
 800177c:	481e      	ldr	r0, [pc, #120]	; (80017f8 <SPI_setup+0xe0>)
 800177e:	f000 fff5 	bl	800276c <GPIO_PinAFConfig>

	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001782:	2282      	movs	r2, #130	; 0x82
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001784:	a903      	add	r1, sp, #12
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001786:	0052      	lsls	r2, r2, #1
 8001788:	804a      	strh	r2, [r1, #2]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800178a:	22e0      	movs	r2, #224	; 0xe0
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800178c:	2300      	movs	r3, #0
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800178e:	00d2      	lsls	r2, r2, #3
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001790:	800b      	strh	r3, [r1, #0]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001792:	808a      	strh	r2, [r1, #4]
	switch (mode)
 8001794:	2d01      	cmp	r5, #1
 8001796:	d12b      	bne.n	80017f0 <SPI_setup+0xd8>
	{
		case SPI_MODE_3:
			SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 8001798:	80ce      	strh	r6, [r1, #6]
			SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 800179a:	810d      	strh	r5, [r1, #8]
		default: // Mode 0
			SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
			SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
			break;
	}
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	814b      	strh	r3, [r1, #10]
	{
		case SPI_SPEED_MAX:
			SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
			break;
		case SPI_SPEED_HIGH:
			SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80017a2:	2310      	movs	r3, #16
	switch (speed)
 80017a4:	2c01      	cmp	r4, #1
 80017a6:	d003      	beq.n	80017b0 <SPI_setup+0x98>
			SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80017a8:	2300      	movs	r3, #0
	switch (speed)
 80017aa:	2c02      	cmp	r4, #2
 80017ac:	d000      	beq.n	80017b0 <SPI_setup+0x98>
			break;
		default: // Default is always lowest speed.
			SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
 80017ae:	2338      	movs	r3, #56	; 0x38
 80017b0:	818b      	strh	r3, [r1, #12]
			break;
	}
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80017b2:	2400      	movs	r4, #0
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80017b4:	2307      	movs	r3, #7

	SPI_Init(SPI1, &SPI_InitStructure);
 80017b6:	4811      	ldr	r0, [pc, #68]	; (80017fc <SPI_setup+0xe4>)
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80017b8:	820b      	strh	r3, [r1, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80017ba:	81cc      	strh	r4, [r1, #14]
	SPI_Init(SPI1, &SPI_InitStructure);
 80017bc:	f001 f950 	bl	8002a60 <SPI_Init>
	SPI_CalculateCRC(SPI1, DISABLE);
 80017c0:	0021      	movs	r1, r4
 80017c2:	480e      	ldr	r0, [pc, #56]	; (80017fc <SPI_setup+0xe4>)
 80017c4:	f001 f990 	bl	8002ae8 <SPI_CalculateCRC>
	SPI_RxFIFOThresholdConfig(SPI1, SPI_RxFIFOThreshold_QF); // RNXE flag can be turned on when 1 byte got
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <SPI_setup+0xe4>)
 80017cc:	0149      	lsls	r1, r1, #5
 80017ce:	f001 f97b 	bl	8002ac8 <SPI_RxFIFOThresholdConfig>
	SPI_Cmd(SPI1, ENABLE);
 80017d2:	2101      	movs	r1, #1
 80017d4:	4809      	ldr	r0, [pc, #36]	; (80017fc <SPI_setup+0xe4>)
 80017d6:	f001 f96d 	bl	8002ab4 <SPI_Cmd>

	/* drain SPI */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 80017da:	2102      	movs	r1, #2
 80017dc:	4807      	ldr	r0, [pc, #28]	; (80017fc <SPI_setup+0xe4>)
 80017de:	f001 f991 	bl	8002b04 <SPI_I2S_GetFlagStatus>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d0f9      	beq.n	80017da <SPI_setup+0xc2>
	dumpRead = SPI_ReceiveData8(SPI1);
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <SPI_setup+0xe4>)
 80017e8:	f001 f97a 	bl	8002ae0 <SPI_ReceiveData8>
}
 80017ec:	b009      	add	sp, #36	; 0x24
 80017ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80017f0:	80cb      	strh	r3, [r1, #6]
			SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80017f2:	810b      	strh	r3, [r1, #8]
			break;
 80017f4:	e7d2      	b.n	800179c <SPI_setup+0x84>
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	48000400 	.word	0x48000400
 80017fc:	40013000 	.word	0x40013000

08001800 <SPI_stopClkSrc>:
/*------------------------------------------------------------------------------
 * brief:
 -------------------------------------------------------------------------------*/
void SPI_stopClkSrc(uint8_t port)
{
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001800:	2080      	movs	r0, #128	; 0x80
{
 8001802:	b510      	push	{r4, lr}
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001804:	2100      	movs	r1, #0
 8001806:	0140      	lsls	r0, r0, #5
 8001808:	f001 f8fa 	bl	8002a00 <RCC_APB2PeriphClockCmd>
}
 800180c:	bd10      	pop	{r4, pc}

0800180e <SPI_runClkSrc>:
/*------------------------------------------------------------------------------
 * brief:
 -------------------------------------------------------------------------------*/
void SPI_runClkSrc(uint8_t port)
{
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800180e:	2080      	movs	r0, #128	; 0x80
{
 8001810:	b510      	push	{r4, lr}
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001812:	2101      	movs	r1, #1
 8001814:	0140      	lsls	r0, r0, #5
 8001816:	f001 f8f3 	bl	8002a00 <RCC_APB2PeriphClockCmd>
}
 800181a:	bd10      	pop	{r4, pc}

0800181c <SPI_wr1Byte>:
/*------------------------------------------------------------------------------
 * brief:
 -------------------------------------------------------------------------------*/
uint8_t SPI_wr1Byte(uint8_t port, uint8_t wByte)
{
 800181c:	b510      	push	{r4, lr}
	SPI_SendData8(SPI1, wByte);
 800181e:	4809      	ldr	r0, [pc, #36]	; (8001844 <SPI_wr1Byte+0x28>)
 8001820:	f001 f95c 	bl	8002adc <SPI_SendData8>
	/* Wait until sent a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 8001824:	2102      	movs	r1, #2
 8001826:	4807      	ldr	r0, [pc, #28]	; (8001844 <SPI_wr1Byte+0x28>)
 8001828:	f001 f96c 	bl	8002b04 <SPI_I2S_GetFlagStatus>
 800182c:	2800      	cmp	r0, #0
 800182e:	d0f9      	beq.n	8001824 <SPI_wr1Byte+0x8>
	/* Wait until received a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 8001830:	2101      	movs	r1, #1
 8001832:	4804      	ldr	r0, [pc, #16]	; (8001844 <SPI_wr1Byte+0x28>)
 8001834:	f001 f966 	bl	8002b04 <SPI_I2S_GetFlagStatus>
 8001838:	2800      	cmp	r0, #0
 800183a:	d0f9      	beq.n	8001830 <SPI_wr1Byte+0x14>
	/* Return the byte read from the SPI bus */
	return SPI_ReceiveData8(SPI1);
 800183c:	4801      	ldr	r0, [pc, #4]	; (8001844 <SPI_wr1Byte+0x28>)
 800183e:	f001 f94f 	bl	8002ae0 <SPI_ReceiveData8>
}
 8001842:	bd10      	pop	{r4, pc}
 8001844:	40013000 	.word	0x40013000

08001848 <TIM_setup>:
 * Param:	tim		|	IN	|	timer selection. Only support timer 2 now.
 * 			freq	|	IN	|	frequency selection.
 * 			tickCB	|	IN	|	tick handler callback.
 -----------------------------------------------------------------------------------------*/
void TIM_setup(uint8_t tim, TIM_FREQ_t freq, TIM_tick_CB tickCB)
{
 8001848:	b5f0      	push	{r4, r5, r6, r7, lr}
	TIM_TypeDef *TIMx;
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	uint8_t TIMx_IRQn;

	RCC_GetClocksFreq(&RCC_Clocks);
 800184a:	4d3e      	ldr	r5, [pc, #248]	; (8001944 <TIM_setup+0xfc>)
{
 800184c:	b087      	sub	sp, #28
 800184e:	0004      	movs	r4, r0
	RCC_GetClocksFreq(&RCC_Clocks);
 8001850:	0028      	movs	r0, r5
{
 8001852:	9101      	str	r1, [sp, #4]
 8001854:	0017      	movs	r7, r2
	RCC_GetClocksFreq(&RCC_Clocks);
 8001856:	f001 f805 	bl	8002864 <RCC_GetClocksFreq>
	switch (tim)
 800185a:	2c01      	cmp	r4, #1
 800185c:	d003      	beq.n	8001866 <TIM_setup+0x1e>
 800185e:	2c03      	cmp	r4, #3
 8001860:	d01a      	beq.n	8001898 <TIM_setup+0x50>
	else
	{
		NVIC_rmv(TIMx_IRQn);
	}
	TIM_Cmd(TIMx, ENABLE);
}
 8001862:	b007      	add	sp, #28
 8001864:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001866:	2080      	movs	r0, #128	; 0x80
 8001868:	0021      	movs	r1, r4
 800186a:	0100      	lsls	r0, r0, #4
 800186c:	f001 f8c8 	bl	8002a00 <RCC_APB2PeriphClockCmd>
			TIM1_tick = tickCB;
 8001870:	4b35      	ldr	r3, [pc, #212]	; (8001948 <TIM_setup+0x100>)
			TIMx = TIM1;
 8001872:	4e36      	ldr	r6, [pc, #216]	; (800194c <TIM_setup+0x104>)
			TIM1_tick = tickCB;
 8001874:	601f      	str	r7, [r3, #0]
			TIMx_IRQn = TIM1_BRK_UP_TRG_COM_IRQn;
 8001876:	230d      	movs	r3, #13
 8001878:	9300      	str	r3, [sp, #0]
	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 800187a:	ac03      	add	r4, sp, #12
 800187c:	0020      	movs	r0, r4
 800187e:	f001 f997 	bl	8002bb0 <TIM_TimeBaseStructInit>
	switch (freq)
 8001882:	9b01      	ldr	r3, [sp, #4]
 8001884:	2b08      	cmp	r3, #8
 8001886:	d8ec      	bhi.n	8001862 <TIM_setup+0x1a>
 8001888:	0018      	movs	r0, r3
 800188a:	f7fe fc3d 	bl	8000108 <__gnu_thumb1_case_uqi>
 800188e:	350f      	.short	0x350f
 8001890:	4f4c453d 	.word	0x4f4c453d
 8001894:	5351      	.short	0x5351
 8001896:	55          	.byte	0x55
 8001897:	00          	.byte	0x00
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001898:	2101      	movs	r1, #1
 800189a:	2002      	movs	r0, #2
 800189c:	f001 f8bc 	bl	8002a18 <RCC_APB1PeriphClockCmd>
			TIM3_tick = tickCB;
 80018a0:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <TIM_setup+0x108>)
			TIMx = TIM3;
 80018a2:	4e2c      	ldr	r6, [pc, #176]	; (8001954 <TIM_setup+0x10c>)
			TIM3_tick = tickCB;
 80018a4:	601f      	str	r7, [r3, #0]
			TIMx_IRQn = TIM3_IRQn;
 80018a6:	2310      	movs	r3, #16
 80018a8:	9300      	str	r3, [sp, #0]
			break;
 80018aa:	e7e6      	b.n	800187a <TIM_setup+0x32>
			TIM_TimeBaseStructure.TIM_Period = 1000 + 1;
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <TIM_setup+0x110>)
			TIM_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency / 1000000) * 1000;
 80018ae:	6828      	ldr	r0, [r5, #0]
			TIM_TimeBaseStructure.TIM_Period = 1000 + 1;
 80018b0:	6063      	str	r3, [r4, #4]
			TIM_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency / 1000000) * 1000;
 80018b2:	492a      	ldr	r1, [pc, #168]	; (800195c <TIM_setup+0x114>)
 80018b4:	f7fe fc3c 	bl	8000130 <__udivsi3>
 80018b8:	23fa      	movs	r3, #250	; 0xfa
 80018ba:	009b      	lsls	r3, r3, #2
			TIM_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency / 1000000) * 10;
 80018bc:	4358      	muls	r0, r3
			TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	8123      	strh	r3, [r4, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80018c2:	2300      	movs	r3, #0
			TIM_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency / 1000000) * 1;
 80018c4:	8020      	strh	r0, [r4, #0]
	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
 80018c6:	0021      	movs	r1, r4
 80018c8:	0030      	movs	r0, r6
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80018ca:	8063      	strh	r3, [r4, #2]
	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
 80018cc:	f001 f934 	bl	8002b38 <TIM_TimeBaseInit>
	TIM_ITConfig(TIMx, TIM_IT_Update, (tickCB != NULL) ? ENABLE : DISABLE);
 80018d0:	003a      	movs	r2, r7
 80018d2:	1e53      	subs	r3, r2, #1
 80018d4:	419a      	sbcs	r2, r3
 80018d6:	0030      	movs	r0, r6
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	2101      	movs	r1, #1
 80018dc:	f001 f997 	bl	8002c0e <TIM_ITConfig>
 80018e0:	466b      	mov	r3, sp
 80018e2:	2000      	movs	r0, #0
 80018e4:	5618      	ldrsb	r0, [r3, r0]
	if (tickCB != NULL)
 80018e6:	2f00      	cmp	r7, #0
 80018e8:	d028      	beq.n	800193c <TIM_setup+0xf4>
		NVIC_add(TIMx_IRQn);
 80018ea:	f7ff fec3 	bl	8001674 <NVIC_add>
	TIM_Cmd(TIMx, ENABLE);
 80018ee:	2101      	movs	r1, #1
 80018f0:	0030      	movs	r0, r6
 80018f2:	f001 f96a 	bl	8002bca <TIM_Cmd>
 80018f6:	e7b4      	b.n	8001862 <TIM_setup+0x1a>
			TIM_TimeBaseStructure.TIM_Period = 1000 + 1;
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <TIM_setup+0x110>)
			TIM_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency / 1000000) * 100;
 80018fa:	6828      	ldr	r0, [r5, #0]
			TIM_TimeBaseStructure.TIM_Period = 1000 + 1;
 80018fc:	6063      	str	r3, [r4, #4]
			TIM_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency / 1000000) * 100;
 80018fe:	4917      	ldr	r1, [pc, #92]	; (800195c <TIM_setup+0x114>)
 8001900:	f7fe fc16 	bl	8000130 <__udivsi3>
 8001904:	2364      	movs	r3, #100	; 0x64
 8001906:	e7d9      	b.n	80018bc <TIM_setup+0x74>
			TIM_TimeBaseStructure.TIM_Period = 1000 + 1;
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <TIM_setup+0x110>)
			TIM_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency / 1000000) * 10;
 800190a:	6828      	ldr	r0, [r5, #0]
			TIM_TimeBaseStructure.TIM_Period = 1000 + 1;
 800190c:	6063      	str	r3, [r4, #4]
			TIM_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency / 1000000) * 10;
 800190e:	4913      	ldr	r1, [pc, #76]	; (800195c <TIM_setup+0x114>)
 8001910:	f7fe fc0e 	bl	8000130 <__udivsi3>
 8001914:	230a      	movs	r3, #10
 8001916:	e7d1      	b.n	80018bc <TIM_setup+0x74>
			TIM_TimeBaseStructure.TIM_Period = 1000 + 1;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <TIM_setup+0x110>)
			TIM_TimeBaseStructure.TIM_Period = 1 + 1;
 800191a:	6063      	str	r3, [r4, #4]
			TIM_TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency / 1000000) * 1;
 800191c:	6828      	ldr	r0, [r5, #0]
 800191e:	490f      	ldr	r1, [pc, #60]	; (800195c <TIM_setup+0x114>)
 8001920:	f7fe fc06 	bl	8000130 <__udivsi3>
 8001924:	e7cb      	b.n	80018be <TIM_setup+0x76>
			TIM_TimeBaseStructure.TIM_Period = 500 + 1;
 8001926:	23f6      	movs	r3, #246	; 0xf6
 8001928:	33ff      	adds	r3, #255	; 0xff
 800192a:	e7f6      	b.n	800191a <TIM_setup+0xd2>
			TIM_TimeBaseStructure.TIM_Period = 100 + 1;
 800192c:	2365      	movs	r3, #101	; 0x65
 800192e:	e7f4      	b.n	800191a <TIM_setup+0xd2>
			TIM_TimeBaseStructure.TIM_Period = 20 + 1;
 8001930:	2315      	movs	r3, #21
 8001932:	e7f2      	b.n	800191a <TIM_setup+0xd2>
			TIM_TimeBaseStructure.TIM_Period = 10 + 1;
 8001934:	230b      	movs	r3, #11
 8001936:	e7f0      	b.n	800191a <TIM_setup+0xd2>
			TIM_TimeBaseStructure.TIM_Period = 1 + 1;
 8001938:	2302      	movs	r3, #2
 800193a:	e7ee      	b.n	800191a <TIM_setup+0xd2>
		NVIC_rmv(TIMx_IRQn);
 800193c:	f7ff feca 	bl	80016d4 <NVIC_rmv>
 8001940:	e7d5      	b.n	80018ee <TIM_setup+0xa6>
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	20000280 	.word	0x20000280
 8001948:	200002a8 	.word	0x200002a8
 800194c:	40012c00 	.word	0x40012c00
 8001950:	200002ac 	.word	0x200002ac
 8001954:	40000400 	.word	0x40000400
 8001958:	000003e9 	.word	0x000003e9
 800195c:	000f4240 	.word	0x000f4240

08001960 <TIM_getCt>:
#endif // #ifdef ENABLE_IC
/*----------------------------------------------------------------------------------------
 * Brief:	get counter
 -----------------------------------------------------------------------------------------*/
uint32_t TIM_getCt(uint8_t tim)
{
 8001960:	b510      	push	{r4, lr}
	TIM_TypeDef *TIMx;

	switch (tim)
 8001962:	2801      	cmp	r0, #1
 8001964:	d005      	beq.n	8001972 <TIM_getCt+0x12>
 8001966:	2803      	cmp	r0, #3
 8001968:	d105      	bne.n	8001976 <TIM_getCt+0x16>
		case 2:
			TIMx = TIM2;
			break;
#endif
		case 3:
			TIMx = TIM3;
 800196a:	4804      	ldr	r0, [pc, #16]	; (800197c <TIM_getCt+0x1c>)
			break;
		default:
			return 0;
	}
	return TIM_GetCounter(TIMx);
 800196c:	f001 f92b 	bl	8002bc6 <TIM_GetCounter>
}
 8001970:	bd10      	pop	{r4, pc}
			TIMx = TIM1;
 8001972:	4803      	ldr	r0, [pc, #12]	; (8001980 <TIM_getCt+0x20>)
 8001974:	e7fa      	b.n	800196c <TIM_getCt+0xc>
			return 0;
 8001976:	2000      	movs	r0, #0
 8001978:	e7fa      	b.n	8001970 <TIM_getCt+0x10>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	40000400 	.word	0x40000400
 8001980:	40012c00 	.word	0x40012c00

08001984 <TIM_setCt>:
/*----------------------------------------------------------------------------------------
 * Brief:	set counter
 -----------------------------------------------------------------------------------------*/
void TIM_setCt(uint8_t tim, uint32_t ct)
{
 8001984:	b510      	push	{r4, lr}
	TIM_TypeDef *TIMx;

	switch (tim)
 8001986:	2801      	cmp	r0, #1
 8001988:	d005      	beq.n	8001996 <TIM_setCt+0x12>
 800198a:	2803      	cmp	r0, #3
 800198c:	d102      	bne.n	8001994 <TIM_setCt+0x10>
		case 2:
			TIMx = TIM2;
			break;
#endif
		case 3:
			TIMx = TIM3;
 800198e:	4803      	ldr	r0, [pc, #12]	; (800199c <TIM_setCt+0x18>)
			break;
		default:
			return;
	}
	TIM_SetCounter(TIMx, ct);
 8001990:	f001 f917 	bl	8002bc2 <TIM_SetCounter>
}
 8001994:	bd10      	pop	{r4, pc}
			TIMx = TIM1;
 8001996:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM_setCt+0x1c>)
 8001998:	e7fa      	b.n	8001990 <TIM_setCt+0xc>
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	40000400 	.word	0x40000400
 80019a0:	40012c00 	.word	0x40012c00

080019a4 <TIM3_IRQHandler>:
}
/*----------------------------------------------------------------------------------------
 * Brief:	Timer 3 interrupt handler.
 -----------------------------------------------------------------------------------------*/
void TIM3_IRQHandler(void)
{
 80019a4:	b510      	push	{r4, lr}
	RTOS_enterIRQ();
 80019a6:	f000 f8c5 	bl	8001b34 <RTOS_enterIRQ>
		TIM3_CH2_IC_startTime = TIM3_CH2_IC_endTime;
		TIM3CH2_IC_OFct = 0;
	}
	else
#endif // #ifdef ENABLE_IC
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)
 80019aa:	2101      	movs	r1, #1
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <TIM3_IRQHandler+0x2c>)
 80019ae:	f001 f916 	bl	8002bde <TIM_GetITStatus>
 80019b2:	0001      	movs	r1, r0
 80019b4:	2801      	cmp	r0, #1
 80019b6:	d108      	bne.n	80019ca <TIM3_IRQHandler+0x26>
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <TIM3_IRQHandler+0x2c>)
 80019ba:	f001 f91b 	bl	8002bf4 <TIM_ClearITPendingBit>
#ifdef ENABLE_IC
		TIM3CH2_IC_OFct++;
#endif // #ifdef ENABLE_IC
		if (TIM3_tick != (void*)0)
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <TIM3_IRQHandler+0x30>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2a00      	cmp	r2, #0
 80019c4:	d001      	beq.n	80019ca <TIM3_IRQHandler+0x26>
		{
			TIM3_tick();
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4798      	blx	r3
		}
	}
	RTOS_exitIRQ();
 80019ca:	f000 f8b4 	bl	8001b36 <RTOS_exitIRQ>
}
 80019ce:	bd10      	pop	{r4, pc}
 80019d0:	40000400 	.word	0x40000400
 80019d4:	200002ac 	.word	0x200002ac

080019d8 <UART_readc_pseudo>:
 * Brief: Pseudo read character callback
 -----------------------------------------------------------------------------------------*/
void UART_readc_pseudo(uint8_t c)
{
	return;
}
 80019d8:	4770      	bx	lr
	...

080019dc <UART_setup>:
 * 			remap	|	IN	|	remap
 * 			br		|	IN	|	baud rate.
 *			readcCB	|	IN	|	callback function to handle reading data from RX interrupt.
 -----------------------------------------------------------------------------------------*/
void UART_setup(uint8_t port, uint8_t remap, uint32_t br, UART_readc_CB readcCB)
{
 80019dc:	b530      	push	{r4, r5, lr}
 80019de:	0001      	movs	r1, r0
 80019e0:	b089      	sub	sp, #36	; 0x24
 80019e2:	0015      	movs	r5, r2
 80019e4:	001c      	movs	r4, r3
	GPIO_TypeDef *TxPort, *RxPort;
	uint8_t IRQchannel, GPIO_AF_x;
	USART_InitTypeDef USART_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	switch (port)
 80019e6:	2801      	cmp	r0, #1
 80019e8:	d154      	bne.n	8001a94 <UART_setup+0xb8>
	{
		case 1:
			RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80019ea:	2080      	movs	r0, #128	; 0x80
 80019ec:	01c0      	lsls	r0, r0, #7
 80019ee:	f001 f807 	bl	8002a00 <RCC_APB2PeriphClockCmd>
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <UART_setup+0xc8>)
			RxPin = UART1_RX_PIN;
			RxPinSource = UART1_RX_PINSRC;
			RxPort = UART1_RX_PORT;
			GPIO_AF_x = GPIO_AF_1;
			IRQchannel = USART1_IRQn;
			if (readcCB != NULL)
 80019f4:	2c00      	cmp	r4, #0
 80019f6:	d04f      	beq.n	8001a98 <UART_setup+0xbc>
			{
				UART1_readc = readcCB;
 80019f8:	601c      	str	r4, [r3, #0]
			break;
#endif
		default:
			return;
	}
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA//
 80019fa:	20fc      	movs	r0, #252	; 0xfc
 80019fc:	2101      	movs	r1, #1
 80019fe:	03c0      	lsls	r0, r0, #15
 8001a00:	f000 fff2 	bl	80029e8 <RCC_AHBPeriphClockCmd>
							| RCC_AHBPeriph_GPIOC//
							| RCC_AHBPeriph_GPIOD//
							| RCC_AHBPeriph_GPIOE//
							| RCC_AHBPeriph_GPIOF//
							, ENABLE);
	GPIO_StructInit(&GPIO_InitStruct);
 8001a04:	4668      	mov	r0, sp
 8001a06:	f000 fe99 	bl	800273c <GPIO_StructInit>
	GPIO_InitStruct.GPIO_Pin = TxPin;
 8001a0a:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(TxPort, &GPIO_InitStruct);
 8001a0c:	2090      	movs	r0, #144	; 0x90
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001a0e:	466a      	mov	r2, sp
	GPIO_InitStruct.GPIO_Pin = TxPin;
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001a14:	3bff      	subs	r3, #255	; 0xff
 8001a16:	3bff      	subs	r3, #255	; 0xff
	GPIO_Init(TxPort, &GPIO_InitStruct);
 8001a18:	4669      	mov	r1, sp
 8001a1a:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001a1c:	7113      	strb	r3, [r2, #4]
	GPIO_Init(TxPort, &GPIO_InitStruct);
 8001a1e:	f000 fe51 	bl	80026c4 <GPIO_Init>
	GPIO_PinAFConfig(TxPort, TxPinSource, GPIO_AF_x);//PA9:USART1_TX
 8001a22:	2090      	movs	r0, #144	; 0x90
 8001a24:	2201      	movs	r2, #1
 8001a26:	2109      	movs	r1, #9
 8001a28:	05c0      	lsls	r0, r0, #23
 8001a2a:	f000 fe9f 	bl	800276c <GPIO_PinAFConfig>
	if (readcCB != NULL)
 8001a2e:	2c00      	cmp	r4, #0
 8001a30:	d00d      	beq.n	8001a4e <UART_setup+0x72>
	{
		GPIO_InitStruct.GPIO_Pin = RxPin;
 8001a32:	2380      	movs	r3, #128	; 0x80
		GPIO_Init(RxPort, &GPIO_InitStruct);
 8001a34:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.GPIO_Pin = RxPin;
 8001a36:	00db      	lsls	r3, r3, #3
		GPIO_Init(RxPort, &GPIO_InitStruct);
 8001a38:	4669      	mov	r1, sp
 8001a3a:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.GPIO_Pin = RxPin;
 8001a3c:	9300      	str	r3, [sp, #0]
		GPIO_Init(RxPort, &GPIO_InitStruct);
 8001a3e:	f000 fe41 	bl	80026c4 <GPIO_Init>
		GPIO_PinAFConfig(RxPort, RxPinSource, GPIO_AF_x);//PA10:USART1_TX
 8001a42:	2090      	movs	r0, #144	; 0x90
 8001a44:	2201      	movs	r2, #1
 8001a46:	210a      	movs	r1, #10
 8001a48:	05c0      	lsls	r0, r0, #23
 8001a4a:	f000 fe8f 	bl	800276c <GPIO_PinAFConfig>
	}
	USART_InitStruct.USART_BaudRate = br;
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001a4e:	2300      	movs	r3, #0
	USART_InitStruct.USART_BaudRate = br;
 8001a50:	9502      	str	r5, [sp, #8]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001a52:	9307      	str	r3, [sp, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | ((readcCB != NULL) ? USART_Mode_Rx : 0);
 8001a54:	220c      	movs	r2, #12
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d100      	bne.n	8001a5c <UART_setup+0x80>
 8001a5a:	3a04      	subs	r2, #4
	USART_InitStruct.USART_Parity = USART_Parity_No;
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
	USART_DeInit(UARTx);
 8001a5c:	4812      	ldr	r0, [pc, #72]	; (8001aa8 <UART_setup+0xcc>)
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8001a5e:	9305      	str	r3, [sp, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8001a60:	9304      	str	r3, [sp, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8001a62:	9303      	str	r3, [sp, #12]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | ((readcCB != NULL) ? USART_Mode_Rx : 0);
 8001a64:	9206      	str	r2, [sp, #24]
	USART_DeInit(UARTx);
 8001a66:	f001 f8d7 	bl	8002c18 <USART_DeInit>
	USART_Init(UARTx, &USART_InitStruct);
 8001a6a:	a902      	add	r1, sp, #8
 8001a6c:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <UART_setup+0xcc>)
 8001a6e:	f001 f943 	bl	8002cf8 <USART_Init>
	USART_Cmd(UARTx, ENABLE);
 8001a72:	2101      	movs	r1, #1
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <UART_setup+0xcc>)
 8001a76:	f001 f99b 	bl	8002db0 <USART_Cmd>

	USART_ITConfig(UARTx, USART_IT_RXNE, readcCB != NULL ? ENABLE : DISABLE);
 8001a7a:	0022      	movs	r2, r4
 8001a7c:	1e53      	subs	r3, r2, #1
 8001a7e:	419a      	sbcs	r2, r3
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <UART_setup+0xcc>)
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	4909      	ldr	r1, [pc, #36]	; (8001aac <UART_setup+0xd0>)
 8001a86:	f001 f9a5 	bl	8002dd4 <USART_ITConfig>
	if (readcCB != NULL)
	{
		NVIC_add(IRQchannel);
 8001a8a:	201b      	movs	r0, #27
	if (readcCB != NULL)
 8001a8c:	2c00      	cmp	r4, #0
 8001a8e:	d006      	beq.n	8001a9e <UART_setup+0xc2>
		NVIC_add(IRQchannel);
 8001a90:	f7ff fdf0 	bl	8001674 <NVIC_add>
	}
	else
	{
		NVIC_rmv(IRQchannel);
	}
}
 8001a94:	b009      	add	sp, #36	; 0x24
 8001a96:	bd30      	pop	{r4, r5, pc}
				UART1_readc = UART_readc_pseudo;
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <UART_setup+0xd4>)
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e7ad      	b.n	80019fa <UART_setup+0x1e>
		NVIC_rmv(IRQchannel);
 8001a9e:	f7ff fe19 	bl	80016d4 <NVIC_rmv>
 8001aa2:	e7f7      	b.n	8001a94 <UART_setup+0xb8>
 8001aa4:	200002b0 	.word	0x200002b0
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	00050105 	.word	0x00050105
 8001ab0:	080019d9 	.word	0x080019d9

08001ab4 <UART_sendc>:
 * 			c		|	IN	|	sending byte.
 -----------------------------------------------------------------------------------------*/
void UART_sendc(uint8_t port, uint8_t c)
{
	USART_TypeDef* UARTx;
	switch (port)
 8001ab4:	3801      	subs	r0, #1
{
 8001ab6:	b510      	push	{r4, lr}
	switch (port)
 8001ab8:	2804      	cmp	r0, #4
 8001aba:	d80f      	bhi.n	8001adc <UART_sendc+0x28>
 8001abc:	f7fe fb24 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001ac0:	110f0315 	.word	0x110f0315
 8001ac4:	13          	.byte	0x13
 8001ac5:	00          	.byte	0x00
	{
		case 1:
			UARTx = USART1;
			break;
		case 2:
			UARTx = USART2;
 8001ac6:	4c0a      	ldr	r4, [pc, #40]	; (8001af0 <UART_sendc+0x3c>)
			UARTx = USART5;
			break;
		default:
			return;
	}
	USART_SendData(UARTx, c);
 8001ac8:	b289      	uxth	r1, r1
 8001aca:	0020      	movs	r0, r4
 8001acc:	f001 f97a 	bl	8002dc4 <USART_SendData>
	while (!USART_GetFlagStatus(UARTx, USART_FLAG_TXE));
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	0020      	movs	r0, r4
 8001ad4:	f001 f995 	bl	8002e02 <USART_GetFlagStatus>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d0f9      	beq.n	8001ad0 <UART_sendc+0x1c>
}
 8001adc:	bd10      	pop	{r4, pc}
			UARTx = USART3;
 8001ade:	4c05      	ldr	r4, [pc, #20]	; (8001af4 <UART_sendc+0x40>)
			break;
 8001ae0:	e7f2      	b.n	8001ac8 <UART_sendc+0x14>
			UARTx = USART4;
 8001ae2:	4c05      	ldr	r4, [pc, #20]	; (8001af8 <UART_sendc+0x44>)
			break;
 8001ae4:	e7f0      	b.n	8001ac8 <UART_sendc+0x14>
			UARTx = USART5;
 8001ae6:	4c05      	ldr	r4, [pc, #20]	; (8001afc <UART_sendc+0x48>)
			break;
 8001ae8:	e7ee      	b.n	8001ac8 <UART_sendc+0x14>
			UARTx = USART1;
 8001aea:	4c05      	ldr	r4, [pc, #20]	; (8001b00 <UART_sendc+0x4c>)
 8001aec:	e7ec      	b.n	8001ac8 <UART_sendc+0x14>
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	40004400 	.word	0x40004400
 8001af4:	40004800 	.word	0x40004800
 8001af8:	40004c00 	.word	0x40004c00
 8001afc:	40005000 	.word	0x40005000
 8001b00:	40013800 	.word	0x40013800

08001b04 <USART1_IRQHandler>:
}
/*----------------------------------------------------------------------------------------
 * Brief:	USART1 interrupt handler
 -----------------------------------------------------------------------------------------*/
void USART1_IRQHandler(void)
{
 8001b04:	b570      	push	{r4, r5, r6, lr}
	RTOS_enterIRQ();
	UART1_readc(USART_ReceiveData(USART1));
 8001b06:	4c08      	ldr	r4, [pc, #32]	; (8001b28 <USART1_IRQHandler+0x24>)
	RTOS_enterIRQ();
 8001b08:	f000 f814 	bl	8001b34 <RTOS_enterIRQ>
	UART1_readc(USART_ReceiveData(USART1));
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <USART1_IRQHandler+0x28>)
 8001b0e:	0020      	movs	r0, r4
 8001b10:	681d      	ldr	r5, [r3, #0]
 8001b12:	f001 f95b 	bl	8002dcc <USART_ReceiveData>
 8001b16:	b2c0      	uxtb	r0, r0
 8001b18:	47a8      	blx	r5
	USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8001b1a:	4905      	ldr	r1, [pc, #20]	; (8001b30 <USART1_IRQHandler+0x2c>)
 8001b1c:	0020      	movs	r0, r4
 8001b1e:	f001 f976 	bl	8002e0e <USART_ClearITPendingBit>
	RTOS_exitIRQ();
 8001b22:	f000 f808 	bl	8001b36 <RTOS_exitIRQ>
}
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	200002b0 	.word	0x200002b0
 8001b30:	00050105 	.word	0x00050105

08001b34 <RTOS_enterIRQ>:
 8001b34:	4770      	bx	lr

08001b36 <RTOS_exitIRQ>:
 * Brief:
 -----------------------------------------------------------------------------------------*/
void RTOS_exitIRQ(void)
{
	//taskEXIT_CRITICAL();
}
 8001b36:	4770      	bx	lr

08001b38 <dbgPrt_nothing>:
 *##################################################################################*/
/*--------------------------------------------------------------------------
 * Brief: pseudo print function.
 ---------------------------------------------------------------------------*/
void dbgPrt_nothing(const U8 *s, ...)
{
 8001b38:	b40f      	push	{r0, r1, r2, r3}
	return;
}
 8001b3a:	b004      	add	sp, #16
 8001b3c:	4770      	bx	lr
	...

08001b40 <nRF24L01_wrt>:
 * Brief:	Write to register
 * Ret:	register status byte
 *	If bit[7] = 1 -> result is invalid
 ---------------------------------------------------------------------------*/
U8 nRF24L01_wrt(U8 cmd, U16 wLen, const U8 *wDat)
{
 8001b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	U8 reg_status = 0;
	U16 i = 0;

	nRF24L01_wCSpin(IO_LO);
 8001b42:	4e0c      	ldr	r6, [pc, #48]	; (8001b74 <nRF24L01_wrt+0x34>)
{
 8001b44:	9001      	str	r0, [sp, #4]
	nRF24L01_wCSpin(IO_LO);
 8001b46:	6833      	ldr	r3, [r6, #0]
 8001b48:	2000      	movs	r0, #0
{
 8001b4a:	000d      	movs	r5, r1
 8001b4c:	0014      	movs	r4, r2
	nRF24L01_wCSpin(IO_LO);
 8001b4e:	4798      	blx	r3
	reg_status = nRF24L01_wrSPI(cmd);
 8001b50:	4f09      	ldr	r7, [pc, #36]	; (8001b78 <nRF24L01_wrt+0x38>)
 8001b52:	9801      	ldr	r0, [sp, #4]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4798      	blx	r3
 8001b58:	1965      	adds	r5, r4, r5
 8001b5a:	9001      	str	r0, [sp, #4]
	for (i = 0; i < wLen; i++)
 8001b5c:	42ac      	cmp	r4, r5
 8001b5e:	d104      	bne.n	8001b6a <nRF24L01_wrt+0x2a>
	{
		nRF24L01_wrSPI(wDat[i]);
	}
	nRF24L01_wCSpin(IO_HI);
 8001b60:	6833      	ldr	r3, [r6, #0]
 8001b62:	2001      	movs	r0, #1
 8001b64:	4798      	blx	r3
	return reg_status;
}
 8001b66:	9801      	ldr	r0, [sp, #4]
 8001b68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		nRF24L01_wrSPI(wDat[i]);
 8001b6a:	7820      	ldrb	r0, [r4, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4798      	blx	r3
 8001b70:	3401      	adds	r4, #1
 8001b72:	e7f3      	b.n	8001b5c <nRF24L01_wrt+0x1c>
 8001b74:	200002c0 	.word	0x200002c0
 8001b78:	200002c4 	.word	0x200002c4

08001b7c <nRF24L01_rd>:
 * Brief: Read from register
 * Ret: register status byte
 *  If bit[7] = 1 -> result is invalid
 ---------------------------------------------------------------------------*/
U8 nRF24L01_rd(U8 cmd, U16 rSize, U8 *rDat)
{
 8001b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b7e:	0007      	movs	r7, r0
	U8 reg_status = 0;
	U16 i = 0;

	nRF24L01_wCSpin(IO_LO);
 8001b80:	4d0d      	ldr	r5, [pc, #52]	; (8001bb8 <nRF24L01_rd+0x3c>)
 8001b82:	2000      	movs	r0, #0
 8001b84:	682b      	ldr	r3, [r5, #0]
{
 8001b86:	0014      	movs	r4, r2
 8001b88:	9101      	str	r1, [sp, #4]
	nRF24L01_wCSpin(IO_LO);
 8001b8a:	4798      	blx	r3
	reg_status = nRF24L01_wrSPI(cmd);
 8001b8c:	4e0b      	ldr	r6, [pc, #44]	; (8001bbc <nRF24L01_rd+0x40>)
 8001b8e:	0038      	movs	r0, r7
 8001b90:	6833      	ldr	r3, [r6, #0]
 8001b92:	4798      	blx	r3
 8001b94:	0007      	movs	r7, r0
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	18e3      	adds	r3, r4, r3
 8001b9a:	9301      	str	r3, [sp, #4]
	for (i = 0; i < rSize; i++)
 8001b9c:	9b01      	ldr	r3, [sp, #4]
 8001b9e:	429c      	cmp	r4, r3
 8001ba0:	d104      	bne.n	8001bac <nRF24L01_rd+0x30>
	{
		rDat[i] = nRF24L01_wrSPI(0xFF);
	}
	nRF24L01_wCSpin(IO_HI);
 8001ba2:	682b      	ldr	r3, [r5, #0]
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	4798      	blx	r3
	return reg_status;
}
 8001ba8:	0038      	movs	r0, r7
 8001baa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		rDat[i] = nRF24L01_wrSPI(0xFF);
 8001bac:	20ff      	movs	r0, #255	; 0xff
 8001bae:	6833      	ldr	r3, [r6, #0]
 8001bb0:	4798      	blx	r3
 8001bb2:	7020      	strb	r0, [r4, #0]
 8001bb4:	3401      	adds	r4, #1
 8001bb6:	e7f1      	b.n	8001b9c <nRF24L01_rd+0x20>
 8001bb8:	200002c0 	.word	0x200002c0
 8001bbc:	200002c4 	.word	0x200002c4

08001bc0 <nRF24L01_setup>:
{
 8001bc0:	b510      	push	{r4, lr}
	nRF24L01_delayms = delayms_cb;
 8001bc2:	4c04      	ldr	r4, [pc, #16]	; (8001bd4 <nRF24L01_setup+0x14>)
 8001bc4:	6020      	str	r0, [r4, #0]
	nRF24L01_wCSpin = wCSpin_cb;
 8001bc6:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <nRF24L01_setup+0x18>)
 8001bc8:	6001      	str	r1, [r0, #0]
	nRF24L01_wCEpin = wCEpin_cb;
 8001bca:	4904      	ldr	r1, [pc, #16]	; (8001bdc <nRF24L01_setup+0x1c>)
 8001bcc:	600a      	str	r2, [r1, #0]
	nRF24L01_wrSPI = wrSPI_cb;
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <nRF24L01_setup+0x20>)
 8001bd0:	6013      	str	r3, [r2, #0]
}
 8001bd2:	bd10      	pop	{r4, pc}
 8001bd4:	200002b8 	.word	0x200002b8
 8001bd8:	200002c0 	.word	0x200002c0
 8001bdc:	200002bc 	.word	0x200002bc
 8001be0:	200002c4 	.word	0x200002c4

08001be4 <nRF24L01_ini>:

/*--------------------------------------------------------------------------
 * Brief:
 ---------------------------------------------------------------------------*/
U8 nRF24L01_ini(nRF24L01_INI_t iniStruct)
{
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	0a13      	lsrs	r3, r2, #8
 8001be8:	b08f      	sub	sp, #60	; 0x3c
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	0a04      	lsrs	r4, r0, #8
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	920b      	str	r2, [sp, #44]	; 0x2c
 8001bf2:	b2e2      	uxtb	r2, r4
 8001bf4:	9203      	str	r2, [sp, #12]
 8001bf6:	9a01      	ldr	r2, [sp, #4]
 8001bf8:	9009      	str	r0, [sp, #36]	; 0x24
 8001bfa:	910a      	str	r1, [sp, #40]	; 0x28
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	2a00      	cmp	r2, #0
 8001c00:	d000      	beq.n	8001c04 <nRF24L01_ini+0x20>
 8001c02:	2306      	movs	r3, #6
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	9308      	str	r3, [sp, #32]
 8001c08:	9b01      	ldr	r3, [sp, #4]
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	4193      	sbcs	r3, r2
 8001c0e:	1c9a      	adds	r2, r3, #2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	9306      	str	r3, [sp, #24]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9207      	str	r2, [sp, #28]
 8001c18:	9302      	str	r3, [sp, #8]
	   , step = 0//
	   , reg = 0//
	   , wDatLen = 0//
	   , wChksum = 0//
	   , rChksum = 0//
	   , skipChksum = 0//
 8001c1a:	9305      	str	r3, [sp, #20]
 8001c1c:	466b      	mov	r3, sp
 8001c1e:	7a1b      	ldrb	r3, [r3, #8]
 8001c20:	9300      	str	r3, [sp, #0]
	for (step = 0; step < 0xFF; step++)
	{
		wDatLen = 1;
		wChksum = 0;
		rChksum = 0;
		switch (step)
 8001c22:	2b0d      	cmp	r3, #13
 8001c24:	d900      	bls.n	8001c28 <nRF24L01_ini+0x44>
 8001c26:	e0c7      	b.n	8001db8 <nRF24L01_ini+0x1d4>
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7fe fa77 	bl	800011c <__gnu_thumb1_case_uhi>
 8001c2e:	000e      	.short	0x000e
 8001c30:	005f0019 	.word	0x005f0019
 8001c34:	006d0066 	.word	0x006d0066
 8001c38:	00fd0073 	.word	0x00fd0073
 8001c3c:	00920089 	.word	0x00920089
 8001c40:	00a3009a 	.word	0x00a3009a
 8001c44:	00b900b0 	.word	0x00b900b0
 8001c48:	00bf      	.short	0x00bf
		{
			case 0:
				/* Config */
				wDat[0] = BIT_EN_CRC //
							| (iniStruct.enIRQ_RX_DR ? 0 : BIT_MASK_RX_DR)//
 8001c4a:	ab09      	add	r3, sp, #36	; 0x24
				wDat[0] = BIT_EN_CRC //
 8001c4c:	7a9a      	ldrb	r2, [r3, #10]
 8001c4e:	2338      	movs	r3, #56	; 0x38
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d100      	bne.n	8001c56 <nRF24L01_ini+0x72>
 8001c54:	3340      	adds	r3, #64	; 0x40
 8001c56:	aa0c      	add	r2, sp, #48	; 0x30
							| BIT_MASK_TX_DS//
							| BIT_MASK_MAX_RT//
							;
				reg = REG_CONFIG;
 8001c58:	9c00      	ldr	r4, [sp, #0]
				wDat[0] = BIT_EN_CRC //
 8001c5a:	7013      	strb	r3, [r2, #0]
		wDatLen = 1;
 8001c5c:	2701      	movs	r7, #1
				break;
			case 4:
				/* Setup address length: 4 bytes */
				wDat[0] = BITS_AW(iniStruct.PRX1_addrLen);
				reg = REG_SETUP_AW;
				break;
 8001c5e:	e00e      	b.n	8001c7e <nRF24L01_ini+0x9a>
				wDat[0] = BITS_RF_PWR(iniStruct.TxPwr);
 8001c60:	2406      	movs	r4, #6
 8001c62:	a909      	add	r1, sp, #36	; 0x24
 8001c64:	79cb      	ldrb	r3, [r1, #7]
 8001c66:	aa0c      	add	r2, sp, #48	; 0x30
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4023      	ands	r3, r4
 8001c6c:	7013      	strb	r3, [r2, #0]
				switch (iniStruct.dataRates)
 8001c6e:	7a09      	ldrb	r1, [r1, #8]
 8001c70:	2902      	cmp	r1, #2
 8001c72:	d033      	beq.n	8001cdc <nRF24L01_ini+0xf8>
 8001c74:	2903      	cmp	r1, #3
 8001c76:	d035      	beq.n	8001ce4 <nRF24L01_ini+0x100>
 8001c78:	2901      	cmp	r1, #1
 8001c7a:	d135      	bne.n	8001ce8 <nRF24L01_ini+0x104>
		wDatLen = 1;
 8001c7c:	9f00      	ldr	r7, [sp, #0]
		}
		if (!wDatLen)
		{
			continue;
		}
		nRF24L01_dbgPrt("\r\n %s:step=%u", __func__, step);
 8001c7e:	4d6e      	ldr	r5, [pc, #440]	; (8001e38 <nRF24L01_ini+0x254>)
 8001c80:	4e6e      	ldr	r6, [pc, #440]	; (8001e3c <nRF24L01_ini+0x258>)
 8001c82:	0029      	movs	r1, r5
 8001c84:	9a02      	ldr	r2, [sp, #8]
 8001c86:	486e      	ldr	r0, [pc, #440]	; (8001e40 <nRF24L01_ini+0x25c>)
 8001c88:	6833      	ldr	r3, [r6, #0]
 8001c8a:	4798      	blx	r3
		nRF24L01_dbgPrt("\r\n %s:Reg=%X wDat=", __func__, reg);
 8001c8c:	0029      	movs	r1, r5
 8001c8e:	2500      	movs	r5, #0
 8001c90:	6833      	ldr	r3, [r6, #0]
 8001c92:	0022      	movs	r2, r4
 8001c94:	486b      	ldr	r0, [pc, #428]	; (8001e44 <nRF24L01_ini+0x260>)
 8001c96:	4798      	blx	r3
		wChksum = 0;
 8001c98:	9504      	str	r5, [sp, #16]
		for (U8 i = 0; i < wDatLen; i++)
		{
			nRF24L01_dbgPrt(" %02X", wDat[i]);
 8001c9a:	2210      	movs	r2, #16
 8001c9c:	4e67      	ldr	r6, [pc, #412]	; (8001e3c <nRF24L01_ini+0x258>)
 8001c9e:	ab08      	add	r3, sp, #32
 8001ca0:	189b      	adds	r3, r3, r2
 8001ca2:	5d59      	ldrb	r1, [r3, r5]
 8001ca4:	4868      	ldr	r0, [pc, #416]	; (8001e48 <nRF24L01_ini+0x264>)
 8001ca6:	6833      	ldr	r3, [r6, #0]
 8001ca8:	4798      	blx	r3
			wChksum ^= wDat[i];
 8001caa:	2210      	movs	r2, #16
 8001cac:	ab08      	add	r3, sp, #32
 8001cae:	189b      	adds	r3, r3, r2
 8001cb0:	5d5b      	ldrb	r3, [r3, r5]
 8001cb2:	9a04      	ldr	r2, [sp, #16]
 8001cb4:	3501      	adds	r5, #1
 8001cb6:	405a      	eors	r2, r3
		for (U8 i = 0; i < wDatLen; i++)
 8001cb8:	b2eb      	uxtb	r3, r5
			wChksum ^= wDat[i];
 8001cba:	9204      	str	r2, [sp, #16]
		for (U8 i = 0; i < wDatLen; i++)
 8001cbc:	42bb      	cmp	r3, r7
 8001cbe:	d3ec      	bcc.n	8001c9a <nRF24L01_ini+0xb6>
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8001cc0:	2020      	movs	r0, #32
		}
		reg_status = nRF24L01_wReg(reg, wDatLen, wDat);
 8001cc2:	b2bd      	uxth	r5, r7
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8001cc4:	aa0c      	add	r2, sp, #48	; 0x30
 8001cc6:	0029      	movs	r1, r5
 8001cc8:	4320      	orrs	r0, r4
 8001cca:	f7ff ff39 	bl	8001b40 <nRF24L01_wrt>
		if (reg_status >> 7)
 8001cce:	0603      	lsls	r3, r0, #24
 8001cd0:	d400      	bmi.n	8001cd4 <nRF24L01_ini+0xf0>
 8001cd2:	e07e      	b.n	8001dd2 <nRF24L01_ini+0x1ee>
			nRF24L01_dbgPrt(" %02X", wDat[i]);
			rChksum ^= wDat[i];
		}
		if (!skipChksum && (rChksum != wChksum) && (reg != REG_STATUS))
		{
			return (step + 1);
 8001cd4:	9800      	ldr	r0, [sp, #0]
 8001cd6:	3001      	adds	r0, #1
 8001cd8:	b2c0      	uxtb	r0, r0
 8001cda:	e078      	b.n	8001dce <nRF24L01_ini+0x1ea>
						wDat[0] |= BIT_RF_DR_HIGH;
 8001cdc:	2108      	movs	r1, #8
						wDat[0] |= BIT_RF_DR_LOW;
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	7013      	strb	r3, [r2, #0]
 8001ce2:	e7cb      	b.n	8001c7c <nRF24L01_ini+0x98>
 8001ce4:	2120      	movs	r1, #32
 8001ce6:	e7fa      	b.n	8001cde <nRF24L01_ini+0xfa>
						wDat[0] |= BIT_RF_DR_HIGH;
 8001ce8:	2128      	movs	r1, #40	; 0x28
 8001cea:	e7f8      	b.n	8001cde <nRF24L01_ini+0xfa>
				wDat[0] = (iniStruct.enACK ? BIT_ENAA_P1 : 0);
 8001cec:	466a      	mov	r2, sp
 8001cee:	7e12      	ldrb	r2, [r2, #24]
 8001cf0:	ab0c      	add	r3, sp, #48	; 0x30
		wDatLen = 1;
 8001cf2:	2701      	movs	r7, #1
					wDat[0] = BIT_ENAA_P1;
 8001cf4:	701a      	strb	r2, [r3, #0]
					reg = REG_EN_AA;
 8001cf6:	003c      	movs	r4, r7
 8001cf8:	e7c1      	b.n	8001c7e <nRF24L01_ini+0x9a>
				wDat[0] = (iniStruct.enACK ? BIT_ERX_P0 : 0) | BIT_ERX_P1;
 8001cfa:	466a      	mov	r2, sp
 8001cfc:	7f12      	ldrb	r2, [r2, #28]
 8001cfe:	ab0c      	add	r3, sp, #48	; 0x30
 8001d00:	701a      	strb	r2, [r3, #0]
		wDatLen = 1;
 8001d02:	2701      	movs	r7, #1
				reg = REG_EN_RXADDR;
 8001d04:	2402      	movs	r4, #2
				break;
 8001d06:	e7ba      	b.n	8001c7e <nRF24L01_ini+0x9a>
				wDat[0] = BITS_AW(iniStruct.PRX1_addrLen);
 8001d08:	2403      	movs	r4, #3
 8001d0a:	9a03      	ldr	r2, [sp, #12]
 8001d0c:	ab0c      	add	r3, sp, #48	; 0x30
 8001d0e:	4022      	ands	r2, r4
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e7a3      	b.n	8001c5c <nRF24L01_ini+0x78>
				wDat[0] = iniStruct.PRX1_addr[0];
 8001d14:	aa09      	add	r2, sp, #36	; 0x24
 8001d16:	7891      	ldrb	r1, [r2, #2]
 8001d18:	ab0c      	add	r3, sp, #48	; 0x30
 8001d1a:	7019      	strb	r1, [r3, #0]
				wDat[1] = iniStruct.PRX1_addr[1];
 8001d1c:	78d1      	ldrb	r1, [r2, #3]
						wDatLen = 3;
 8001d1e:	2703      	movs	r7, #3
				wDat[1] = iniStruct.PRX1_addr[1];
 8001d20:	7059      	strb	r1, [r3, #1]
				wDat[2] = iniStruct.PRX1_addr[2];
 8001d22:	7911      	ldrb	r1, [r2, #4]
 8001d24:	7099      	strb	r1, [r3, #2]
				wDat[3] = iniStruct.PRX1_addr[3];
 8001d26:	7951      	ldrb	r1, [r2, #5]
 8001d28:	70d9      	strb	r1, [r3, #3]
				wDat[4] = iniStruct.PRX1_addr[4];
 8001d2a:	7992      	ldrb	r2, [r2, #6]
 8001d2c:	711a      	strb	r2, [r3, #4]
				switch (iniStruct.PRX1_addrLen)
 8001d2e:	9b03      	ldr	r3, [sp, #12]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d003      	beq.n	8001d3c <nRF24L01_ini+0x158>
						wDatLen = 4;
 8001d34:	2704      	movs	r7, #4
				switch (iniStruct.PRX1_addrLen)
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d000      	beq.n	8001d3c <nRF24L01_ini+0x158>
						wDatLen = 5;
 8001d3a:	9f00      	ldr	r7, [sp, #0]
				reg = REG_RX_ADDR_P1;
 8001d3c:	240b      	movs	r4, #11
 8001d3e:	e79e      	b.n	8001c7e <nRF24L01_ini+0x9a>
				wDat[0] = BITS_RF_CH(iniStruct.RFch);
 8001d40:	227f      	movs	r2, #127	; 0x7f
 8001d42:	ab09      	add	r3, sp, #36	; 0x24
 8001d44:	781b      	ldrb	r3, [r3, #0]
		wDatLen = 1;
 8001d46:	2701      	movs	r7, #1
				wDat[0] = BITS_RF_CH(iniStruct.RFch);
 8001d48:	4013      	ands	r3, r2
 8001d4a:	aa0c      	add	r2, sp, #48	; 0x30
 8001d4c:	7013      	strb	r3, [r2, #0]
				reg = REG_RF_CH;
 8001d4e:	2405      	movs	r4, #5
				break;
 8001d50:	e795      	b.n	8001c7e <nRF24L01_ini+0x9a>
				wDat[0] = 0;
 8001d52:	2200      	movs	r2, #0
 8001d54:	ab0c      	add	r3, sp, #48	; 0x30
 8001d56:	701a      	strb	r2, [r3, #0]
				skipChksum = 1;
 8001d58:	2301      	movs	r3, #1
				reg = REG_STATUS;
 8001d5a:	2407      	movs	r4, #7
				skipChksum = 1;
 8001d5c:	9305      	str	r3, [sp, #20]
		wDatLen = 1;
 8001d5e:	001f      	movs	r7, r3
				break;
 8001d60:	e78d      	b.n	8001c7e <nRF24L01_ini+0x9a>
				wDat[0] = (iniStruct.enACK ? (BIT_EN_ACK_PAY | BIT_EN_DPL) : BIT_EN_DYN_ACK);
 8001d62:	466a      	mov	r2, sp
 8001d64:	2120      	movs	r1, #32
 8001d66:	1852      	adds	r2, r2, r1
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	ab0c      	add	r3, sp, #48	; 0x30
 8001d6c:	701a      	strb	r2, [r3, #0]
		wDatLen = 1;
 8001d6e:	2701      	movs	r7, #1
				reg = REG_FEATURE;
 8001d70:	241d      	movs	r4, #29
				break;
 8001d72:	e784      	b.n	8001c7e <nRF24L01_ini+0x9a>
				enACK = iniStruct.enACK;
 8001d74:	466a      	mov	r2, sp
 8001d76:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <nRF24L01_ini+0x268>)
 8001d78:	7912      	ldrb	r2, [r2, #4]
 8001d7a:	701a      	strb	r2, [r3, #0]
				if (iniStruct.enACK)
 8001d7c:	9b01      	ldr	r3, [sp, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d052      	beq.n	8001e28 <nRF24L01_ini+0x244>
					wDat[0] = BIT_DPL_P1;
 8001d82:	2202      	movs	r2, #2
 8001d84:	ab0c      	add	r3, sp, #48	; 0x30
 8001d86:	701a      	strb	r2, [r3, #0]
		wDatLen = 1;
 8001d88:	2701      	movs	r7, #1
					reg = REG_DYNPD;
 8001d8a:	241c      	movs	r4, #28
 8001d8c:	e777      	b.n	8001c7e <nRF24L01_ini+0x9a>
				if (iniStruct.enACK)
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d049      	beq.n	8001e28 <nRF24L01_ini+0x244>
					wDat[0] = BITS_ARD(0x2) | BITS_ARC(5);//wait 750us
 8001d94:	2225      	movs	r2, #37	; 0x25
 8001d96:	ab0c      	add	r3, sp, #48	; 0x30
 8001d98:	701a      	strb	r2, [r3, #0]
		wDatLen = 1;
 8001d9a:	2701      	movs	r7, #1
					reg = REG_SETUP_RETR;
 8001d9c:	2404      	movs	r4, #4
 8001d9e:	e76e      	b.n	8001c7e <nRF24L01_ini+0x9a>
				if (iniStruct.enACK)
 8001da0:	9b01      	ldr	r3, [sp, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d040      	beq.n	8001e28 <nRF24L01_ini+0x244>
					wDat[0] = BIT_ENAA_P1;
 8001da6:	ab0c      	add	r3, sp, #48	; 0x30
 8001da8:	2202      	movs	r2, #2
 8001daa:	e7a2      	b.n	8001cf2 <nRF24L01_ini+0x10e>
				if (iniStruct.enACK)
 8001dac:	9b01      	ldr	r3, [sp, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <nRF24L01_ini+0x1d4>
					wDat[0] = 32;
 8001db2:	2220      	movs	r2, #32
 8001db4:	ab0c      	add	r3, sp, #48	; 0x30
 8001db6:	701a      	strb	r2, [r3, #0]
				nRF24L01_wrt(CMD_FLUSH_RX, 0, NULL);/* Empty RX register */
 8001db8:	2200      	movs	r2, #0
 8001dba:	20e2      	movs	r0, #226	; 0xe2
 8001dbc:	0011      	movs	r1, r2
 8001dbe:	f7ff febf 	bl	8001b40 <nRF24L01_wrt>
				nRF24L01_wrt(CMD_FLUSH_TX, 0, NULL);/* Empty TX register */
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	20e1      	movs	r0, #225	; 0xe1
 8001dc6:	0011      	movs	r1, r2
 8001dc8:	f7ff feba 	bl	8001b40 <nRF24L01_wrt>
				return nRF24L01_RES_OK;
 8001dcc:	2000      	movs	r0, #0
		}
	}
	return 0xFF;
}
 8001dce:	b00f      	add	sp, #60	; 0x3c
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(wDat, 0, wDatLen);
 8001dd2:	003a      	movs	r2, r7
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	a80c      	add	r0, sp, #48	; 0x30
 8001dd8:	f001 fc64 	bl	80036a4 <memset>
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 8001ddc:	0029      	movs	r1, r5
		nRF24L01_dbgPrt("\r\n %s:Reg=%X rDat=", __func__, reg);
 8001dde:	2500      	movs	r5, #0
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 8001de0:	aa0c      	add	r2, sp, #48	; 0x30
 8001de2:	0020      	movs	r0, r4
 8001de4:	f7ff feca 	bl	8001b7c <nRF24L01_rd>
		nRF24L01_dbgPrt("\r\n %s:Reg=%X rDat=", __func__, reg);
 8001de8:	6833      	ldr	r3, [r6, #0]
 8001dea:	0022      	movs	r2, r4
 8001dec:	4912      	ldr	r1, [pc, #72]	; (8001e38 <nRF24L01_ini+0x254>)
 8001dee:	4818      	ldr	r0, [pc, #96]	; (8001e50 <nRF24L01_ini+0x26c>)
 8001df0:	4798      	blx	r3
		rChksum = 0;
 8001df2:	002e      	movs	r6, r5
			nRF24L01_dbgPrt(" %02X", wDat[i]);
 8001df4:	2210      	movs	r2, #16
 8001df6:	ab08      	add	r3, sp, #32
 8001df8:	189b      	adds	r3, r3, r2
 8001dfa:	5d59      	ldrb	r1, [r3, r5]
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <nRF24L01_ini+0x258>)
 8001dfe:	4812      	ldr	r0, [pc, #72]	; (8001e48 <nRF24L01_ini+0x264>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4798      	blx	r3
			rChksum ^= wDat[i];
 8001e04:	2210      	movs	r2, #16
 8001e06:	ab08      	add	r3, sp, #32
 8001e08:	189b      	adds	r3, r3, r2
 8001e0a:	5d5b      	ldrb	r3, [r3, r5]
 8001e0c:	3501      	adds	r5, #1
 8001e0e:	405e      	eors	r6, r3
		for (U8 i = 0; i < wDatLen; i++)
 8001e10:	b2eb      	uxtb	r3, r5
 8001e12:	42bb      	cmp	r3, r7
 8001e14:	d3ee      	bcc.n	8001df4 <nRF24L01_ini+0x210>
		if (!skipChksum && (rChksum != wChksum) && (reg != REG_STATUS))
 8001e16:	9b05      	ldr	r3, [sp, #20]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <nRF24L01_ini+0x244>
 8001e1c:	9b04      	ldr	r3, [sp, #16]
 8001e1e:	42b3      	cmp	r3, r6
 8001e20:	d002      	beq.n	8001e28 <nRF24L01_ini+0x244>
 8001e22:	2c07      	cmp	r4, #7
 8001e24:	d000      	beq.n	8001e28 <nRF24L01_ini+0x244>
 8001e26:	e755      	b.n	8001cd4 <nRF24L01_ini+0xf0>
 8001e28:	9b02      	ldr	r3, [sp, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	9302      	str	r3, [sp, #8]
	for (step = 0; step < 0xFF; step++)
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d000      	beq.n	8001e34 <nRF24L01_ini+0x250>
 8001e32:	e6f3      	b.n	8001c1c <nRF24L01_ini+0x38>
	return 0xFF;
 8001e34:	0018      	movs	r0, r3
 8001e36:	e7ca      	b.n	8001dce <nRF24L01_ini+0x1ea>
 8001e38:	080040f4 	.word	0x080040f4
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	08004146 	.word	0x08004146
 8001e44:	08004154 	.word	0x08004154
 8001e48:	0800412d 	.word	0x0800412d
 8001e4c:	200002b4 	.word	0x200002b4
 8001e50:	08004133 	.word	0x08004133

08001e54 <nRF24L01_snd>:
/*--------------------------------------------------------------------------
 * Brief: send one packet via nRF24L01
 ---------------------------------------------------------------------------*/
U8 nRF24L01_snd(U16 timeout, U8 addrLen, U8 addr[5], U8 len, const U8 *dat)
{
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	b085      	sub	sp, #20
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	0017      	movs	r7, r2
	U8 wDat[1], rDat[1], reg_status = 0;

	if (len > 32)
 8001e5c:	9a01      	ldr	r2, [sp, #4]
{
 8001e5e:	0004      	movs	r4, r0
 8001e60:	000d      	movs	r5, r1
	{
		// Invalid size
		return 0xFF;
 8001e62:	23ff      	movs	r3, #255	; 0xff
	if (len > 32)
 8001e64:	2a20      	cmp	r2, #32
 8001e66:	d837      	bhi.n	8001ed8 <nRF24L01_snd+0x84>
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 8001e68:	aa02      	add	r2, sp, #8
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fe85 	bl	8001b7c <nRF24L01_rd>
	}
	/* Config TX mode */
	reg_status = nRF24L01_rReg(REG_CONFIG, 1, wDat);
	if (reg_status >> 7)
	{
		return 0x10;
 8001e72:	2310      	movs	r3, #16
	if (reg_status >> 7)
 8001e74:	0602      	lsls	r2, r0, #24
 8001e76:	d42f      	bmi.n	8001ed8 <nRF24L01_snd+0x84>
	}
	if (wDat[0] & BIT_PRIM_RX)
 8001e78:	ab02      	add	r3, sp, #8
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	421a      	tst	r2, r3
 8001e80:	d002      	beq.n	8001e88 <nRF24L01_snd+0x34>
	{
		wDat[0] ^= BIT_PRIM_RX;
 8001e82:	4053      	eors	r3, r2
 8001e84:	aa02      	add	r2, sp, #8
 8001e86:	7013      	strb	r3, [r2, #0]
	}
	wDat[0] |= BIT_PWR_UP;
 8001e88:	ab02      	add	r3, sp, #8
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	2302      	movs	r3, #2
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8001e8e:	2101      	movs	r1, #1
	wDat[0] |= BIT_PWR_UP;
 8001e90:	4313      	orrs	r3, r2
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8001e92:	2020      	movs	r0, #32
	wDat[0] |= BIT_PWR_UP;
 8001e94:	aa02      	add	r2, sp, #8
 8001e96:	7013      	strb	r3, [r2, #0]
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8001e98:	f7ff fe52 	bl	8001b40 <nRF24L01_wrt>
	reg_status = nRF24L01_wReg(REG_CONFIG, 1, wDat);
	if (reg_status >> 7)
	{
		return 0x11;
 8001e9c:	2311      	movs	r3, #17
	if (reg_status >> 7)
 8001e9e:	0602      	lsls	r2, r0, #24
 8001ea0:	d41a      	bmi.n	8001ed8 <nRF24L01_snd+0x84>
	}
	/* Setup TX address */
	reg_status = nRF24L01_wReg(REG_TX_ADDR, addrLen, addr);
 8001ea2:	b2ad      	uxth	r5, r5
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8001ea4:	003a      	movs	r2, r7
 8001ea6:	0029      	movs	r1, r5
 8001ea8:	2030      	movs	r0, #48	; 0x30
 8001eaa:	f7ff fe49 	bl	8001b40 <nRF24L01_wrt>
	if (reg_status >> 7)
	{
		return 0x12;
 8001eae:	2312      	movs	r3, #18
	if (reg_status >> 7)
 8001eb0:	0602      	lsls	r2, r0, #24
 8001eb2:	d411      	bmi.n	8001ed8 <nRF24L01_snd+0x84>
	}
	if (enACK)
 8001eb4:	4e31      	ldr	r6, [pc, #196]	; (8001f7c <nRF24L01_snd+0x128>)
 8001eb6:	7833      	ldrb	r3, [r6, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <nRF24L01_snd+0x8a>
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8001ebc:	003a      	movs	r2, r7
 8001ebe:	0029      	movs	r1, r5
 8001ec0:	202a      	movs	r0, #42	; 0x2a
 8001ec2:	f7ff fe3d 	bl	8001b40 <nRF24L01_wrt>
 8001ec6:	0002      	movs	r2, r0
	{
		/* Setup RX address pipe 0 */
		reg_status = nRF24L01_wReg(REG_RX_ADDR_P0, addrLen, addr);
		if (reg_status >> 7)
 8001ec8:	0603      	lsls	r3, r0, #24
 8001eca:	d508      	bpl.n	8001ede <nRF24L01_snd+0x8a>
		{
			nRF24L01_dbgPrt("\r\n %s:Wrt REG_RX_ADDR_P0:stt=%X", __func__, reg_status);
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <nRF24L01_snd+0x12c>)
 8001ece:	492d      	ldr	r1, [pc, #180]	; (8001f84 <nRF24L01_snd+0x130>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	482d      	ldr	r0, [pc, #180]	; (8001f88 <nRF24L01_snd+0x134>)
 8001ed4:	4798      	blx	r3
			return 0x13;
 8001ed6:	2313      	movs	r3, #19
		nRF24L01_delayms(10);
		timeout -= 10;
	}
	nRF24L01_wCEpin(IO_LO);
	return nRF24L01_RES_OK;
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	b005      	add	sp, #20
 8001edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nRF24L01_wCEpin(IO_HI);
 8001ede:	4d2b      	ldr	r5, [pc, #172]	; (8001f8c <nRF24L01_snd+0x138>)
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	4798      	blx	r3
	reg_status = nRF24L01_wrt(enACK ? CMD_W_TX_PAYLOAD : CMD_W_TX_PAYLOAD_NOACK, len, dat);
 8001ee6:	7833      	ldrb	r3, [r6, #0]
 8001ee8:	20a0      	movs	r0, #160	; 0xa0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d100      	bne.n	8001ef0 <nRF24L01_snd+0x9c>
 8001eee:	3010      	adds	r0, #16
 8001ef0:	466b      	mov	r3, sp
 8001ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ef4:	8899      	ldrh	r1, [r3, #4]
 8001ef6:	f7ff fe23 	bl	8001b40 <nRF24L01_wrt>
 8001efa:	0007      	movs	r7, r0
	if (reg_status >> 7)
 8001efc:	0603      	lsls	r3, r0, #24
 8001efe:	d407      	bmi.n	8001f10 <nRF24L01_snd+0xbc>
		if (rDat[0] & BIT_TX_EMPTY)
 8001f00:	2710      	movs	r7, #16
		if (timeout < 10)
 8001f02:	2c09      	cmp	r4, #9
 8001f04:	d817      	bhi.n	8001f36 <nRF24L01_snd+0xe2>
			nRF24L01_wCEpin(IO_LO);
 8001f06:	682b      	ldr	r3, [r5, #0]
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4798      	blx	r3
			return 5;
 8001f0c:	2305      	movs	r3, #5
 8001f0e:	e7e3      	b.n	8001ed8 <nRF24L01_snd+0x84>
		nRF24L01_dbgPrt("\r\n %s:Wrt %s", __func__, enACK ? "CMD_W_TX_PAYLOAD" : "CMD_W_TX_PAYLOAD_NOACK");
 8001f10:	4c1b      	ldr	r4, [pc, #108]	; (8001f80 <nRF24L01_snd+0x12c>)
 8001f12:	7831      	ldrb	r1, [r6, #0]
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <nRF24L01_snd+0x13c>)
 8001f18:	2900      	cmp	r1, #0
 8001f1a:	d100      	bne.n	8001f1e <nRF24L01_snd+0xca>
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <nRF24L01_snd+0x140>)
 8001f1e:	4919      	ldr	r1, [pc, #100]	; (8001f84 <nRF24L01_snd+0x130>)
 8001f20:	481d      	ldr	r0, [pc, #116]	; (8001f98 <nRF24L01_snd+0x144>)
 8001f22:	4798      	blx	r3
		nRF24L01_dbgPrt(":stt=%X", reg_status);
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	0039      	movs	r1, r7
 8001f28:	481c      	ldr	r0, [pc, #112]	; (8001f9c <nRF24L01_snd+0x148>)
 8001f2a:	4798      	blx	r3
		nRF24L01_wCEpin(IO_LO);
 8001f2c:	682b      	ldr	r3, [r5, #0]
 8001f2e:	2000      	movs	r0, #0
 8001f30:	4798      	blx	r3
		return 0x20;
 8001f32:	2320      	movs	r3, #32
 8001f34:	e7d0      	b.n	8001ed8 <nRF24L01_snd+0x84>
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 8001f36:	ae03      	add	r6, sp, #12
 8001f38:	0032      	movs	r2, r6
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	2017      	movs	r0, #23
 8001f3e:	f7ff fe1d 	bl	8001b7c <nRF24L01_rd>
 8001f42:	0002      	movs	r2, r0
		if (reg_status >> 7)
 8001f44:	0603      	lsls	r3, r0, #24
 8001f46:	d509      	bpl.n	8001f5c <nRF24L01_snd+0x108>
			nRF24L01_dbgPrt("\r\n %s:Rd REG_FIFO_STATUS:stt=%X", __func__, reg_status);
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <nRF24L01_snd+0x12c>)
 8001f4a:	490e      	ldr	r1, [pc, #56]	; (8001f84 <nRF24L01_snd+0x130>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4814      	ldr	r0, [pc, #80]	; (8001fa0 <nRF24L01_snd+0x14c>)
 8001f50:	4798      	blx	r3
			nRF24L01_wCEpin(IO_LO);
 8001f52:	682b      	ldr	r3, [r5, #0]
 8001f54:	2000      	movs	r0, #0
 8001f56:	4798      	blx	r3
			return 0x21;
 8001f58:	2321      	movs	r3, #33	; 0x21
 8001f5a:	e7bd      	b.n	8001ed8 <nRF24L01_snd+0x84>
		if (rDat[0] & BIT_TX_EMPTY)
 8001f5c:	7833      	ldrb	r3, [r6, #0]
 8001f5e:	423b      	tst	r3, r7
 8001f60:	d106      	bne.n	8001f70 <nRF24L01_snd+0x11c>
		nRF24L01_delayms(10);
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <nRF24L01_snd+0x150>)
 8001f64:	200a      	movs	r0, #10
 8001f66:	681b      	ldr	r3, [r3, #0]
		timeout -= 10;
 8001f68:	3c0a      	subs	r4, #10
		nRF24L01_delayms(10);
 8001f6a:	4798      	blx	r3
		timeout -= 10;
 8001f6c:	b2a4      	uxth	r4, r4
		if (timeout < 10)
 8001f6e:	e7c8      	b.n	8001f02 <nRF24L01_snd+0xae>
	nRF24L01_wCEpin(IO_LO);
 8001f70:	682b      	ldr	r3, [r5, #0]
 8001f72:	2000      	movs	r0, #0
 8001f74:	4798      	blx	r3
	return nRF24L01_RES_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e7ae      	b.n	8001ed8 <nRF24L01_snd+0x84>
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	200002b4 	.word	0x200002b4
 8001f80:	20000000 	.word	0x20000000
 8001f84:	08004101 	.word	0x08004101
 8001f88:	080041e5 	.word	0x080041e5
 8001f8c:	200002bc 	.word	0x200002bc
 8001f90:	080041bd 	.word	0x080041bd
 8001f94:	080041ce 	.word	0x080041ce
 8001f98:	08004205 	.word	0x08004205
 8001f9c:	080041fd 	.word	0x080041fd
 8001fa0:	08004212 	.word	0x08004212
 8001fa4:	200002b8 	.word	0x200002b8

08001fa8 <nRF24L01_pwrDown>:
/*--------------------------------------------------------------------------
 * Brief:
 ---------------------------------------------------------------------------*/
U8 nRF24L01_pwrDown(void)
{
 8001fa8:	b513      	push	{r0, r1, r4, lr}
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 8001faa:	ac01      	add	r4, sp, #4
 8001fac:	0022      	movs	r2, r4
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff fde3 	bl	8001b7c <nRF24L01_rd>
	U8 reg_status = 0, wDat[1];

	reg_status = nRF24L01_rReg(REG_CONFIG, 1, wDat);
	if (reg_status >> 7)
	{
		return 0x10;
 8001fb6:	2310      	movs	r3, #16
	if (reg_status >> 7)
 8001fb8:	0602      	lsls	r2, r0, #24
 8001fba:	d414      	bmi.n	8001fe6 <nRF24L01_pwrDown+0x3e>
	}
	if (wDat[0] & BIT_PWR_UP)
 8001fbc:	7822      	ldrb	r2, [r4, #0]
 8001fbe:	3b0e      	subs	r3, #14
 8001fc0:	421a      	tst	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <nRF24L01_pwrDown+0x20>
	{
		wDat[0] ^= BIT_PWR_UP;
 8001fc4:	4053      	eors	r3, r2
 8001fc6:	7023      	strb	r3, [r4, #0]
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8001fc8:	0022      	movs	r2, r4
 8001fca:	2101      	movs	r1, #1
 8001fcc:	2020      	movs	r0, #32
 8001fce:	f7ff fdb7 	bl	8001b40 <nRF24L01_wrt>
	if (reg_status >> 7)
	{
		nRF24L01_dbgPrt("\r\n %s:Wrt CONFIG:stt=%X", __func__, reg_status);
		return 0x11;
	}
	return 0;
 8001fd2:	2300      	movs	r3, #0
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8001fd4:	0002      	movs	r2, r0
	if (reg_status >> 7)
 8001fd6:	0601      	lsls	r1, r0, #24
 8001fd8:	d505      	bpl.n	8001fe6 <nRF24L01_pwrDown+0x3e>
		nRF24L01_dbgPrt("\r\n %s:Wrt CONFIG:stt=%X", __func__, reg_status);
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <nRF24L01_pwrDown+0x44>)
 8001fdc:	4904      	ldr	r1, [pc, #16]	; (8001ff0 <nRF24L01_pwrDown+0x48>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <nRF24L01_pwrDown+0x4c>)
 8001fe2:	4798      	blx	r3
		return 0x11;
 8001fe4:	2311      	movs	r3, #17
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	bd16      	pop	{r1, r2, r4, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	0800410e 	.word	0x0800410e
 8001ff4:	08004167 	.word	0x08004167

08001ff8 <nRF24L01_exitRXmode>:
}
/*--------------------------------------------------------------------------
 * Brief:
 ---------------------------------------------------------------------------*/
U8 nRF24L01_exitRXmode(void)
{
 8001ff8:	b513      	push	{r0, r1, r4, lr}
	U8 wDat[1], reg_status = 0;

	/* Set CE low */
	nRF24L01_wCEpin(IO_LO);
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <nRF24L01_exitRXmode+0x40>)
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	681b      	ldr	r3, [r3, #0]
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 8002000:	ac01      	add	r4, sp, #4
	nRF24L01_wCEpin(IO_LO);
 8002002:	4798      	blx	r3
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 8002004:	0022      	movs	r2, r4
 8002006:	2101      	movs	r1, #1
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff fdb7 	bl	8001b7c <nRF24L01_rd>
	reg_status = nRF24L01_rReg(REG_CONFIG, 1, wDat);
	if (reg_status >> 7)
	{
		return 0x10;
 800200e:	2210      	movs	r2, #16
	if (reg_status >> 7)
 8002010:	0603      	lsls	r3, r0, #24
 8002012:	d40e      	bmi.n	8002032 <nRF24L01_exitRXmode+0x3a>
	}
	if (wDat[0] & BIT_PRIM_RX)
 8002014:	2301      	movs	r3, #1
 8002016:	7822      	ldrb	r2, [r4, #0]
 8002018:	421a      	tst	r2, r3
 800201a:	d001      	beq.n	8002020 <nRF24L01_exitRXmode+0x28>
	{
		wDat[0] ^= BIT_PRIM_RX;
 800201c:	4053      	eors	r3, r2
 800201e:	7023      	strb	r3, [r4, #0]
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8002020:	0022      	movs	r2, r4
 8002022:	2101      	movs	r1, #1
 8002024:	2020      	movs	r0, #32
 8002026:	f7ff fd8b 	bl	8001b40 <nRF24L01_wrt>
	}
	reg_status = nRF24L01_wReg(REG_CONFIG, 1, wDat);
	if (reg_status >> 7)
	{
		return 0x11;
 800202a:	2211      	movs	r2, #17
	if (reg_status >> 7)
 800202c:	b243      	sxtb	r3, r0
	}
	return nRF24L01_RES_OK;
 800202e:	17db      	asrs	r3, r3, #31
 8002030:	401a      	ands	r2, r3
}
 8002032:	0010      	movs	r0, r2
 8002034:	bd16      	pop	{r1, r2, r4, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	200002bc 	.word	0x200002bc

0800203c <nRF24L01_recv>:
/*--------------------------------------------------------------------------
 * Brief: Read one packet from nRF24L01
 ---------------------------------------------------------------------------*/
U8 nRF24L01_recv(U8 size, U8 *dat, U8 *rLen)
{
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8 rDat[1], wDat[1], reg_status = 0;
 800203e:	2700      	movs	r7, #0
{
 8002040:	b087      	sub	sp, #28
	U8 rDat[1], wDat[1], reg_status = 0;
 8002042:	ab04      	add	r3, sp, #16
 8002044:	1ddc      	adds	r4, r3, #7
{
 8002046:	9001      	str	r0, [sp, #4]
 8002048:	9103      	str	r1, [sp, #12]
 800204a:	9202      	str	r2, [sp, #8]
	U8 rDat[1], wDat[1], reg_status = 0;
 800204c:	7027      	strb	r7, [r4, #0]

	if (size >= 32)
	{
		// Invalid size
		return 0xFF;
 800204e:	25ff      	movs	r5, #255	; 0xff
	if (size >= 32)
 8002050:	281f      	cmp	r0, #31
 8002052:	d83b      	bhi.n	80020cc <nRF24L01_recv+0x90>
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 8002054:	ae05      	add	r6, sp, #20
 8002056:	0032      	movs	r2, r6
 8002058:	2101      	movs	r1, #1
 800205a:	0038      	movs	r0, r7
 800205c:	f7ff fd8e 	bl	8001b7c <nRF24L01_rd>
	}
	reg_status = nRF24L01_rReg(REG_CONFIG, 1, wDat);
 8002060:	7020      	strb	r0, [r4, #0]
	if (reg_status >> 7)
 8002062:	b240      	sxtb	r0, r0
	{
		return 0x10;
 8002064:	3def      	subs	r5, #239	; 0xef
	if (reg_status >> 7)
 8002066:	42b8      	cmp	r0, r7
 8002068:	db30      	blt.n	80020cc <nRF24L01_recv+0x90>
	}
	wDat[0] |= BIT_PRIM_RX | BIT_PWR_UP;
 800206a:	2203      	movs	r2, #3
 800206c:	7833      	ldrb	r3, [r6, #0]
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 800206e:	2101      	movs	r1, #1
	wDat[0] |= BIT_PRIM_RX | BIT_PWR_UP;
 8002070:	4313      	orrs	r3, r2
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8002072:	2020      	movs	r0, #32
 8002074:	0032      	movs	r2, r6
	wDat[0] |= BIT_PRIM_RX | BIT_PWR_UP;
 8002076:	7033      	strb	r3, [r6, #0]
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8002078:	f7ff fd62 	bl	8001b40 <nRF24L01_wrt>
	reg_status = nRF24L01_wReg(REG_CONFIG, 1, wDat);
 800207c:	7020      	strb	r0, [r4, #0]
	if (reg_status >> 7)
 800207e:	b240      	sxtb	r0, r0
	{
		return 0x11;
 8002080:	3501      	adds	r5, #1
	if (reg_status >> 7)
 8002082:	42b8      	cmp	r0, r7
 8002084:	db22      	blt.n	80020cc <nRF24L01_recv+0x90>
	}
	wDat[0] = size;
 8002086:	466b      	mov	r3, sp
 8002088:	791b      	ldrb	r3, [r3, #4]
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 800208a:	0032      	movs	r2, r6
 800208c:	2101      	movs	r1, #1
 800208e:	2032      	movs	r0, #50	; 0x32
	wDat[0] = size;
 8002090:	7033      	strb	r3, [r6, #0]
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 8002092:	f7ff fd55 	bl	8001b40 <nRF24L01_wrt>
	reg_status = nRF24L01_wReg(REG_RX_PW_P1, 1, wDat);
 8002096:	7020      	strb	r0, [r4, #0]
	if (reg_status >> 7)
 8002098:	b240      	sxtb	r0, r0
	{
		return 0x12;
 800209a:	3501      	adds	r5, #1
	if (reg_status >> 7)
 800209c:	42b8      	cmp	r0, r7
 800209e:	db15      	blt.n	80020cc <nRF24L01_recv+0x90>
	}
	nRF24L01_wCEpin(IO_HI);
 80020a0:	4b31      	ldr	r3, [pc, #196]	; (8002168 <nRF24L01_recv+0x12c>)
 80020a2:	2001      	movs	r0, #1
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4798      	blx	r3
	*rLen = 0;
 80020a8:	9b02      	ldr	r3, [sp, #8]
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 80020aa:	aa04      	add	r2, sp, #16
	*rLen = 0;
 80020ac:	701f      	strb	r7, [r3, #0]
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 80020ae:	2101      	movs	r1, #1
 80020b0:	2017      	movs	r0, #23
 80020b2:	f7ff fd63 	bl	8001b7c <nRF24L01_rd>
	reg_status = nRF24L01_rReg(REG_FIFO_STATUS, 1, rDat);
	if (reg_status >> 7)
 80020b6:	b243      	sxtb	r3, r0
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 80020b8:	0002      	movs	r2, r0
	reg_status = nRF24L01_rReg(REG_FIFO_STATUS, 1, rDat);
 80020ba:	7020      	strb	r0, [r4, #0]
	if (reg_status >> 7)
 80020bc:	42bb      	cmp	r3, r7
 80020be:	da08      	bge.n	80020d2 <nRF24L01_recv+0x96>
	{
		nRF24L01_dbgPrt("\r\n %s:Rd REG_FIFO_STATUS:stt=%X", __func__, reg_status);
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <nRF24L01_recv+0x130>)
 80020c2:	492b      	ldr	r1, [pc, #172]	; (8002170 <nRF24L01_recv+0x134>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	482b      	ldr	r0, [pc, #172]	; (8002174 <nRF24L01_recv+0x138>)
 80020c8:	4798      	blx	r3
		return 3;
 80020ca:	3d0f      	subs	r5, #15
	}
	nRF24L01_wReg(REG_STATUS, 1, &reg_status);
	//nRF24L01_rReg(REG_STATUS, 1, &reg_status);
	//DBG_print("\r\n %s:reg_status=%X", __func__, reg_status);
	return nRF24L01_RES_OK;
}
 80020cc:	0028      	movs	r0, r5
 80020ce:	b007      	add	sp, #28
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rDat[0] & BIT_RX_EMPTY)
 80020d2:	2601      	movs	r6, #1
 80020d4:	ab04      	add	r3, sp, #16
 80020d6:	781b      	ldrb	r3, [r3, #0]
		return nRF24L01_RES_OK;
 80020d8:	003d      	movs	r5, r7
	if (rDat[0] & BIT_RX_EMPTY)
 80020da:	4233      	tst	r3, r6
 80020dc:	d1f6      	bne.n	80020cc <nRF24L01_recv+0x90>
	reg_status = nRF24L01_rd(CMD_R_RX_PL_WID, 1, rLen);
 80020de:	9a02      	ldr	r2, [sp, #8]
 80020e0:	0031      	movs	r1, r6
 80020e2:	2060      	movs	r0, #96	; 0x60
 80020e4:	f7ff fd4a 	bl	8001b7c <nRF24L01_rd>
	if (reg_status >> 7)
 80020e8:	b243      	sxtb	r3, r0
	reg_status = nRF24L01_rd(CMD_R_RX_PL_WID, 1, rLen);
 80020ea:	0002      	movs	r2, r0
 80020ec:	7020      	strb	r0, [r4, #0]
	if (reg_status >> 7)
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da06      	bge.n	8002100 <nRF24L01_recv+0xc4>
		nRF24L01_dbgPrt("\r\n %s:Rd CMD_R_RX_PAYLOAD:stt=%X", __func__, reg_status);
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <nRF24L01_recv+0x130>)
 80020f4:	491e      	ldr	r1, [pc, #120]	; (8002170 <nRF24L01_recv+0x134>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	481f      	ldr	r0, [pc, #124]	; (8002178 <nRF24L01_recv+0x13c>)
 80020fa:	4798      	blx	r3
		return 4;
 80020fc:	2504      	movs	r5, #4
 80020fe:	e7e5      	b.n	80020cc <nRF24L01_recv+0x90>
	reg_status = nRF24L01_rd(CMD_R_RX_PAYLOAD, size, dat);
 8002100:	466b      	mov	r3, sp
 8002102:	9a03      	ldr	r2, [sp, #12]
 8002104:	8899      	ldrh	r1, [r3, #4]
 8002106:	2061      	movs	r0, #97	; 0x61
 8002108:	f7ff fd38 	bl	8001b7c <nRF24L01_rd>
	if (reg_status >> 7)
 800210c:	b243      	sxtb	r3, r0
	reg_status = nRF24L01_rd(CMD_R_RX_PAYLOAD, size, dat);
 800210e:	0002      	movs	r2, r0
 8002110:	7020      	strb	r0, [r4, #0]
	if (reg_status >> 7)
 8002112:	2b00      	cmp	r3, #0
 8002114:	da06      	bge.n	8002124 <nRF24L01_recv+0xe8>
		nRF24L01_dbgPrt("\r\n %s:Rd CMD_R_RX_PAYLOAD:stt=%X", __func__, reg_status);
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <nRF24L01_recv+0x130>)
 8002118:	4915      	ldr	r1, [pc, #84]	; (8002170 <nRF24L01_recv+0x134>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4816      	ldr	r0, [pc, #88]	; (8002178 <nRF24L01_recv+0x13c>)
 800211e:	4798      	blx	r3
		return 5;
 8002120:	2505      	movs	r5, #5
 8002122:	e7d3      	b.n	80020cc <nRF24L01_recv+0x90>
	nRF24L01_wrt(CMD_FLUSH_RX, 0, NULL);/* Empty RX register */
 8002124:	003a      	movs	r2, r7
 8002126:	0039      	movs	r1, r7
 8002128:	20e2      	movs	r0, #226	; 0xe2
 800212a:	f7ff fd09 	bl	8001b40 <nRF24L01_wrt>
	if (reg_status >> 7)
 800212e:	7822      	ldrb	r2, [r4, #0]
 8002130:	b253      	sxtb	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	da06      	bge.n	8002144 <nRF24L01_recv+0x108>
		nRF24L01_dbgPrt("\r\n %s:Rd CMD_FLUSH_RX:stt=%X", __func__, reg_status);
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <nRF24L01_recv+0x130>)
 8002138:	490d      	ldr	r1, [pc, #52]	; (8002170 <nRF24L01_recv+0x134>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	480f      	ldr	r0, [pc, #60]	; (800217c <nRF24L01_recv+0x140>)
 800213e:	4798      	blx	r3
		return 6;
 8002140:	2506      	movs	r5, #6
 8002142:	e7c3      	b.n	80020cc <nRF24L01_recv+0x90>
	return nRF24L01_rd(CMD_R_REGISTER(reg), rSize, rDat);
 8002144:	0022      	movs	r2, r4
 8002146:	0031      	movs	r1, r6
 8002148:	2007      	movs	r0, #7
 800214a:	f7ff fd17 	bl	8001b7c <nRF24L01_rd>
 800214e:	2340      	movs	r3, #64	; 0x40
	if (reg_status & BIT_RX_DR)
 8002150:	7821      	ldrb	r1, [r4, #0]
 8002152:	0022      	movs	r2, r4
 8002154:	4219      	tst	r1, r3
 8002156:	d001      	beq.n	800215c <nRF24L01_recv+0x120>
		reg_status ^= BIT_RX_DR;
 8002158:	404b      	eors	r3, r1
 800215a:	7023      	strb	r3, [r4, #0]
	return nRF24L01_wrt(CMD_W_REGISTER(reg), wLen, wDat);
 800215c:	2101      	movs	r1, #1
 800215e:	2027      	movs	r0, #39	; 0x27
 8002160:	f7ff fcee 	bl	8001b40 <nRF24L01_wrt>
	return nRF24L01_RES_OK;
 8002164:	2500      	movs	r5, #0
 8002166:	e7b1      	b.n	80020cc <nRF24L01_recv+0x90>
 8002168:	200002bc 	.word	0x200002bc
 800216c:	20000000 	.word	0x20000000
 8002170:	0800411f 	.word	0x0800411f
 8002174:	08004212 	.word	0x08004212
 8002178:	0800417f 	.word	0x0800417f
 800217c:	080041a0 	.word	0x080041a0

08002180 <DBG_print_null>:
 * Brief:
 *--------------------------------------------*/
void DBG_print_null(U8 c)
{
	return;
}
 8002180:	4770      	bx	lr
	...

08002184 <DBG_print_c>:
}
/*---------------------------------------------
 * Brief: send string
 *--------------------------------------------*/
void DBG_print_c(U8 c)
{
 8002184:	b510      	push	{r4, lr}
	DBG_printcCB(c);
 8002186:	4b02      	ldr	r3, [pc, #8]	; (8002190 <DBG_print_c+0xc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4798      	blx	r3
}
 800218c:	bd10      	pop	{r4, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	20000004 	.word	0x20000004

08002194 <DBG_print_u>:
}
/*---------------------------------------------
 * Brief: send number
 *--------------------------------------------*/
void DBG_print_u(U32 num, U8 len)
{
 8002194:	2300      	movs	r3, #0
 8002196:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8 s[11];
	U8 l = 0, n = 0, i = 0;

	for (i = 0; i <= 10; i++)
	{
		s[i] = 0;
 8002198:	001a      	movs	r2, r3
{
 800219a:	0005      	movs	r5, r0
 800219c:	b087      	sub	sp, #28
 800219e:	9100      	str	r1, [sp, #0]
		s[i] = 0;
 80021a0:	ae03      	add	r6, sp, #12
 80021a2:	559a      	strb	r2, [r3, r6]
 80021a4:	3301      	adds	r3, #1
	for (i = 0; i <= 10; i++)
 80021a6:	2b0b      	cmp	r3, #11
 80021a8:	d1fb      	bne.n	80021a2 <DBG_print_u+0xe>
 80021aa:	2400      	movs	r4, #0
	}
	for (i = 0; i <= 10; i++)
	{
		n = num % 10;
 80021ac:	0028      	movs	r0, r5
 80021ae:	210a      	movs	r1, #10
 80021b0:	f7fe f844 	bl	800023c <__aeabi_uidivmod>
		num /= 10;
 80021b4:	0028      	movs	r0, r5
		n = num % 10;
 80021b6:	b2cb      	uxtb	r3, r1
		num /= 10;
 80021b8:	210a      	movs	r1, #10
		n = num % 10;
 80021ba:	9301      	str	r3, [sp, #4]
		num /= 10;
 80021bc:	f7fd ffb8 	bl	8000130 <__udivsi3>
		s[l++] = n + '0';
 80021c0:	9901      	ldr	r1, [sp, #4]
 80021c2:	1c63      	adds	r3, r4, #1
 80021c4:	3130      	adds	r1, #48	; 0x30
		num /= 10;
 80021c6:	0005      	movs	r5, r0
 80021c8:	b2df      	uxtb	r7, r3
		s[l++] = n + '0';
 80021ca:	5531      	strb	r1, [r6, r4]
		if (!num)
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d003      	beq.n	80021d8 <DBG_print_u+0x44>
 80021d0:	001c      	movs	r4, r3
	for (i = 0; i <= 10; i++)
 80021d2:	2b0b      	cmp	r3, #11
 80021d4:	d1ea      	bne.n	80021ac <DBG_print_u+0x18>
 80021d6:	001f      	movs	r7, r3
		{
			break;
		}
	}

	if (len > l)
 80021d8:	9b00      	ldr	r3, [sp, #0]
 80021da:	2400      	movs	r4, #0
 80021dc:	429f      	cmp	r7, r3
 80021de:	d311      	bcc.n	8002204 <DBG_print_u+0x70>
 80021e0:	2400      	movs	r4, #0
		}
	}
	i = 10;
	while (1)
	{
		if (s[i])
 80021e2:	1933      	adds	r3, r6, r4
 80021e4:	7a98      	ldrb	r0, [r3, #10]
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d001      	beq.n	80021ee <DBG_print_u+0x5a>
		{
			DBG_print_c(s[i]);
 80021ea:	f7ff ffcb 	bl	8002184 <DBG_print_c>
 80021ee:	3c01      	subs	r4, #1
		}
		if (!i)
 80021f0:	0023      	movs	r3, r4
 80021f2:	330b      	adds	r3, #11
 80021f4:	d1f5      	bne.n	80021e2 <DBG_print_u+0x4e>
		{
			break;
		}
		i--;
	}
}
 80021f6:	b007      	add	sp, #28
 80021f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DBG_print_c('0');
 80021fa:	2030      	movs	r0, #48	; 0x30
 80021fc:	f7ff ffc2 	bl	8002184 <DBG_print_c>
		for (i = 0; i < (len - l); i++)
 8002200:	3401      	adds	r4, #1
 8002202:	b2e4      	uxtb	r4, r4
 8002204:	9b00      	ldr	r3, [sp, #0]
 8002206:	1bdb      	subs	r3, r3, r7
 8002208:	429c      	cmp	r4, r3
 800220a:	dbf6      	blt.n	80021fa <DBG_print_u+0x66>
 800220c:	e7e8      	b.n	80021e0 <DBG_print_u+0x4c>

0800220e <DBG_print_h>:
/*---------------------------------------------
 * Brief: send hex number
 *--------------------------------------------*/
void DBG_print_h(U8 upcase, U32 hexnum, U8 len)
{
 800220e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002210:	0007      	movs	r7, r0
 8002212:	b085      	sub	sp, #20
 8002214:	000d      	movs	r5, r1
 8002216:	0016      	movs	r6, r2
	U8 s[9], i = 0, tmp = 0, l = 0;

	if (!hexnum)
 8002218:	2900      	cmp	r1, #0
 800221a:	d105      	bne.n	8002228 <DBG_print_h+0x1a>
	{
		DBG_print_u(0, len);
 800221c:	0011      	movs	r1, r2
 800221e:	0028      	movs	r0, r5
 8002220:	f7ff ffb8 	bl	8002194 <DBG_print_u>
		{
			break;
		}
		i--;
	}
}
 8002224:	b005      	add	sp, #20
 8002226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(s, 0, 9);
 8002228:	ac01      	add	r4, sp, #4
 800222a:	2209      	movs	r2, #9
 800222c:	2100      	movs	r1, #0
 800222e:	0020      	movs	r0, r4
 8002230:	f001 fa38 	bl	80036a4 <memset>
 8002234:	2261      	movs	r2, #97	; 0x61
 8002236:	2f00      	cmp	r7, #0
 8002238:	d000      	beq.n	800223c <DBG_print_h+0x2e>
 800223a:	2241      	movs	r2, #65	; 0x41
 800223c:	2100      	movs	r1, #0
		tmp = hexnum % 16;
 800223e:	200f      	movs	r0, #15
 8002240:	b2d2      	uxtb	r2, r2
			s[i] = tmp - 10 + ((upcase) ? 'A' : 'a');
 8002242:	3a0a      	subs	r2, #10
		tmp = hexnum % 16;
 8002244:	002b      	movs	r3, r5
 8002246:	4003      	ands	r3, r0
		if ((tmp >= 0) && (tmp <= 9))
 8002248:	2b09      	cmp	r3, #9
 800224a:	d81a      	bhi.n	8002282 <DBG_print_h+0x74>
			s[i] = tmp + '0';
 800224c:	3330      	adds	r3, #48	; 0x30
			s[i] = tmp - 10 + ((upcase) ? 'A' : 'a');
 800224e:	5463      	strb	r3, [r4, r1]
 8002250:	1c4b      	adds	r3, r1, #1
		hexnum /= 16;
 8002252:	092d      	lsrs	r5, r5, #4
 8002254:	b2df      	uxtb	r7, r3
	for (i = 0; i < 8; i++)
 8002256:	2907      	cmp	r1, #7
 8002258:	d101      	bne.n	800225e <DBG_print_h+0x50>
 800225a:	2708      	movs	r7, #8
 800225c:	e002      	b.n	8002264 <DBG_print_h+0x56>
 800225e:	0019      	movs	r1, r3
		if (!hexnum)
 8002260:	2d00      	cmp	r5, #0
 8002262:	d1ef      	bne.n	8002244 <DBG_print_h+0x36>
	if (len > l)
 8002264:	2500      	movs	r5, #0
 8002266:	42be      	cmp	r6, r7
 8002268:	d812      	bhi.n	8002290 <DBG_print_h+0x82>
 800226a:	466b      	mov	r3, sp
 800226c:	19e4      	adds	r4, r4, r7
 800226e:	1cdd      	adds	r5, r3, #3
		if (s[i])
 8002270:	7820      	ldrb	r0, [r4, #0]
 8002272:	2800      	cmp	r0, #0
 8002274:	d001      	beq.n	800227a <DBG_print_h+0x6c>
			DBG_print_c(s[i]);
 8002276:	f7ff ff85 	bl	8002184 <DBG_print_c>
 800227a:	3c01      	subs	r4, #1
		if (!i)
 800227c:	42ac      	cmp	r4, r5
 800227e:	d1f7      	bne.n	8002270 <DBG_print_h+0x62>
 8002280:	e7d0      	b.n	8002224 <DBG_print_h+0x16>
			s[i] = tmp - 10 + ((upcase) ? 'A' : 'a');
 8002282:	189b      	adds	r3, r3, r2
 8002284:	e7e3      	b.n	800224e <DBG_print_h+0x40>
			DBG_print_c('0');
 8002286:	2030      	movs	r0, #48	; 0x30
 8002288:	f7ff ff7c 	bl	8002184 <DBG_print_c>
		for (i = 0; i < (len - l); i++)
 800228c:	3501      	adds	r5, #1
 800228e:	b2ed      	uxtb	r5, r5
 8002290:	1bf3      	subs	r3, r6, r7
 8002292:	429d      	cmp	r5, r3
 8002294:	dbf7      	blt.n	8002286 <DBG_print_h+0x78>
 8002296:	e7e8      	b.n	800226a <DBG_print_h+0x5c>

08002298 <DBG_print_hs>:
/*---------------------------------------------
 * Brief: print hex string
 *--------------------------------------------*/
void DBG_print_hs(U8 upcase, const U8 *buf, U16 len )
{
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	0007      	movs	r7, r0
 800229c:	000d      	movs	r5, r1
 800229e:	0016      	movs	r6, r2
 80022a0:	2400      	movs	r4, #0
	U16 i = 0;

	if (buf == NULL)
 80022a2:	2900      	cmp	r1, #0
 80022a4:	d105      	bne.n	80022b2 <DBG_print_hs+0x1a>
	{
		DBG_print_c('?');
 80022a6:	203f      	movs	r0, #63	; 0x3f
 80022a8:	f7ff ff6c 	bl	8002184 <DBG_print_c>
				break;
			}

		}
	}
}
 80022ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (i >= len)
 80022ae:	42b4      	cmp	r4, r6
 80022b0:	d2fc      	bcs.n	80022ac <DBG_print_hs+0x14>
		DBG_print_h(upcase, *buf, 2);
 80022b2:	7829      	ldrb	r1, [r5, #0]
 80022b4:	2202      	movs	r2, #2
 80022b6:	0038      	movs	r0, r7
		i++;
 80022b8:	3401      	adds	r4, #1
		DBG_print_h(upcase, *buf, 2);
 80022ba:	f7ff ffa8 	bl	800220e <DBG_print_h>
		i++;
 80022be:	b2a4      	uxth	r4, r4
		*buf++;
 80022c0:	3501      	adds	r5, #1
		if (!len)
 80022c2:	2e00      	cmp	r6, #0
 80022c4:	d1f3      	bne.n	80022ae <DBG_print_hs+0x16>
			if (*buf == 0)
 80022c6:	782b      	ldrb	r3, [r5, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ef      	beq.n	80022ac <DBG_print_hs+0x14>
			else if (i >= 4096)
 80022cc:	4b01      	ldr	r3, [pc, #4]	; (80022d4 <DBG_print_hs+0x3c>)
 80022ce:	429c      	cmp	r4, r3
 80022d0:	d9ef      	bls.n	80022b2 <DBG_print_hs+0x1a>
 80022d2:	e7eb      	b.n	80022ac <DBG_print_hs+0x14>
 80022d4:	00000fff 	.word	0x00000fff

080022d8 <DBG_setup>:
	while (DBGbusy);
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <DBG_setup+0x20>)
 80022da:	781a      	ldrb	r2, [r3, #0]
 80022dc:	2a00      	cmp	r2, #0
 80022de:	d1fc      	bne.n	80022da <DBG_setup+0x2>
	DBGbusy = 1;
 80022e0:	3201      	adds	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	4a05      	ldr	r2, [pc, #20]	; (80022fc <DBG_setup+0x24>)
	if (cb != NULL)
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d003      	beq.n	80022f2 <DBG_setup+0x1a>
		DBG_printcCB = cb;
 80022ea:	6010      	str	r0, [r2, #0]
	DBGbusy = 0;
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
}
 80022f0:	4770      	bx	lr
		DBG_printcCB = DBG_print_null;
 80022f2:	4903      	ldr	r1, [pc, #12]	; (8002300 <DBG_setup+0x28>)
 80022f4:	6011      	str	r1, [r2, #0]
 80022f6:	e7f9      	b.n	80022ec <DBG_setup+0x14>
 80022f8:	200002c8 	.word	0x200002c8
 80022fc:	20000004 	.word	0x20000004
 8002300:	08002181 	.word	0x08002181

08002304 <DBG_print>:
 * + d: signed integer.
 * + u: unsigned integer.
 * + x: hex number.
 *--------------------------------------------*/
void DBG_print(const U8 *s, ...)
{
 8002304:	b40f      	push	{r0, r1, r2, r3}
 8002306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002308:	b089      	sub	sp, #36	; 0x24
 800230a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	va_list vl;
	U32 timepass = 0;
	U8 len = 0;

	while (DBGbusy && (timepass++ < 1000000));
 800230c:	4b7e      	ldr	r3, [pc, #504]	; (8002508 <DBG_print+0x204>)
 800230e:	4a7f      	ldr	r2, [pc, #508]	; (800250c <DBG_print+0x208>)
 8002310:	7811      	ldrb	r1, [r2, #0]
 8002312:	2900      	cmp	r1, #0
 8002314:	d002      	beq.n	800231c <DBG_print+0x18>
 8002316:	3b01      	subs	r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f9      	bne.n	8002310 <DBG_print+0xc>
	DBGbusy = 1;
 800231c:	2301      	movs	r3, #1
	U8 len = 0;
 800231e:	2400      	movs	r4, #0
	DBGbusy = 1;
 8002320:	7013      	strb	r3, [r2, #0]
	va_start(vl, s);
 8002322:	aa0f      	add	r2, sp, #60	; 0x3c
 8002324:	9205      	str	r2, [sp, #20]
	U8 step = 0, skipStep = 1, db_s[6];
 8002326:	9301      	str	r3, [sp, #4]
	//va_arg(vl, u8*);
	while(*s)
 8002328:	782b      	ldrb	r3, [r5, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <DBG_print+0x38>
		DBG_PRINT_NORMAL://
		DBG_print_c(*s);
		*s++;
	}
	va_end(vl);
	DBGbusy = 0;
 800232e:	4a77      	ldr	r2, [pc, #476]	; (800250c <DBG_print+0x208>)
 8002330:	7013      	strb	r3, [r2, #0]
}
 8002332:	b009      	add	sp, #36	; 0x24
 8002334:	bcf0      	pop	{r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	b004      	add	sp, #16
 800233a:	4718      	bx	r3
		if(*s == '%')
 800233c:	2b25      	cmp	r3, #37	; 0x25
 800233e:	d113      	bne.n	8002368 <DBG_print+0x64>
			if ((*s >= '0') && (*s <= '9'))
 8002340:	786b      	ldrb	r3, [r5, #1]
 8002342:	3b30      	subs	r3, #48	; 0x30
 8002344:	b2da      	uxtb	r2, r3
 8002346:	2a09      	cmp	r2, #9
 8002348:	d912      	bls.n	8002370 <DBG_print+0x6c>
			*s++;
 800234a:	1c6b      	adds	r3, r5, #1
				*s++;
 800234c:	9300      	str	r3, [sp, #0]
			switch(*s)
 800234e:	9b00      	ldr	r3, [sp, #0]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b66      	cmp	r3, #102	; 0x66
 8002354:	d06d      	beq.n	8002432 <DBG_print+0x12e>
 8002356:	d826      	bhi.n	80023a6 <DBG_print+0xa2>
 8002358:	2b58      	cmp	r3, #88	; 0x58
 800235a:	d063      	beq.n	8002424 <DBG_print+0x120>
 800235c:	d810      	bhi.n	8002380 <DBG_print+0x7c>
 800235e:	2b48      	cmp	r3, #72	; 0x48
 8002360:	d100      	bne.n	8002364 <DBG_print+0x60>
 8002362:	e0ca      	b.n	80024fa <DBG_print+0x1f6>
					*s--;
 8002364:	9d00      	ldr	r5, [sp, #0]
 8002366:	3d01      	subs	r5, #1
		DBG_print_c(*s);
 8002368:	7828      	ldrb	r0, [r5, #0]
 800236a:	f7ff ff0b 	bl	8002184 <DBG_print_c>
 800236e:	e041      	b.n	80023f4 <DBG_print+0xf0>
				len = (*s - '0') * 10;
 8002370:	240a      	movs	r4, #10
 8002372:	435c      	muls	r4, r3
				len += *s - '0';
 8002374:	78ab      	ldrb	r3, [r5, #2]
 8002376:	3b30      	subs	r3, #48	; 0x30
 8002378:	18e4      	adds	r4, r4, r3
 800237a:	b2e4      	uxtb	r4, r4
				*s++;
 800237c:	1ceb      	adds	r3, r5, #3
 800237e:	e7e5      	b.n	800234c <DBG_print+0x48>
			switch(*s)
 8002380:	2b63      	cmp	r3, #99	; 0x63
 8002382:	d043      	beq.n	800240c <DBG_print+0x108>
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d1ed      	bne.n	8002364 <DBG_print+0x60>
					DBG_print_d(va_arg(vl, int32_t), len);
 8002388:	9b05      	ldr	r3, [sp, #20]
 800238a:	681d      	ldr	r5, [r3, #0]
 800238c:	1d1a      	adds	r2, r3, #4
 800238e:	9205      	str	r2, [sp, #20]
	if (num < 0)
 8002390:	2d00      	cmp	r5, #0
 8002392:	da03      	bge.n	800239c <DBG_print+0x98>
		DBG_print_c('-');
 8002394:	202d      	movs	r0, #45	; 0x2d
 8002396:	f7ff fef5 	bl	8002184 <DBG_print_c>
		num = -num;
 800239a:	426d      	negs	r5, r5
	DBG_print_u(num, len);
 800239c:	0021      	movs	r1, r4
 800239e:	0028      	movs	r0, r5
					DBG_print_u(va_arg(vl, U32), len);
 80023a0:	f7ff fef8 	bl	8002194 <DBG_print_u>
					break;
 80023a4:	e025      	b.n	80023f2 <DBG_print+0xee>
			switch(*s)
 80023a6:	2b73      	cmp	r3, #115	; 0x73
 80023a8:	d018      	beq.n	80023dc <DBG_print+0xd8>
 80023aa:	d80a      	bhi.n	80023c2 <DBG_print+0xbe>
 80023ac:	2b68      	cmp	r3, #104	; 0x68
 80023ae:	d1d9      	bne.n	8002364 <DBG_print+0x60>
					DBG_print_hs(0, va_arg(vl, U8*), len);
 80023b0:	2000      	movs	r0, #0
 80023b2:	9b05      	ldr	r3, [sp, #20]
 80023b4:	1d1a      	adds	r2, r3, #4
 80023b6:	6819      	ldr	r1, [r3, #0]
 80023b8:	9205      	str	r2, [sp, #20]
 80023ba:	b2a2      	uxth	r2, r4
					DBG_print_hs(1, va_arg(vl, U8*), len);
 80023bc:	f7ff ff6c 	bl	8002298 <DBG_print_hs>
					break;
 80023c0:	e017      	b.n	80023f2 <DBG_print+0xee>
			switch(*s)
 80023c2:	2b75      	cmp	r3, #117	; 0x75
 80023c4:	d028      	beq.n	8002418 <DBG_print+0x114>
 80023c6:	2b78      	cmp	r3, #120	; 0x78
 80023c8:	d1cc      	bne.n	8002364 <DBG_print+0x60>
					DBG_print_h(0, va_arg(vl, U32), len);
 80023ca:	9b05      	ldr	r3, [sp, #20]
 80023cc:	2000      	movs	r0, #0
 80023ce:	1d1a      	adds	r2, r3, #4
 80023d0:	9205      	str	r2, [sp, #20]
 80023d2:	0022      	movs	r2, r4
 80023d4:	6819      	ldr	r1, [r3, #0]
					DBG_print_h(1, va_arg(vl, U32), len);
 80023d6:	f7ff ff1a 	bl	800220e <DBG_print_h>
					break;
 80023da:	e00a      	b.n	80023f2 <DBG_print+0xee>
					DBG_print_s(va_arg(vl, U8*), 0);
 80023dc:	9b05      	ldr	r3, [sp, #20]
 80023de:	681d      	ldr	r5, [r3, #0]
 80023e0:	1d1a      	adds	r2, r3, #4
 80023e2:	9205      	str	r2, [sp, #20]
	if (buf == NULL)
 80023e4:	2d00      	cmp	r5, #0
 80023e6:	d007      	beq.n	80023f8 <DBG_print+0xf4>
 80023e8:	4b49      	ldr	r3, [pc, #292]	; (8002510 <DBG_print+0x20c>)
 80023ea:	18ee      	adds	r6, r5, r3
	while (*buf)
 80023ec:	7828      	ldrb	r0, [r5, #0]
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d106      	bne.n	8002400 <DBG_print+0xfc>
			*s++;
 80023f2:	9d00      	ldr	r5, [sp, #0]
		*s++;
 80023f4:	3501      	adds	r5, #1
 80023f6:	e797      	b.n	8002328 <DBG_print+0x24>
		DBG_print_c('?');
 80023f8:	203f      	movs	r0, #63	; 0x3f
					DBG_print_c(va_arg(vl, U8*));
 80023fa:	f7ff fec3 	bl	8002184 <DBG_print_c>
					break;
 80023fe:	e7f8      	b.n	80023f2 <DBG_print+0xee>
		DBG_print_c(*buf);
 8002400:	f7ff fec0 	bl	8002184 <DBG_print_c>
		else if (i >= 4096)
 8002404:	42b5      	cmp	r5, r6
 8002406:	d0f4      	beq.n	80023f2 <DBG_print+0xee>
		*buf++;
 8002408:	3501      	adds	r5, #1
 800240a:	e7ef      	b.n	80023ec <DBG_print+0xe8>
					DBG_print_c(va_arg(vl, U8*));
 800240c:	9b05      	ldr	r3, [sp, #20]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	1d1a      	adds	r2, r3, #4
 8002412:	9205      	str	r2, [sp, #20]
 8002414:	b2c0      	uxtb	r0, r0
 8002416:	e7f0      	b.n	80023fa <DBG_print+0xf6>
					DBG_print_u(va_arg(vl, U32), len);
 8002418:	9b05      	ldr	r3, [sp, #20]
 800241a:	0021      	movs	r1, r4
 800241c:	1d1a      	adds	r2, r3, #4
 800241e:	9205      	str	r2, [sp, #20]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	e7bd      	b.n	80023a0 <DBG_print+0x9c>
					DBG_print_h(1, va_arg(vl, U32), len);
 8002424:	9b05      	ldr	r3, [sp, #20]
 8002426:	9801      	ldr	r0, [sp, #4]
 8002428:	1d1a      	adds	r2, r3, #4
 800242a:	9205      	str	r2, [sp, #20]
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	0022      	movs	r2, r4
 8002430:	e7d1      	b.n	80023d6 <DBG_print+0xd2>
					DBG_print_f(va_arg(vl, double));
 8002432:	2207      	movs	r2, #7
 8002434:	9b05      	ldr	r3, [sp, #20]
 8002436:	3307      	adds	r3, #7
 8002438:	4393      	bics	r3, r2
 800243a:	001a      	movs	r2, r3
 800243c:	681e      	ldr	r6, [r3, #0]
 800243e:	685f      	ldr	r7, [r3, #4]
 8002440:	3208      	adds	r2, #8
	integer = (int)dbnum;
 8002442:	0039      	movs	r1, r7
 8002444:	0030      	movs	r0, r6
					DBG_print_f(va_arg(vl, double));
 8002446:	9205      	str	r2, [sp, #20]
	integer = (int)dbnum;
 8002448:	f7fe febc 	bl	80011c4 <__aeabi_d2iz>
 800244c:	0005      	movs	r5, r0
	dbnum -= integer;
 800244e:	f7fe feed 	bl	800122c <__aeabi_i2d>
 8002452:	0002      	movs	r2, r0
 8002454:	000b      	movs	r3, r1
 8002456:	0030      	movs	r0, r6
 8002458:	0039      	movs	r1, r7
 800245a:	f7fe fb9d 	bl	8000b98 <__aeabi_dsub>
 800245e:	0006      	movs	r6, r0
 8002460:	000f      	movs	r7, r1
	if (num < 0)
 8002462:	2d00      	cmp	r5, #0
 8002464:	da03      	bge.n	800246e <DBG_print+0x16a>
		DBG_print_c('-');
 8002466:	202d      	movs	r0, #45	; 0x2d
 8002468:	f7ff fe8c 	bl	8002184 <DBG_print_c>
		num = -num;
 800246c:	426d      	negs	r5, r5
	DBG_print_u(num, len);
 800246e:	0028      	movs	r0, r5
	DBG_print_c('.');
 8002470:	2500      	movs	r5, #0
	DBG_print_u(num, len);
 8002472:	2100      	movs	r1, #0
 8002474:	f7ff fe8e 	bl	8002194 <DBG_print_u>
	DBG_print_c('.');
 8002478:	202e      	movs	r0, #46	; 0x2e
 800247a:	f7ff fe83 	bl	8002184 <DBG_print_c>
	U8 step = 0, skipStep = 1, db_s[6];
 800247e:	9b01      	ldr	r3, [sp, #4]
 8002480:	9303      	str	r3, [sp, #12]
		dbnum *= 10;
 8002482:	2200      	movs	r2, #0
 8002484:	4b23      	ldr	r3, [pc, #140]	; (8002514 <DBG_print+0x210>)
 8002486:	0030      	movs	r0, r6
 8002488:	0039      	movs	r1, r7
 800248a:	f7fe f905 	bl	8000698 <__aeabi_dmul>
 800248e:	000f      	movs	r7, r1
 8002490:	0006      	movs	r6, r0
		integer = (int)dbnum;
 8002492:	f7fe fe97 	bl	80011c4 <__aeabi_d2iz>
 8002496:	9002      	str	r0, [sp, #8]
		dbnum -= integer;
 8002498:	f7fe fec8 	bl	800122c <__aeabi_i2d>
 800249c:	0002      	movs	r2, r0
 800249e:	000b      	movs	r3, r1
 80024a0:	0030      	movs	r0, r6
 80024a2:	0039      	movs	r1, r7
 80024a4:	f7fe fb78 	bl	8000b98 <__aeabi_dsub>
		if ((dbnum == 0) && step)
 80024a8:	2200      	movs	r2, #0
 80024aa:	2300      	movs	r3, #0
		dbnum -= integer;
 80024ac:	0006      	movs	r6, r0
 80024ae:	000f      	movs	r7, r1
		if ((dbnum == 0) && step)
 80024b0:	f7fd ffc4 	bl	800043c <__aeabi_dcmpeq>
 80024b4:	2800      	cmp	r0, #0
 80024b6:	d00e      	beq.n	80024d6 <DBG_print+0x1d2>
 80024b8:	2d00      	cmp	r5, #0
 80024ba:	d00c      	beq.n	80024d6 <DBG_print+0x1d2>
	U8 step = 0, skipStep = 1, db_s[6];
 80024bc:	2500      	movs	r5, #0
		DBG_print_c(db_s[step]);
 80024be:	2208      	movs	r2, #8
 80024c0:	ab04      	add	r3, sp, #16
 80024c2:	189b      	adds	r3, r3, r2
 80024c4:	5d58      	ldrb	r0, [r3, r5]
 80024c6:	f7ff fe5d 	bl	8002184 <DBG_print_c>
 80024ca:	3501      	adds	r5, #1
	for (step = 0; step < skipStep; step++)
 80024cc:	9a03      	ldr	r2, [sp, #12]
 80024ce:	b2eb      	uxtb	r3, r5
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d8f4      	bhi.n	80024be <DBG_print+0x1ba>
 80024d4:	e78d      	b.n	80023f2 <DBG_print+0xee>
		if (integer % 10)
 80024d6:	210a      	movs	r1, #10
 80024d8:	9802      	ldr	r0, [sp, #8]
 80024da:	f7fd ff99 	bl	8000410 <__aeabi_idivmod>
 80024de:	1c6b      	adds	r3, r5, #1
 80024e0:	2900      	cmp	r1, #0
 80024e2:	d001      	beq.n	80024e8 <DBG_print+0x1e4>
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	9203      	str	r2, [sp, #12]
		db_s[step] = (integer % 10) + '0';
 80024e8:	2008      	movs	r0, #8
 80024ea:	aa04      	add	r2, sp, #16
 80024ec:	3130      	adds	r1, #48	; 0x30
 80024ee:	1812      	adds	r2, r2, r0
 80024f0:	5551      	strb	r1, [r2, r5]
 80024f2:	001d      	movs	r5, r3
	for (step = 0; step < 6; step++)
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d1c4      	bne.n	8002482 <DBG_print+0x17e>
 80024f8:	e7e0      	b.n	80024bc <DBG_print+0x1b8>
					DBG_print_hs(1, va_arg(vl, U8*), len);
 80024fa:	9b05      	ldr	r3, [sp, #20]
 80024fc:	9801      	ldr	r0, [sp, #4]
 80024fe:	1d1a      	adds	r2, r3, #4
 8002500:	9205      	str	r2, [sp, #20]
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	b2a2      	uxth	r2, r4
 8002506:	e759      	b.n	80023bc <DBG_print+0xb8>
 8002508:	000f4241 	.word	0x000f4241
 800250c:	200002c8 	.word	0x200002c8
 8002510:	00000fff 	.word	0x00000fff
 8002514:	40240000 	.word	0x40240000

08002518 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8002518:	7983      	ldrb	r3, [r0, #6]
{
 800251a:	b530      	push	{r4, r5, lr}
 800251c:	6801      	ldr	r1, [r0, #0]
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800251e:	2b00      	cmp	r3, #0
 8002520:	d024      	beq.n	800256c <EXTI_Init+0x54>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8002522:	43cd      	mvns	r5, r1
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <EXTI_Init+0x60>)
 8002526:	681c      	ldr	r4, [r3, #0]
 8002528:	402c      	ands	r4, r5
 800252a:	601c      	str	r4, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	402a      	ands	r2, r5
 8002530:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
 8002532:	7902      	ldrb	r2, [r0, #4]
 8002534:	18d2      	adds	r2, r2, r3

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002536:	6814      	ldr	r4, [r2, #0]
 8002538:	4321      	orrs	r1, r4
 800253a:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800253c:	6802      	ldr	r2, [r0, #0]
 800253e:	689c      	ldr	r4, [r3, #8]
 8002540:	43d5      	mvns	r5, r2
 8002542:	402c      	ands	r4, r5
 8002544:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002546:	68d9      	ldr	r1, [r3, #12]
 8002548:	4029      	ands	r1, r5
 800254a:	60d9      	str	r1, [r3, #12]

    /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800254c:	7941      	ldrb	r1, [r0, #5]
 800254e:	2910      	cmp	r1, #16
 8002550:	d106      	bne.n	8002560 <EXTI_Init+0x48>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	4311      	orrs	r1, r2
 8002556:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8002558:	68d9      	ldr	r1, [r3, #12]
 800255a:	430a      	orrs	r2, r1
 800255c:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800255e:	bd30      	pop	{r4, r5, pc}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <EXTI_Init+0x60>)
 8002562:	18cb      	adds	r3, r1, r3
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	430a      	orrs	r2, r1
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8002568:	601a      	str	r2, [r3, #0]
}
 800256a:	e7f8      	b.n	800255e <EXTI_Init+0x46>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800256c:	4a02      	ldr	r2, [pc, #8]	; (8002578 <EXTI_Init+0x60>)
 800256e:	7903      	ldrb	r3, [r0, #4]
 8002570:	189b      	adds	r3, r3, r2
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	438a      	bics	r2, r1
 8002576:	e7f7      	b.n	8002568 <EXTI_Init+0x50>
 8002578:	40010400 	.word	0x40010400

0800257c <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <EXTI_GetITStatus+0x10>)
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	4018      	ands	r0, r3
 8002582:	1e43      	subs	r3, r0, #1
 8002584:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8002586:	b2c0      	uxtb	r0, r0
}
 8002588:	4770      	bx	lr
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	40010400 	.word	0x40010400

08002590 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 8002590:	4b01      	ldr	r3, [pc, #4]	; (8002598 <EXTI_ClearITPendingBit+0x8>)
 8002592:	6158      	str	r0, [r3, #20]
}
 8002594:	4770      	bx	lr
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	40010400 	.word	0x40010400

0800259c <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the FLASH prefetch buffer.
  *          This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <FLASH_PrefetchBufferCmd+0x18>)
 800259e:	2210      	movs	r2, #16
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80025a0:	6819      	ldr	r1, [r3, #0]
  if(NewState != DISABLE)
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d002      	beq.n	80025ac <FLASH_PrefetchBufferCmd+0x10>
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
  }
}
 80025aa:	4770      	bx	lr
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
 80025ac:	4391      	bics	r1, r2
 80025ae:	6019      	str	r1, [r3, #0]
}
 80025b0:	e7fb      	b.n	80025aa <FLASH_PrefetchBufferCmd+0xe>
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	40022000 	.word	0x40022000

080025b8 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <FLASH_Unlock+0x14>)
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	0612      	lsls	r2, r2, #24
 80025be:	d503      	bpl.n	80025c8 <FLASH_Unlock+0x10>
  {
    /* Unlocking the program memory access */
    FLASH->KEYR = FLASH_FKEY1;
 80025c0:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <FLASH_Unlock+0x18>)
 80025c2:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_FKEY2;
 80025c4:	4a03      	ldr	r2, [pc, #12]	; (80025d4 <FLASH_Unlock+0x1c>)
 80025c6:	605a      	str	r2, [r3, #4]
  }
}
 80025c8:	4770      	bx	lr
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	40022000 	.word	0x40022000
 80025d0:	45670123 	.word	0x45670123
 80025d4:	cdef89ab 	.word	0xcdef89ab

080025d8 <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH control register and program memory access */
  FLASH->CR |= FLASH_CR_LOCK;
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	4a02      	ldr	r2, [pc, #8]	; (80025e4 <FLASH_Lock+0xc>)
 80025dc:	6911      	ldr	r1, [r2, #16]
 80025de:	430b      	orrs	r3, r1
 80025e0:	6113      	str	r3, [r2, #16]
}
 80025e2:	4770      	bx	lr
 80025e4:	40022000 	.word	0x40022000

080025e8 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80025e8:	4b01      	ldr	r3, [pc, #4]	; (80025f0 <FLASH_ClearFlag+0x8>)
 80025ea:	60d8      	str	r0, [r3, #12]
}
 80025ec:	4770      	bx	lr
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	40022000 	.word	0x40022000

080025f4 <FLASH_GetStatus>:
{
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    FLASHstatus = FLASH_BUSY;
 80025f4:	2001      	movs	r0, #1
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <FLASH_GetStatus+0x20>)
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4202      	tst	r2, r0
 80025fc:	d109      	bne.n	8002612 <FLASH_GetStatus+0x1e>
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 80025fe:	68da      	ldr	r2, [r3, #12]
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 8002600:	1800      	adds	r0, r0, r0
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8002602:	06d2      	lsls	r2, r2, #27
 8002604:	d405      	bmi.n	8002612 <FLASH_GetStatus+0x1e>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 8002606:	68d8      	ldr	r0, [r3, #12]
 8002608:	2304      	movs	r3, #4
 800260a:	4018      	ands	r0, r3
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 800260c:	4243      	negs	r3, r0
 800260e:	4158      	adcs	r0, r3
 8002610:	3003      	adds	r0, #3
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
}
 8002612:	4770      	bx	lr
 8002614:	40022000 	.word	0x40022000

08002618 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002618:	b510      	push	{r4, lr}
 800261a:	0004      	movs	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800261c:	f7ff ffea 	bl	80025f4 <FLASH_GetStatus>
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002620:	2801      	cmp	r0, #1
 8002622:	d107      	bne.n	8002634 <FLASH_WaitForLastOperation+0x1c>
 8002624:	2c00      	cmp	r4, #0
 8002626:	d101      	bne.n	800262c <FLASH_WaitForLastOperation+0x14>
    Timeout--;
  }
  
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8002628:	3004      	adds	r0, #4
  }
  /* Return the operation status */
  return status;
}
 800262a:	bd10      	pop	{r4, pc}
    status = FLASH_GetStatus();
 800262c:	f7ff ffe2 	bl	80025f4 <FLASH_GetStatus>
    Timeout--;
 8002630:	3c01      	subs	r4, #1
 8002632:	e7f5      	b.n	8002620 <FLASH_WaitForLastOperation+0x8>
  if(Timeout == 0x00 )
 8002634:	2c00      	cmp	r4, #0
 8002636:	d1f8      	bne.n	800262a <FLASH_WaitForLastOperation+0x12>
    status = FLASH_TIMEOUT;
 8002638:	2005      	movs	r0, #5
 800263a:	e7f6      	b.n	800262a <FLASH_WaitForLastOperation+0x12>

0800263c <FLASH_ErasePage>:
{
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	0006      	movs	r6, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002640:	20b0      	movs	r0, #176	; 0xb0
 8002642:	0300      	lsls	r0, r0, #12
 8002644:	f7ff ffe8 	bl	8002618 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8002648:	2804      	cmp	r0, #4
 800264a:	d110      	bne.n	800266e <FLASH_ErasePage+0x32>
    FLASH->CR |= FLASH_CR_PER;
 800264c:	2502      	movs	r5, #2
 800264e:	4c08      	ldr	r4, [pc, #32]	; (8002670 <FLASH_ErasePage+0x34>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002650:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_PER;
 8002652:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002654:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_PER;
 8002656:	432b      	orrs	r3, r5
 8002658:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800265a:	2340      	movs	r3, #64	; 0x40
    FLASH->AR  = Page_Address;
 800265c:	6166      	str	r6, [r4, #20]
    FLASH->CR |= FLASH_CR_STRT;
 800265e:	6922      	ldr	r2, [r4, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002664:	f7ff ffd8 	bl	8002618 <FLASH_WaitForLastOperation>
    FLASH->CR &= ~FLASH_CR_PER;
 8002668:	6923      	ldr	r3, [r4, #16]
 800266a:	43ab      	bics	r3, r5
 800266c:	6123      	str	r3, [r4, #16]
}
 800266e:	bd70      	pop	{r4, r5, r6, pc}
 8002670:	40022000 	.word	0x40022000

08002674 <FLASH_ProgramWord>:
{
 8002674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002676:	0006      	movs	r6, r0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002678:	20b0      	movs	r0, #176	; 0xb0
  __IO uint32_t tmp = 0;
 800267a:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800267c:	0300      	lsls	r0, r0, #12
{
 800267e:	000d      	movs	r5, r1
  __IO uint32_t tmp = 0;
 8002680:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002682:	f7ff ffc9 	bl	8002618 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8002686:	2804      	cmp	r0, #4
 8002688:	d118      	bne.n	80026bc <FLASH_ProgramWord+0x48>
    FLASH->CR |= FLASH_CR_PG;
 800268a:	2701      	movs	r7, #1
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800268c:	20b0      	movs	r0, #176	; 0xb0
    FLASH->CR |= FLASH_CR_PG;
 800268e:	4c0c      	ldr	r4, [pc, #48]	; (80026c0 <FLASH_ProgramWord+0x4c>)
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8002690:	0300      	lsls	r0, r0, #12
    FLASH->CR |= FLASH_CR_PG;
 8002692:	6923      	ldr	r3, [r4, #16]
 8002694:	433b      	orrs	r3, r7
 8002696:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = (uint16_t)Data;
 8002698:	b2ab      	uxth	r3, r5
 800269a:	8033      	strh	r3, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800269c:	f7ff ffbc 	bl	8002618 <FLASH_WaitForLastOperation>
    if(status == FLASH_COMPLETE)
 80026a0:	2804      	cmp	r0, #4
 80026a2:	d108      	bne.n	80026b6 <FLASH_ProgramWord+0x42>
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80026a4:	20b0      	movs	r0, #176	; 0xb0
      tmp = Address + 2;
 80026a6:	3602      	adds	r6, #2
 80026a8:	9601      	str	r6, [sp, #4]
      *(__IO uint16_t*) tmp = Data >> 16;
 80026aa:	9b01      	ldr	r3, [sp, #4]
 80026ac:	0c2d      	lsrs	r5, r5, #16
 80026ae:	801d      	strh	r5, [r3, #0]
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80026b0:	0300      	lsls	r0, r0, #12
 80026b2:	f7ff ffb1 	bl	8002618 <FLASH_WaitForLastOperation>
      FLASH->CR &= ~FLASH_CR_PG;
 80026b6:	6923      	ldr	r3, [r4, #16]
 80026b8:	43bb      	bics	r3, r7
 80026ba:	6123      	str	r3, [r4, #16]
}
 80026bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	40022000 	.word	0x40022000

080026c4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80026c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80026c6:	680b      	ldr	r3, [r1, #0]
 80026c8:	9301      	str	r3, [sp, #4]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80026ca:	2300      	movs	r3, #0
    pos = ((uint32_t)0x01) << pinpos;
 80026cc:	2501      	movs	r5, #1
 80026ce:	409d      	lsls	r5, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80026d0:	9a01      	ldr	r2, [sp, #4]
 80026d2:	402a      	ands	r2, r5

    if (currentpin == pos)
 80026d4:	4295      	cmp	r5, r2
 80026d6:	d12d      	bne.n	8002734 <GPIO_Init+0x70>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80026d8:	790a      	ldrb	r2, [r1, #4]
 80026da:	1e54      	subs	r4, r2, #1
 80026dc:	2c01      	cmp	r4, #1
 80026de:	d816      	bhi.n	800270e <GPIO_Init+0x4a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80026e0:	6884      	ldr	r4, [r0, #8]
 80026e2:	005f      	lsls	r7, r3, #1
 80026e4:	0026      	movs	r6, r4
 80026e6:	2403      	movs	r4, #3
 80026e8:	40bc      	lsls	r4, r7
 80026ea:	43a6      	bics	r6, r4
 80026ec:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80026ee:	6884      	ldr	r4, [r0, #8]
 80026f0:	46a4      	mov	ip, r4
 80026f2:	794c      	ldrb	r4, [r1, #5]
 80026f4:	40bc      	lsls	r4, r7
 80026f6:	4667      	mov	r7, ip
 80026f8:	433c      	orrs	r4, r7
 80026fa:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80026fc:	8884      	ldrh	r4, [r0, #4]
 80026fe:	43ac      	bics	r4, r5
 8002700:	8084      	strh	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002702:	798d      	ldrb	r5, [r1, #6]
 8002704:	8884      	ldrh	r4, [r0, #4]
 8002706:	409d      	lsls	r5, r3
 8002708:	432c      	orrs	r4, r5
 800270a:	b2a4      	uxth	r4, r4
 800270c:	8084      	strh	r4, [r0, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800270e:	2403      	movs	r4, #3
 8002710:	005d      	lsls	r5, r3, #1
 8002712:	40ac      	lsls	r4, r5
 8002714:	43e4      	mvns	r4, r4

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002716:	40aa      	lsls	r2, r5
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002718:	6807      	ldr	r7, [r0, #0]
 800271a:	4027      	ands	r7, r4
 800271c:	6007      	str	r7, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800271e:	6807      	ldr	r7, [r0, #0]
 8002720:	433a      	orrs	r2, r7
 8002722:	6002      	str	r2, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002724:	68c2      	ldr	r2, [r0, #12]
 8002726:	4014      	ands	r4, r2
 8002728:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800272a:	79ca      	ldrb	r2, [r1, #7]
 800272c:	68c4      	ldr	r4, [r0, #12]
 800272e:	40aa      	lsls	r2, r5
 8002730:	4322      	orrs	r2, r4
 8002732:	60c2      	str	r2, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002734:	3301      	adds	r3, #1
 8002736:	2b10      	cmp	r3, #16
 8002738:	d1c8      	bne.n	80026cc <GPIO_Init+0x8>
    }
  }
}
 800273a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800273c <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 800273e:	2201      	movs	r2, #1
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002740:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002742:	2300      	movs	r3, #0
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8002744:	7142      	strb	r2, [r0, #5]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002746:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8002748:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800274a:	71c3      	strb	r3, [r0, #7]
}
 800274c:	4770      	bx	lr
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	0000ffff 	.word	0x0000ffff

08002754 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002754:	8a00      	ldrh	r0, [r0, #16]
 8002756:	4008      	ands	r0, r1
 8002758:	1e41      	subs	r1, r0, #1
 800275a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 800275c:	b2c0      	uxtb	r0, r0
}
 800275e:	4770      	bx	lr

08002760 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8002760:	2a00      	cmp	r2, #0
 8002762:	d001      	beq.n	8002768 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002764:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002766:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8002768:	8501      	strh	r1, [r0, #40]	; 0x28
}
 800276a:	e7fc      	b.n	8002766 <GPIO_WriteBit+0x6>

0800276c <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800276c:	2307      	movs	r3, #7
{
 800276e:	b510      	push	{r4, lr}
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002770:	240f      	movs	r4, #15
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002772:	400b      	ands	r3, r1
 8002774:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002776:	409c      	lsls	r4, r3
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002778:	409a      	lsls	r2, r3
 800277a:	08c9      	lsrs	r1, r1, #3
 800277c:	0089      	lsls	r1, r1, #2
 800277e:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002780:	6a01      	ldr	r1, [r0, #32]
 8002782:	43a1      	bics	r1, r4
 8002784:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002786:	6a01      	ldr	r1, [r0, #32]
 8002788:	430a      	orrs	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800278a:	6202      	str	r2, [r0, #32]
}
 800278c:	bd10      	pop	{r4, pc}
	...

08002790 <NVIC_Init>:
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002790:	7883      	ldrb	r3, [r0, #2]
{
 8002792:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002794:	7802      	ldrb	r2, [r0, #0]
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01b      	beq.n	80027d2 <NVIC_Init+0x42>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 800279a:	27ff      	movs	r7, #255	; 0xff
 800279c:	2403      	movs	r4, #3
 800279e:	003e      	movs	r6, r7
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80027a0:	25c0      	movs	r5, #192	; 0xc0
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80027a2:	4014      	ands	r4, r2
 80027a4:	00e4      	lsls	r4, r4, #3
 80027a6:	40a6      	lsls	r6, r4
 80027a8:	0891      	lsrs	r1, r2, #2
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <NVIC_Init+0x50>)
 80027ac:	0089      	lsls	r1, r1, #2
 80027ae:	18c9      	adds	r1, r1, r3
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80027b0:	00ad      	lsls	r5, r5, #2
 80027b2:	594b      	ldr	r3, [r1, r5]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80027b4:	43b3      	bics	r3, r6
 80027b6:	001e      	movs	r6, r3
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80027b8:	7843      	ldrb	r3, [r0, #1]
 80027ba:	019b      	lsls	r3, r3, #6
 80027bc:	403b      	ands	r3, r7
 80027be:	40a3      	lsls	r3, r4
 80027c0:	4333      	orrs	r3, r6
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 80027c2:	514b      	str	r3, [r1, r5]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80027c4:	231f      	movs	r3, #31
 80027c6:	401a      	ands	r2, r3
 80027c8:	3b1e      	subs	r3, #30
 80027ca:	4093      	lsls	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <NVIC_Init+0x50>)
 80027ce:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80027d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80027d2:	231f      	movs	r3, #31
 80027d4:	401a      	ands	r2, r3
 80027d6:	3b1e      	subs	r3, #30
 80027d8:	4093      	lsls	r3, r2
 80027da:	4a02      	ldr	r2, [pc, #8]	; (80027e4 <NVIC_Init+0x54>)
 80027dc:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 80027de:	e7f7      	b.n	80027d0 <NVIC_Init+0x40>
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000e104 	.word	0xe000e104

080027e8 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPin, FunctionalState NewState)
{
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <PWR_WakeUpPinCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the EWUPx pin */
    PWR->CSR |= PWR_WakeUpPin;
 80027ea:	685a      	ldr	r2, [r3, #4]
  if (NewState != DISABLE)
 80027ec:	2900      	cmp	r1, #0
 80027ee:	d002      	beq.n	80027f6 <PWR_WakeUpPinCmd+0xe>
    PWR->CSR |= PWR_WakeUpPin;
 80027f0:	4310      	orrs	r0, r2
 80027f2:	6058      	str	r0, [r3, #4]
  else
  {
    /* Disable the EWUPx pin */
    PWR->CSR &= ~PWR_WakeUpPin;
  }
}
 80027f4:	4770      	bx	lr
    PWR->CSR &= ~PWR_WakeUpPin;
 80027f6:	4382      	bics	r2, r0
 80027f8:	605a      	str	r2, [r3, #4]
}
 80027fa:	e7fb      	b.n	80027f4 <PWR_WakeUpPinCmd+0xc>
 80027fc:	40007000 	.word	0x40007000

08002800 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8002800:	2200      	movs	r2, #0
 8002802:	4b02      	ldr	r3, [pc, #8]	; (800280c <RCC_HSEConfig+0xc>)
 8002804:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8002806:	7018      	strb	r0, [r3, #0]

}
 8002808:	4770      	bx	lr
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	40021002 	.word	0x40021002

08002810 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <RCC_HSICmd+0x18>)
 8002812:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 8002814:	6819      	ldr	r1, [r3, #0]
  if (NewState != DISABLE)
 8002816:	2800      	cmp	r0, #0
 8002818:	d002      	beq.n	8002820 <RCC_HSICmd+0x10>
    RCC->CR |= RCC_CR_HSION;
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
  }
}
 800281e:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_HSION;
 8002820:	4391      	bics	r1, r2
 8002822:	6019      	str	r1, [r3, #0]
}
 8002824:	e7fb      	b.n	800281e <RCC_HSICmd+0xe>
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	40021000 	.word	0x40021000

0800282c <RCC_PLLCmd>:
  * @param  NewState: new state of the PLL.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <RCC_PLLCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800282e:	2800      	cmp	r0, #0
 8002830:	d005      	beq.n	800283e <RCC_PLLCmd+0x12>
  {
    RCC->CR |= RCC_CR_PLLON;
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	0452      	lsls	r2, r2, #17
 8002838:	430a      	orrs	r2, r1
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 800283a:	601a      	str	r2, [r3, #0]
  }
}
 800283c:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_PLLON;
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4902      	ldr	r1, [pc, #8]	; (800284c <RCC_PLLCmd+0x20>)
 8002842:	400a      	ands	r2, r1
 8002844:	e7f9      	b.n	800283a <RCC_PLLCmd+0xe>
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	40021000 	.word	0x40021000
 800284c:	feffffff 	.word	0xfeffffff

08002850 <RCC_SYSCLKConfig>:
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8002850:	2103      	movs	r1, #3
  tmpreg = RCC->CFGR;
 8002852:	4a03      	ldr	r2, [pc, #12]	; (8002860 <RCC_SYSCLKConfig+0x10>)
 8002854:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_SW;
 8002856:	438b      	bics	r3, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8002858:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800285a:	6050      	str	r0, [r2, #4]
}
 800285c:	4770      	bx	lr
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	40021000 	.word	0x40021000

08002864 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	0004      	movs	r4, r0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002868:	200c      	movs	r0, #12
 800286a:	4d58      	ldr	r5, [pc, #352]	; (80029cc <RCC_GetClocksFreq+0x168>)
 800286c:	686b      	ldr	r3, [r5, #4]
 800286e:	4003      	ands	r3, r0
  
  switch (tmp)
 8002870:	0018      	movs	r0, r3
 8002872:	f7fd fc49 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002876:	5507      	.short	0x5507
 8002878:	55555555 	.word	0x55555555
 800287c:	553a5555 	.word	0x553a5555
 8002880:	5555      	.short	0x5555
 8002882:	51          	.byte	0x51
 8002883:	00          	.byte	0x00
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002884:	4a52      	ldr	r2, [pc, #328]	; (80029d0 <RCC_GetClocksFreq+0x16c>)
 8002886:	6022      	str	r2, [r4, #0]
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002888:	6820      	ldr	r0, [r4, #0]
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800288a:	686a      	ldr	r2, [r5, #4]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800288c:	0001      	movs	r1, r0
  presc = APBAHBPrescTable[tmp]; 
 800288e:	4e51      	ldr	r6, [pc, #324]	; (80029d4 <RCC_GetClocksFreq+0x170>)
  tmp = tmp >> 4;
 8002890:	0612      	lsls	r2, r2, #24
 8002892:	0f12      	lsrs	r2, r2, #28
  presc = APBAHBPrescTable[tmp]; 
 8002894:	5cb2      	ldrb	r2, [r6, r2]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002896:	40d1      	lsrs	r1, r2
 8002898:	000a      	movs	r2, r1
 800289a:	6061      	str	r1, [r4, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 800289c:	6869      	ldr	r1, [r5, #4]
  tmp = tmp >> 8;
 800289e:	0549      	lsls	r1, r1, #21
 80028a0:	0f49      	lsrs	r1, r1, #29
  presc = APBAHBPrescTable[tmp];
 80028a2:	5c71      	ldrb	r1, [r6, r1]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80028a4:	40ca      	lsrs	r2, r1
 80028a6:	60a2      	str	r2, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 80028a8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80028aa:	05c9      	lsls	r1, r1, #23
 80028ac:	d43a      	bmi.n	8002924 <RCC_GetClocksFreq+0xc0>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 80028ae:	494a      	ldr	r1, [pc, #296]	; (80029d8 <RCC_GetClocksFreq+0x174>)
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 80028b0:	60e1      	str	r1, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 80028b2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80028b4:	0649      	lsls	r1, r1, #25
 80028b6:	d43c      	bmi.n	8002932 <RCC_GetClocksFreq+0xce>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 80028b8:	4948      	ldr	r1, [pc, #288]	; (80029dc <RCC_GetClocksFreq+0x178>)
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 80028ba:	6121      	str	r1, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80028bc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80028be:	06c9      	lsls	r1, r1, #27
 80028c0:	d43a      	bmi.n	8002938 <RCC_GetClocksFreq+0xd4>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80028c2:	4943      	ldr	r1, [pc, #268]	; (80029d0 <RCC_GetClocksFreq+0x16c>)
 80028c4:	6161      	str	r1, [r4, #20]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80028c6:	2103      	movs	r1, #3
 80028c8:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80028ca:	420e      	tst	r6, r1
 80028cc:	d136      	bne.n	800293c <RCC_GetClocksFreq+0xd8>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80028ce:	61a2      	str	r2, [r4, #24]
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80028d0:	21c0      	movs	r1, #192	; 0xc0
 80028d2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80028d4:	0289      	lsls	r1, r1, #10
 80028d6:	420e      	tst	r6, r1
 80028d8:	d144      	bne.n	8002964 <RCC_GetClocksFreq+0x100>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80028da:	61e2      	str	r2, [r4, #28]
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
  }
  
  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80028dc:	21c0      	movs	r1, #192	; 0xc0
 80028de:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80028e0:	0309      	lsls	r1, r1, #12
 80028e2:	420e      	tst	r6, r1
 80028e4:	d156      	bne.n	8002994 <RCC_GetClocksFreq+0x130>
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80028e6:	6222      	str	r2, [r4, #32]
 80028e8:	e05b      	b.n	80029a2 <RCC_GetClocksFreq+0x13e>
      pllmull = ( pllmull >> 18) + 2;
 80028ea:	220f      	movs	r2, #15
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80028ec:	686b      	ldr	r3, [r5, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80028ee:	6869      	ldr	r1, [r5, #4]
      pllmull = ( pllmull >> 18) + 2;
 80028f0:	0c9b      	lsrs	r3, r3, #18
 80028f2:	4013      	ands	r3, r2
 80028f4:	1c9e      	adds	r6, r3, #2
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80028f6:	23c0      	movs	r3, #192	; 0xc0
 80028f8:	025b      	lsls	r3, r3, #9
      if (pllsource == 0x00)
 80028fa:	4219      	tst	r1, r3
 80028fc:	d103      	bne.n	8002906 <RCC_GetClocksFreq+0xa2>
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <RCC_GetClocksFreq+0x17c>)
 8002900:	4373      	muls	r3, r6
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8002902:	6023      	str	r3, [r4, #0]
      break;
 8002904:	e7c0      	b.n	8002888 <RCC_GetClocksFreq+0x24>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8002906:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8002908:	4831      	ldr	r0, [pc, #196]	; (80029d0 <RCC_GetClocksFreq+0x16c>)
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800290a:	4011      	ands	r1, r2
 800290c:	3101      	adds	r1, #1
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800290e:	f7fd fc0f 	bl	8000130 <__udivsi3>
 8002912:	0033      	movs	r3, r6
 8002914:	4343      	muls	r3, r0
 8002916:	e7f4      	b.n	8002902 <RCC_GetClocksFreq+0x9e>
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 8002918:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <RCC_GetClocksFreq+0x180>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800291a:	6023      	str	r3, [r4, #0]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 800291c:	2300      	movs	r3, #0
      break;
 800291e:	e7b3      	b.n	8002888 <RCC_GetClocksFreq+0x24>
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <RCC_GetClocksFreq+0x16c>)
 8002922:	e7fa      	b.n	800291a <RCC_GetClocksFreq+0xb6>
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8002924:	6869      	ldr	r1, [r5, #4]
 8002926:	0449      	lsls	r1, r1, #17
 8002928:	d401      	bmi.n	800292e <RCC_GetClocksFreq+0xca>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 800292a:	0851      	lsrs	r1, r2, #1
 800292c:	e7c0      	b.n	80028b0 <RCC_GetClocksFreq+0x4c>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 800292e:	0891      	lsrs	r1, r2, #2
 8002930:	e7be      	b.n	80028b0 <RCC_GetClocksFreq+0x4c>
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8002932:	2180      	movs	r1, #128	; 0x80
 8002934:	0209      	lsls	r1, r1, #8
 8002936:	e7c0      	b.n	80028ba <RCC_GetClocksFreq+0x56>
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002938:	6160      	str	r0, [r4, #20]
 800293a:	e7c4      	b.n	80028c6 <RCC_GetClocksFreq+0x62>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 800293c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800293e:	400e      	ands	r6, r1
 8002940:	2e01      	cmp	r6, #1
 8002942:	d101      	bne.n	8002948 <RCC_GetClocksFreq+0xe4>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002944:	61a0      	str	r0, [r4, #24]
 8002946:	e7c3      	b.n	80028d0 <RCC_GetClocksFreq+0x6c>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8002948:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800294a:	400e      	ands	r6, r1
 800294c:	2e02      	cmp	r6, #2
 800294e:	d103      	bne.n	8002958 <RCC_GetClocksFreq+0xf4>
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	0209      	lsls	r1, r1, #8
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8002954:	61a1      	str	r1, [r4, #24]
 8002956:	e7bb      	b.n	80028d0 <RCC_GetClocksFreq+0x6c>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8002958:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800295a:	4031      	ands	r1, r6
 800295c:	2903      	cmp	r1, #3
 800295e:	d1b7      	bne.n	80028d0 <RCC_GetClocksFreq+0x6c>
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8002960:	491b      	ldr	r1, [pc, #108]	; (80029d0 <RCC_GetClocksFreq+0x16c>)
 8002962:	e7f7      	b.n	8002954 <RCC_GetClocksFreq+0xf0>
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8002964:	2780      	movs	r7, #128	; 0x80
 8002966:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8002968:	027f      	lsls	r7, r7, #9
 800296a:	400e      	ands	r6, r1
 800296c:	42be      	cmp	r6, r7
 800296e:	d101      	bne.n	8002974 <RCC_GetClocksFreq+0x110>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002970:	61e0      	str	r0, [r4, #28]
 8002972:	e7b3      	b.n	80028dc <RCC_GetClocksFreq+0x78>
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8002974:	2780      	movs	r7, #128	; 0x80
 8002976:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8002978:	02bf      	lsls	r7, r7, #10
 800297a:	400e      	ands	r6, r1
 800297c:	42be      	cmp	r6, r7
 800297e:	d103      	bne.n	8002988 <RCC_GetClocksFreq+0x124>
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8002980:	2180      	movs	r1, #128	; 0x80
 8002982:	0209      	lsls	r1, r1, #8
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8002984:	61e1      	str	r1, [r4, #28]
 8002986:	e7a9      	b.n	80028dc <RCC_GetClocksFreq+0x78>
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8002988:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800298a:	400e      	ands	r6, r1
 800298c:	428e      	cmp	r6, r1
 800298e:	d1a5      	bne.n	80028dc <RCC_GetClocksFreq+0x78>
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8002990:	490f      	ldr	r1, [pc, #60]	; (80029d0 <RCC_GetClocksFreq+0x16c>)
 8002992:	e7f7      	b.n	8002984 <RCC_GetClocksFreq+0x120>
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8002994:	2680      	movs	r6, #128	; 0x80
 8002996:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002998:	02f6      	lsls	r6, r6, #11
 800299a:	400a      	ands	r2, r1
 800299c:	42b2      	cmp	r2, r6
 800299e:	d106      	bne.n	80029ae <RCC_GetClocksFreq+0x14a>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80029a0:	6220      	str	r0, [r4, #32]
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 80029a2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80029a4:	0612      	lsls	r2, r2, #24
 80029a6:	d400      	bmi.n	80029aa <RCC_GetClocksFreq+0x146>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <RCC_GetClocksFreq+0x180>)
  }
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
 80029aa:	6263      	str	r3, [r4, #36]	; 0x24
  }   
}
 80029ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80029ae:	2080      	movs	r0, #128	; 0x80
 80029b0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80029b2:	0300      	lsls	r0, r0, #12
 80029b4:	400a      	ands	r2, r1
 80029b6:	4282      	cmp	r2, r0
 80029b8:	d102      	bne.n	80029c0 <RCC_GetClocksFreq+0x15c>
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	0212      	lsls	r2, r2, #8
 80029be:	e792      	b.n	80028e6 <RCC_GetClocksFreq+0x82>
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80029c0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80029c2:	400a      	ands	r2, r1
 80029c4:	428a      	cmp	r2, r1
 80029c6:	d1ec      	bne.n	80029a2 <RCC_GetClocksFreq+0x13e>
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80029c8:	4a01      	ldr	r2, [pc, #4]	; (80029d0 <RCC_GetClocksFreq+0x16c>)
 80029ca:	e78c      	b.n	80028e6 <RCC_GetClocksFreq+0x82>
 80029cc:	40021000 	.word	0x40021000
 80029d0:	007a1200 	.word	0x007a1200
 80029d4:	20000008 	.word	0x20000008
 80029d8:	00d59f80 	.word	0x00d59f80
 80029dc:	00008012 	.word	0x00008012
 80029e0:	003d0900 	.word	0x003d0900
 80029e4:	02dc6c00 	.word	0x02dc6c00

080029e8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80029ea:	695a      	ldr	r2, [r3, #20]
  if (NewState != DISABLE)
 80029ec:	2900      	cmp	r1, #0
 80029ee:	d002      	beq.n	80029f6 <RCC_AHBPeriphClockCmd+0xe>
    RCC->AHBENR |= RCC_AHBPeriph;
 80029f0:	4310      	orrs	r0, r2
 80029f2:	6158      	str	r0, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80029f4:	4770      	bx	lr
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80029f6:	4382      	bics	r2, r0
 80029f8:	615a      	str	r2, [r3, #20]
}
 80029fa:	e7fb      	b.n	80029f4 <RCC_AHBPeriphClockCmd+0xc>
 80029fc:	40021000 	.word	0x40021000

08002a00 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002a02:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 8002a04:	2900      	cmp	r1, #0
 8002a06:	d002      	beq.n	8002a0e <RCC_APB2PeriphClockCmd+0xe>
    RCC->APB2ENR |= RCC_APB2Periph;
 8002a08:	4310      	orrs	r0, r2
 8002a0a:	6198      	str	r0, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002a0c:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002a0e:	4382      	bics	r2, r0
 8002a10:	619a      	str	r2, [r3, #24]
}
 8002a12:	e7fb      	b.n	8002a0c <RCC_APB2PeriphClockCmd+0xc>
 8002a14:	40021000 	.word	0x40021000

08002a18 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002a1a:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 8002a1c:	2900      	cmp	r1, #0
 8002a1e:	d002      	beq.n	8002a26 <RCC_APB1PeriphClockCmd+0xe>
    RCC->APB1ENR |= RCC_APB1Periph;
 8002a20:	4310      	orrs	r0, r2
 8002a22:	61d8      	str	r0, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8002a24:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002a26:	4382      	bics	r2, r0
 8002a28:	61da      	str	r2, [r3, #28]
}
 8002a2a:	e7fb      	b.n	8002a24 <RCC_APB1PeriphClockCmd+0xc>
 8002a2c:	40021000 	.word	0x40021000

08002a30 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <RCC_APB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002a32:	68da      	ldr	r2, [r3, #12]
  if (NewState != DISABLE)
 8002a34:	2900      	cmp	r1, #0
 8002a36:	d002      	beq.n	8002a3e <RCC_APB2PeriphResetCmd+0xe>
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002a38:	4310      	orrs	r0, r2
 8002a3a:	60d8      	str	r0, [r3, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8002a3c:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002a3e:	4382      	bics	r2, r0
 8002a40:	60da      	str	r2, [r3, #12]
}
 8002a42:	e7fb      	b.n	8002a3c <RCC_APB2PeriphResetCmd+0xc>
 8002a44:	40021000 	.word	0x40021000

08002a48 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <RCC_APB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002a4a:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 8002a4c:	2900      	cmp	r1, #0
 8002a4e:	d002      	beq.n	8002a56 <RCC_APB1PeriphResetCmd+0xe>
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002a50:	4310      	orrs	r0, r2
 8002a52:	6118      	str	r0, [r3, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8002a54:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002a56:	4382      	bics	r2, r0
 8002a58:	611a      	str	r2, [r3, #16]
}
 8002a5a:	e7fb      	b.n	8002a54 <RCC_APB1PeriphResetCmd+0xc>
 8002a5c:	40021000 	.word	0x40021000

08002a60 <SPI_Init>:

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8002a60:	23c1      	movs	r3, #193	; 0xc1
  tmpreg = SPIx->CR1;
 8002a62:	8802      	ldrh	r2, [r0, #0]
  tmpreg &= CR1_CLEAR_MASK;
 8002a64:	019b      	lsls	r3, r3, #6
{
 8002a66:	b510      	push	{r4, lr}
  tmpreg &= CR1_CLEAR_MASK;
 8002a68:	401a      	ands	r2, r3
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8002a6a:	89cc      	ldrh	r4, [r1, #14]
 8002a6c:	880b      	ldrh	r3, [r1, #0]
 8002a6e:	4323      	orrs	r3, r4
 8002a70:	88cc      	ldrh	r4, [r1, #6]
 8002a72:	4323      	orrs	r3, r4
 8002a74:	890c      	ldrh	r4, [r1, #8]
 8002a76:	4323      	orrs	r3, r4
 8002a78:	894c      	ldrh	r4, [r1, #10]
 8002a7a:	4323      	orrs	r3, r4
 8002a7c:	898c      	ldrh	r4, [r1, #12]
 8002a7e:	4323      	orrs	r3, r4
 8002a80:	4313      	orrs	r3, r2
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8002a82:	8003      	strh	r3, [r0, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8002a84:	8883      	ldrh	r3, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <SPI_Init+0x4c>)
 8002a88:	4013      	ands	r3, r2
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8002a8a:	888a      	ldrh	r2, [r1, #4]
 8002a8c:	4313      	orrs	r3, r2
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8002a8e:	2204      	movs	r2, #4
  SPIx->CR2 = tmpreg;
 8002a90:	8083      	strh	r3, [r0, #4]
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8002a92:	8a0b      	ldrh	r3, [r1, #16]
 8002a94:	8203      	strh	r3, [r0, #16]
  tmpreg = SPIx->CR1;
 8002a96:	8803      	ldrh	r3, [r0, #0]
  tmpreg &= CR1_CLEAR_MASK2;
 8002a98:	4393      	bics	r3, r2
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8002a9a:	884a      	ldrh	r2, [r1, #2]
 8002a9c:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8002a9e:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8002aa0:	8b83      	ldrh	r3, [r0, #28]
 8002aa2:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <SPI_Init+0x50>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	8383      	strh	r3, [r0, #28]
}
 8002aa8:	bd10      	pop	{r4, pc}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	fffff0ff 	.word	0xfffff0ff
 8002ab0:	fffff7ff 	.word	0xfffff7ff

08002ab4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002ab4:	2340      	movs	r3, #64	; 0x40
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002ab6:	8802      	ldrh	r2, [r0, #0]
  if (NewState != DISABLE)
 8002ab8:	2900      	cmp	r1, #0
 8002aba:	d002      	beq.n	8002ac2 <SPI_Cmd+0xe>
    SPIx->CR1 |= SPI_CR1_SPE;
 8002abc:	4313      	orrs	r3, r2
 8002abe:	8003      	strh	r3, [r0, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8002ac0:	4770      	bx	lr
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002ac2:	439a      	bics	r2, r3
 8002ac4:	8002      	strh	r2, [r0, #0]
}
 8002ac6:	e7fb      	b.n	8002ac0 <SPI_Cmd+0xc>

08002ac8 <SPI_RxFIFOThresholdConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 8002ac8:	8883      	ldrh	r3, [r0, #4]
 8002aca:	4a03      	ldr	r2, [pc, #12]	; (8002ad8 <SPI_RxFIFOThresholdConfig+0x10>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	8083      	strh	r3, [r0, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 8002ad0:	8883      	ldrh	r3, [r0, #4]
 8002ad2:	4319      	orrs	r1, r3
 8002ad4:	8081      	strh	r1, [r0, #4]
}
 8002ad6:	4770      	bx	lr
 8002ad8:	ffffefff 	.word	0xffffefff

08002adc <SPI_SendData8>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  *(__IO uint8_t *) spixbase = Data;
 8002adc:	7301      	strb	r1, [r0, #12]
}
 8002ade:	4770      	bx	lr

08002ae0 <SPI_ReceiveData8>:
  uint32_t spixbase = 0x00;
  
  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  return *(__IO uint8_t *) spixbase;
 8002ae0:	7b00      	ldrb	r0, [r0, #12]
 8002ae2:	b2c0      	uxtb	r0, r0
}
 8002ae4:	4770      	bx	lr
	...

08002ae8 <SPI_CalculateCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	d005      	beq.n	8002af8 <SPI_CalculateCRC+0x10>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	8802      	ldrh	r2, [r0, #0]
 8002af0:	019b      	lsls	r3, r3, #6
 8002af2:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8002af4:	8003      	strh	r3, [r0, #0]
  }
}
 8002af6:	4770      	bx	lr
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8002af8:	8803      	ldrh	r3, [r0, #0]
 8002afa:	4a01      	ldr	r2, [pc, #4]	; (8002b00 <SPI_CalculateCRC+0x18>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	e7f9      	b.n	8002af4 <SPI_CalculateCRC+0xc>
 8002b00:	ffffdfff 	.word	0xffffdfff

08002b04 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002b04:	8900      	ldrh	r0, [r0, #8]
 8002b06:	4008      	ands	r0, r1
 8002b08:	1e41      	subs	r1, r0, #1
 8002b0a:	4188      	sbcs	r0, r1
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002b0c:	b2c0      	uxtb	r0, r0
}
 8002b0e:	4770      	bx	lr

08002b10 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002b10:	2303      	movs	r3, #3
{
 8002b12:	b510      	push	{r4, lr}
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002b14:	240f      	movs	r4, #15
 8002b16:	400b      	ands	r3, r1
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	409c      	lsls	r4, r3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002b1c:	4098      	lsls	r0, r3
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <SYSCFG_EXTILineConfig+0x24>)
 8002b20:	0889      	lsrs	r1, r1, #2
 8002b22:	0089      	lsls	r1, r1, #2
 8002b24:	1889      	adds	r1, r1, r2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8002b26:	688a      	ldr	r2, [r1, #8]
 8002b28:	43a2      	bics	r2, r4
 8002b2a:	608a      	str	r2, [r1, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002b2c:	688a      	ldr	r2, [r1, #8]
 8002b2e:	4310      	orrs	r0, r2
 8002b30:	6088      	str	r0, [r1, #8]
}
 8002b32:	bd10      	pop	{r4, pc}
 8002b34:	40010000 	.word	0x40010000

08002b38 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002b38:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002b3a:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8002b3c:	4c15      	ldr	r4, [pc, #84]	; (8002b94 <TIM_TimeBaseInit+0x5c>)
  tmpcr1 = TIMx->CR1;  
 8002b3e:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8002b40:	42a0      	cmp	r0, r4
 8002b42:	d006      	beq.n	8002b52 <TIM_TimeBaseInit+0x1a>
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	05d2      	lsls	r2, r2, #23
 8002b48:	4290      	cmp	r0, r2
 8002b4a:	d002      	beq.n	8002b52 <TIM_TimeBaseInit+0x1a>
 8002b4c:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <TIM_TimeBaseInit+0x60>)
 8002b4e:	4290      	cmp	r0, r2
 8002b50:	d103      	bne.n	8002b5a <TIM_TimeBaseInit+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8002b52:	2270      	movs	r2, #112	; 0x70
 8002b54:	4393      	bics	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002b56:	884a      	ldrh	r2, [r1, #2]
 8002b58:	4313      	orrs	r3, r2
  }
 
  if(TIMx != TIM6)
 8002b5a:	4a10      	ldr	r2, [pc, #64]	; (8002b9c <TIM_TimeBaseInit+0x64>)
 8002b5c:	4290      	cmp	r0, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_TimeBaseInit+0x30>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002b60:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <TIM_TimeBaseInit+0x68>)
 8002b62:	890d      	ldrh	r5, [r1, #8]
 8002b64:	4013      	ands	r3, r2
 8002b66:	432b      	orrs	r3, r5
  }

  TIMx->CR1 = tmpcr1;
 8002b68:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002b6a:	684b      	ldr	r3, [r1, #4]
 8002b6c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002b6e:	880b      	ldrh	r3, [r1, #0]
 8002b70:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8002b72:	42a0      	cmp	r0, r4
 8002b74:	d008      	beq.n	8002b88 <TIM_TimeBaseInit+0x50>
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <TIM_TimeBaseInit+0x6c>)
 8002b78:	4298      	cmp	r0, r3
 8002b7a:	d005      	beq.n	8002b88 <TIM_TimeBaseInit+0x50>
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <TIM_TimeBaseInit+0x70>)
 8002b7e:	4298      	cmp	r0, r3
 8002b80:	d002      	beq.n	8002b88 <TIM_TimeBaseInit+0x50>
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <TIM_TimeBaseInit+0x74>)
 8002b84:	4298      	cmp	r0, r3
 8002b86:	d101      	bne.n	8002b8c <TIM_TimeBaseInit+0x54>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002b88:	7a8b      	ldrb	r3, [r1, #10]
 8002b8a:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	8283      	strh	r3, [r0, #20]
}
 8002b90:	bd30      	pop	{r4, r5, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40000400 	.word	0x40000400
 8002b9c:	40001000 	.word	0x40001000
 8002ba0:	fffffcff 	.word	0xfffffcff
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40014400 	.word	0x40014400
 8002bac:	40014800 	.word	0x40014800

08002bb0 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	425b      	negs	r3, r3
 8002bb4:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002bba:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002bbc:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002bbe:	7283      	strb	r3, [r0, #10]
}
 8002bc0:	4770      	bx	lr

08002bc2 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002bc2:	6241      	str	r1, [r0, #36]	; 0x24
}
 8002bc4:	4770      	bx	lr

08002bc6 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Counter Register value */
  return TIMx->CNT;
 8002bc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8002bc8:	4770      	bx	lr

08002bca <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002bca:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002bcc:	8802      	ldrh	r2, [r0, #0]
  if (NewState != DISABLE)
 8002bce:	2900      	cmp	r1, #0
 8002bd0:	d002      	beq.n	8002bd8 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	8003      	strh	r3, [r0, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8002bd6:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002bd8:	439a      	bics	r2, r3
 8002bda:	8002      	strh	r2, [r0, #0]
}
 8002bdc:	e7fb      	b.n	8002bd6 <TIM_Cmd+0xc>

08002bde <TIM_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002bde:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8002be0:	8983      	ldrh	r3, [r0, #12]
 8002be2:	2000      	movs	r0, #0
 8002be4:	b29b      	uxth	r3, r3
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002be6:	4211      	tst	r1, r2
 8002be8:	d003      	beq.n	8002bf2 <TIM_GetITStatus+0x14>
 8002bea:	4019      	ands	r1, r3
 8002bec:	1e48      	subs	r0, r1, #1
 8002bee:	4181      	sbcs	r1, r0
 8002bf0:	b2c8      	uxtb	r0, r1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002bf2:	4770      	bx	lr

08002bf4 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002bf4:	43c9      	mvns	r1, r1
 8002bf6:	b289      	uxth	r1, r1
 8002bf8:	8201      	strh	r1, [r0, #16]
}
 8002bfa:	4770      	bx	lr

08002bfc <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002bfc:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8002bfe:	2a00      	cmp	r2, #0
 8002c00:	d002      	beq.n	8002c08 <TIM_DMACmd+0xc>
    TIMx->DIER |= TIM_DMASource; 
 8002c02:	4319      	orrs	r1, r3
 8002c04:	8181      	strh	r1, [r0, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8002c06:	4770      	bx	lr
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002c08:	438b      	bics	r3, r1
 8002c0a:	8183      	strh	r3, [r0, #12]
}
 8002c0c:	e7fb      	b.n	8002c06 <TIM_DMACmd+0xa>

08002c0e <TIM_ITConfig>:
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	f7ff fff4 	bl	8002bfc <TIM_DMACmd>
 8002c14:	bd10      	pop	{r4, pc}
	...

08002c18 <USART_DeInit>:
void USART_DeInit(USART_TypeDef* USARTx)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002c18:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <USART_DeInit+0xc0>)
{
 8002c1a:	b510      	push	{r4, lr}
  if (USARTx == USART1)
 8002c1c:	4298      	cmp	r0, r3
 8002c1e:	d10a      	bne.n	8002c36 <USART_DeInit+0x1e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002c20:	2080      	movs	r0, #128	; 0x80
 8002c22:	2101      	movs	r1, #1
 8002c24:	01c0      	lsls	r0, r0, #7
 8002c26:	f7ff ff03 	bl	8002a30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002c2a:	2080      	movs	r0, #128	; 0x80
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	01c0      	lsls	r0, r0, #7
  else 
  {
    if  (USARTx == USART8)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, DISABLE);
 8002c30:	f7ff fefe 	bl	8002a30 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8002c34:	e00c      	b.n	8002c50 <USART_DeInit+0x38>
  else if (USARTx == USART2)
 8002c36:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <USART_DeInit+0xc4>)
 8002c38:	4298      	cmp	r0, r3
 8002c3a:	d10a      	bne.n	8002c52 <USART_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002c3c:	2080      	movs	r0, #128	; 0x80
 8002c3e:	2101      	movs	r1, #1
 8002c40:	0280      	lsls	r0, r0, #10
 8002c42:	f7ff ff01 	bl	8002a48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002c46:	2080      	movs	r0, #128	; 0x80
 8002c48:	2100      	movs	r1, #0
 8002c4a:	0280      	lsls	r0, r0, #10
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART5, DISABLE);
 8002c4c:	f7ff fefc 	bl	8002a48 <RCC_APB1PeriphResetCmd>
}
 8002c50:	bd10      	pop	{r4, pc}
  else if (USARTx == USART3)
 8002c52:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <USART_DeInit+0xc8>)
 8002c54:	4298      	cmp	r0, r3
 8002c56:	d108      	bne.n	8002c6a <USART_DeInit+0x52>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002c58:	2080      	movs	r0, #128	; 0x80
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	02c0      	lsls	r0, r0, #11
 8002c5e:	f7ff fef3 	bl	8002a48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002c62:	2080      	movs	r0, #128	; 0x80
 8002c64:	2100      	movs	r1, #0
 8002c66:	02c0      	lsls	r0, r0, #11
 8002c68:	e7f0      	b.n	8002c4c <USART_DeInit+0x34>
    else if (USARTx == USART4)
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <USART_DeInit+0xcc>)
 8002c6c:	4298      	cmp	r0, r3
 8002c6e:	d108      	bne.n	8002c82 <USART_DeInit+0x6a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, ENABLE);
 8002c70:	2080      	movs	r0, #128	; 0x80
 8002c72:	2101      	movs	r1, #1
 8002c74:	0300      	lsls	r0, r0, #12
 8002c76:	f7ff fee7 	bl	8002a48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, DISABLE);
 8002c7a:	2080      	movs	r0, #128	; 0x80
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	0300      	lsls	r0, r0, #12
 8002c80:	e7e4      	b.n	8002c4c <USART_DeInit+0x34>
  else if (USARTx == USART5)
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <USART_DeInit+0xd0>)
 8002c84:	4298      	cmp	r0, r3
 8002c86:	d108      	bne.n	8002c9a <USART_DeInit+0x82>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART5, ENABLE);
 8002c88:	2080      	movs	r0, #128	; 0x80
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	0340      	lsls	r0, r0, #13
 8002c8e:	f7ff fedb 	bl	8002a48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART5, DISABLE);
 8002c92:	2080      	movs	r0, #128	; 0x80
 8002c94:	2100      	movs	r1, #0
 8002c96:	0340      	lsls	r0, r0, #13
 8002c98:	e7d8      	b.n	8002c4c <USART_DeInit+0x34>
    else if (USARTx == USART6)
 8002c9a:	4b14      	ldr	r3, [pc, #80]	; (8002cec <USART_DeInit+0xd4>)
 8002c9c:	4298      	cmp	r0, r3
 8002c9e:	d106      	bne.n	8002cae <USART_DeInit+0x96>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	2020      	movs	r0, #32
 8002ca4:	f7ff fec4 	bl	8002a30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2020      	movs	r0, #32
 8002cac:	e7c0      	b.n	8002c30 <USART_DeInit+0x18>
  else if (USARTx == USART7)
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <USART_DeInit+0xd8>)
 8002cb0:	4298      	cmp	r0, r3
 8002cb2:	d106      	bne.n	8002cc2 <USART_DeInit+0xaa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART7, ENABLE);
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2040      	movs	r0, #64	; 0x40
 8002cb8:	f7ff feba 	bl	8002a30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART7, DISABLE);
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2040      	movs	r0, #64	; 0x40
 8002cc0:	e7b6      	b.n	8002c30 <USART_DeInit+0x18>
    if  (USARTx == USART8)
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <USART_DeInit+0xdc>)
 8002cc4:	4298      	cmp	r0, r3
 8002cc6:	d1c3      	bne.n	8002c50 <USART_DeInit+0x38>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, ENABLE);
 8002cc8:	2101      	movs	r1, #1
 8002cca:	2080      	movs	r0, #128	; 0x80
 8002ccc:	f7ff feb0 	bl	8002a30 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, DISABLE);
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2080      	movs	r0, #128	; 0x80
 8002cd4:	e7ac      	b.n	8002c30 <USART_DeInit+0x18>
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	40004400 	.word	0x40004400
 8002ce0:	40004800 	.word	0x40004800
 8002ce4:	40004c00 	.word	0x40004c00
 8002ce8:	40005000 	.word	0x40005000
 8002cec:	40011400 	.word	0x40011400
 8002cf0:	40011800 	.word	0x40011800
 8002cf4:	40011c00 	.word	0x40011c00

08002cf8 <USART_Init>:
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8002cf8:	2201      	movs	r2, #1
{
 8002cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfc:	000d      	movs	r5, r1
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8002cfe:	6803      	ldr	r3, [r0, #0]
{
 8002d00:	b08b      	sub	sp, #44	; 0x2c
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8002d02:	4393      	bics	r3, r2
 8002d04:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002d06:	6843      	ldr	r3, [r0, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002d08:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <USART_Init+0x9c>)
{
 8002d0a:	0004      	movs	r4, r0
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002d0c:	4013      	ands	r3, r2
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002d0e:	688a      	ldr	r2, [r1, #8]
 8002d10:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8002d12:	6043      	str	r3, [r0, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002d14:	6803      	ldr	r3, [r0, #0]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002d16:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <USART_Init+0xa0>)
 8002d18:	401a      	ands	r2, r3
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002d1a:	684b      	ldr	r3, [r1, #4]
 8002d1c:	68c9      	ldr	r1, [r1, #12]
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	6929      	ldr	r1, [r5, #16]
 8002d22:	430b      	orrs	r3, r1
 8002d24:	4313      	orrs	r3, r2
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8002d26:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002d28:	6883      	ldr	r3, [r0, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002d2a:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <USART_Init+0xa4>)
 8002d2c:	4013      	ands	r3, r2
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002d2e:	696a      	ldr	r2, [r5, #20]
 8002d30:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8002d32:	6083      	str	r3, [r0, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002d34:	4668      	mov	r0, sp
 8002d36:	f7ff fd95 	bl	8002864 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <USART_Init+0xa8>)
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8002d3c:	9e06      	ldr	r6, [sp, #24]
  if (USARTx == USART1)
 8002d3e:	429c      	cmp	r4, r3
 8002d40:	d008      	beq.n	8002d54 <USART_Init+0x5c>
  }
  else if (USARTx == USART2)
 8002d42:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <USART_Init+0xac>)
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8002d44:	9e07      	ldr	r6, [sp, #28]
  else if (USARTx == USART2)
 8002d46:	429c      	cmp	r4, r3
 8002d48:	d004      	beq.n	8002d54 <USART_Init+0x5c>
  }
   else if (USARTx == USART3)
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <USART_Init+0xb0>)
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8002d4c:	9e08      	ldr	r6, [sp, #32]
   else if (USARTx == USART3)
 8002d4e:	429c      	cmp	r4, r3
 8002d50:	d000      	beq.n	8002d54 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8002d52:	9e02      	ldr	r6, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	682f      	ldr	r7, [r5, #0]
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	d500      	bpl.n	8002d5e <USART_Init+0x66>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8002d5c:	0076      	lsls	r6, r6, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8002d5e:	0039      	movs	r1, r7
 8002d60:	0030      	movs	r0, r6
 8002d62:	f7fd f9e5 	bl	8000130 <__udivsi3>
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8002d66:	0039      	movs	r1, r7
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8002d68:	0005      	movs	r5, r0
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8002d6a:	0030      	movs	r0, r6
 8002d6c:	f7fd fa66 	bl	800023c <__aeabi_uidivmod>
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
  {
    divider++;
 8002d70:	2300      	movs	r3, #0
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8002d72:	087f      	lsrs	r7, r7, #1
    divider++;
 8002d74:	42b9      	cmp	r1, r7
 8002d76:	415b      	adcs	r3, r3
 8002d78:	18ed      	adds	r5, r5, r3
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	041b      	lsls	r3, r3, #16
 8002d7e:	d504      	bpl.n	8002d8a <USART_Init+0x92>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <USART_Init+0xb4>)
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8002d82:	072a      	lsls	r2, r5, #28
 8002d84:	0f52      	lsrs	r2, r2, #29
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8002d86:	401d      	ands	r5, r3
 8002d88:	4315      	orrs	r5, r2
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8002d8a:	b2ad      	uxth	r5, r5
 8002d8c:	81a5      	strh	r5, [r4, #12]
}
 8002d8e:	b00b      	add	sp, #44	; 0x2c
 8002d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	ffffcfff 	.word	0xffffcfff
 8002d98:	ffffe9f3 	.word	0xffffe9f3
 8002d9c:	fffffcff 	.word	0xfffffcff
 8002da0:	40013800 	.word	0x40013800
 8002da4:	40004400 	.word	0x40004400
 8002da8:	40004800 	.word	0x40004800
 8002dac:	0000fff0 	.word	0x0000fff0

08002db0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002db0:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002db2:	6802      	ldr	r2, [r0, #0]
  if (NewState != DISABLE)
 8002db4:	2900      	cmp	r1, #0
 8002db6:	d002      	beq.n	8002dbe <USART_Cmd+0xe>
    USARTx->CR1 |= USART_CR1_UE;
 8002db8:	4313      	orrs	r3, r2
 8002dba:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 8002dbc:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8002dbe:	439a      	bics	r2, r3
 8002dc0:	6002      	str	r2, [r0, #0]
}
 8002dc2:	e7fb      	b.n	8002dbc <USART_Cmd+0xc>

08002dc4 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8002dc4:	05c9      	lsls	r1, r1, #23
 8002dc6:	0dc9      	lsrs	r1, r1, #23
 8002dc8:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8002dca:	4770      	bx	lr

08002dcc <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8002dcc:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8002dce:	05c0      	lsls	r0, r0, #23
 8002dd0:	0dc0      	lsrs	r0, r0, #23
}
 8002dd2:	4770      	bx	lr

08002dd4 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8002dd4:	2301      	movs	r3, #1
{
 8002dd6:	b510      	push	{r4, lr}
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8002dd8:	b28c      	uxth	r4, r1
  itpos = USART_IT & IT_MASK;
 8002dda:	b2c9      	uxtb	r1, r1
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8002ddc:	0a24      	lsrs	r4, r4, #8
  itmask = (((uint32_t)0x01) << itpos);
 8002dde:	408b      	lsls	r3, r1
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8002de0:	2c02      	cmp	r4, #2
 8002de2:	d106      	bne.n	8002df2 <USART_ITConfig+0x1e>
  {
    usartxbase += 0x04;
 8002de4:	3004      	adds	r0, #4
    usartxbase += 0x08;
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8002de6:	2a00      	cmp	r2, #0
 8002de8:	d007      	beq.n	8002dfa <USART_ITConfig+0x26>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002dea:	6802      	ldr	r2, [r0, #0]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8002df0:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8002df2:	2c03      	cmp	r4, #3
 8002df4:	d1f7      	bne.n	8002de6 <USART_ITConfig+0x12>
    usartxbase += 0x08;
 8002df6:	3008      	adds	r0, #8
 8002df8:	e7f5      	b.n	8002de6 <USART_ITConfig+0x12>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002dfa:	6802      	ldr	r2, [r0, #0]
 8002dfc:	439a      	bics	r2, r3
 8002dfe:	6002      	str	r2, [r0, #0]
}
 8002e00:	e7f6      	b.n	8002df0 <USART_ITConfig+0x1c>

08002e02 <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8002e02:	69c0      	ldr	r0, [r0, #28]
 8002e04:	4008      	ands	r0, r1
 8002e06:	1e41      	subs	r1, r0, #1
 8002e08:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8002e0a:	b2c0      	uxtb	r0, r0
}
 8002e0c:	4770      	bx	lr

08002e0e <USART_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8002e0e:	2301      	movs	r3, #1
  bitpos = USART_IT >> 0x10;
 8002e10:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8002e12:	408b      	lsls	r3, r1
  USARTx->ICR = (uint32_t)itmask;
 8002e14:	6203      	str	r3, [r0, #32]
}
 8002e16:	4770      	bx	lr

08002e18 <RFprotocol_transmitData_2_bytes>:

/*--------------------------------------------------------------------------------
 * Brief:
 ---------------------------------------------------------------------------------*/
void RFprotocol_transmitData_2_bytes(RFPROTOCOL_TRANSMIT_DATA_t transDat, U8 *bytes)
{
 8002e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e1a:	001c      	movs	r4, r3
	U8 index = 0, chksum = 0;

	bytes[index] = '#';
 8002e1c:	2323      	movs	r3, #35	; 0x23
{
 8002e1e:	9001      	str	r0, [sp, #4]
 8002e20:	9102      	str	r1, [sp, #8]
 8002e22:	9203      	str	r2, [sp, #12]
	bytes[index] = '#';
 8002e24:	7023      	strb	r3, [r4, #0]
	index += 1;
	memcpy(&bytes[index], &transDat.SenderAddr, 4);
 8002e26:	2204      	movs	r2, #4
 8002e28:	a901      	add	r1, sp, #4
 8002e2a:	1c60      	adds	r0, r4, #1
 8002e2c:	f000 fc31 	bl	8003692 <memcpy>
	index += 4;
	bytes[index] = '@';
 8002e30:	2340      	movs	r3, #64	; 0x40
	index += 1;
	memcpy(&bytes[index], &transDat.timestamp, 2);
 8002e32:	2202      	movs	r2, #2
	bytes[index] = '@';
 8002e34:	7163      	strb	r3, [r4, #5]
	memcpy(&bytes[index], &transDat.timestamp, 2);
 8002e36:	a902      	add	r1, sp, #8
 8002e38:	1da0      	adds	r0, r4, #6
 8002e3a:	f000 fc2a 	bl	8003692 <memcpy>
	index += 2;
	bytes[index] = '$';
 8002e3e:	2324      	movs	r3, #36	; 0x24
	index += 1;
	memcpy(&bytes[index], &transDat.command, 2);
 8002e40:	0020      	movs	r0, r4
 8002e42:	210a      	movs	r1, #10
	bytes[index] = '$';
 8002e44:	7223      	strb	r3, [r4, #8]
	memcpy(&bytes[index], &transDat.command, 2);
 8002e46:	2202      	movs	r2, #2
 8002e48:	4469      	add	r1, sp
 8002e4a:	3009      	adds	r0, #9
 8002e4c:	f000 fc21 	bl	8003692 <memcpy>
	index += 2;
	memcpy(&bytes[index], &transDat.data, 4);
 8002e50:	0020      	movs	r0, r4
 8002e52:	2204      	movs	r2, #4
 8002e54:	a903      	add	r1, sp, #12
 8002e56:	300b      	adds	r0, #11
 8002e58:	f000 fc1b 	bl	8003692 <memcpy>
 8002e5c:	0021      	movs	r1, r4
 8002e5e:	0023      	movs	r3, r4
	U8 index = 0, chksum = 0;
 8002e60:	2200      	movs	r2, #0
 8002e62:	310f      	adds	r1, #15
	index += 4;
	for (U8 i = 0; i < index; i++)
	{
		chksum ^= bytes[i];
 8002e64:	7818      	ldrb	r0, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4042      	eors	r2, r0
	for (U8 i = 0; i < index; i++)
 8002e6a:	428b      	cmp	r3, r1
 8002e6c:	d1fa      	bne.n	8002e64 <RFprotocol_transmitData_2_bytes+0x4c>
	}
	bytes[index] = '*';
 8002e6e:	232a      	movs	r3, #42	; 0x2a
	index += 1;
	bytes[index] = chksum;
 8002e70:	7422      	strb	r2, [r4, #16]
	bytes[index] = '*';
 8002e72:	73e3      	strb	r3, [r4, #15]
	//DBG_print("\r\n [%u]=%X", index, chksum);
}
 8002e74:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	...

08002e78 <RFprotocol_bytes_2_ACK>:
}
/*--------------------------------------------------------------------------------
 * Brief:
 ---------------------------------------------------------------------------------*/
U8 RFprotocol_bytes_2_ACK(const U8 *bytes, RFPROTOCOL_ACK_t *ACKdat)
{
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	0004      	movs	r4, r0
	U8 index = 0, chksum = 0;

	if (bytes[index] != '#')
 8002e7c:	7822      	ldrb	r2, [r4, #0]
{
 8002e7e:	0008      	movs	r0, r1
	{
		return 1;
 8002e80:	2301      	movs	r3, #1
	if (bytes[index] != '#')
 8002e82:	2a23      	cmp	r2, #35	; 0x23
 8002e84:	d11b      	bne.n	8002ebe <RFprotocol_bytes_2_ACK+0x46>
	}
	index += 1;
	if (bytes[index] != 'A')
 8002e86:	7862      	ldrb	r2, [r4, #1]
	{
		return 2;
 8002e88:	18db      	adds	r3, r3, r3
	if (bytes[index] != 'A')
 8002e8a:	2a41      	cmp	r2, #65	; 0x41
 8002e8c:	d117      	bne.n	8002ebe <RFprotocol_bytes_2_ACK+0x46>
	}
	index += 1;
	memcpy(&ACKdat->timestamp, &bytes[index], 2);
 8002e8e:	18e1      	adds	r1, r4, r3
 8002e90:	001a      	movs	r2, r3
 8002e92:	f000 fbfe 	bl	8003692 <memcpy>
 8002e96:	0023      	movs	r3, r4
	U8 index = 0, chksum = 0;
 8002e98:	2200      	movs	r2, #0
 8002e9a:	1d21      	adds	r1, r4, #4
	index += 2;
	for (U8 i = 0; i < index; i++)
	{
		chksum ^= bytes[i];
 8002e9c:	7818      	ldrb	r0, [r3, #0]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	4042      	eors	r2, r0
	for (U8 i = 0; i < index; i++)
 8002ea2:	428b      	cmp	r3, r1
 8002ea4:	d1fa      	bne.n	8002e9c <RFprotocol_bytes_2_ACK+0x24>
	}
	if (bytes[index] != '*')
 8002ea6:	7921      	ldrb	r1, [r4, #4]
	{
		return 3;
 8002ea8:	2303      	movs	r3, #3
	if (bytes[index] != '*')
 8002eaa:	292a      	cmp	r1, #42	; 0x2a
 8002eac:	d107      	bne.n	8002ebe <RFprotocol_bytes_2_ACK+0x46>
	}
	index += 1;
	if (bytes[index] != chksum)
 8002eae:	7961      	ldrb	r1, [r4, #5]
	{
		DBG_print("\r\n Chksum:%X/%X", bytes[index], chksum);
		return 4;
	}
	return 0;
 8002eb0:	2300      	movs	r3, #0
	if (bytes[index] != chksum)
 8002eb2:	428a      	cmp	r2, r1
 8002eb4:	d003      	beq.n	8002ebe <RFprotocol_bytes_2_ACK+0x46>
		DBG_print("\r\n Chksum:%X/%X", bytes[index], chksum);
 8002eb6:	4803      	ldr	r0, [pc, #12]	; (8002ec4 <RFprotocol_bytes_2_ACK+0x4c>)
 8002eb8:	f7ff fa24 	bl	8002304 <DBG_print>
		return 4;
 8002ebc:	2304      	movs	r3, #4
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	bd10      	pop	{r4, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	08004232 	.word	0x08004232

08002ec8 <RFprotocol_bytes_2_setUID>:
}
/*--------------------------------------------------------------------------------
 * Brief:
 ---------------------------------------------------------------------------------*/
U8 RFprotocol_bytes_2_setUID(const U8 *bytes, U16 *UID)
{
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	0004      	movs	r4, r0
	U8 index = 0, chksum = 0;

	if (bytes[index] != '#')
 8002ecc:	7822      	ldrb	r2, [r4, #0]
{
 8002ece:	0008      	movs	r0, r1
	{
		return 1;
 8002ed0:	2301      	movs	r3, #1
	if (bytes[index] != '#')
 8002ed2:	2a23      	cmp	r2, #35	; 0x23
 8002ed4:	d121      	bne.n	8002f1a <RFprotocol_bytes_2_setUID+0x52>
	}
	index += 1;
	if (bytes[index] != 'U')
 8002ed6:	7862      	ldrb	r2, [r4, #1]
	{
		return 2;
 8002ed8:	18db      	adds	r3, r3, r3
	if (bytes[index] != 'U')
 8002eda:	2a55      	cmp	r2, #85	; 0x55
 8002edc:	d11d      	bne.n	8002f1a <RFprotocol_bytes_2_setUID+0x52>
	}
	index += 1;
	if (bytes[index] != 'I')
 8002ede:	78a2      	ldrb	r2, [r4, #2]
 8002ee0:	2a49      	cmp	r2, #73	; 0x49
 8002ee2:	d11a      	bne.n	8002f1a <RFprotocol_bytes_2_setUID+0x52>
	{
		return 2;
	}
	index += 1;
	if (bytes[index] != 'D')
 8002ee4:	78e2      	ldrb	r2, [r4, #3]
 8002ee6:	2a44      	cmp	r2, #68	; 0x44
 8002ee8:	d117      	bne.n	8002f1a <RFprotocol_bytes_2_setUID+0x52>
	{
		return 2;
	}
	index += 1;
	memcpy(UID, &bytes[index], 2);
 8002eea:	001a      	movs	r2, r3
 8002eec:	1d21      	adds	r1, r4, #4
 8002eee:	f000 fbd0 	bl	8003692 <memcpy>
 8002ef2:	0023      	movs	r3, r4
	U8 index = 0, chksum = 0;
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	1da1      	adds	r1, r4, #6
	index += 2;
	for (U8 i = 0; i < index; i++)
	{
		chksum ^= bytes[i];
 8002ef8:	7818      	ldrb	r0, [r3, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	4042      	eors	r2, r0
	for (U8 i = 0; i < index; i++)
 8002efe:	428b      	cmp	r3, r1
 8002f00:	d1fa      	bne.n	8002ef8 <RFprotocol_bytes_2_setUID+0x30>
	}
	if (bytes[index] != '*')
 8002f02:	79a1      	ldrb	r1, [r4, #6]
	{
		return 3;
 8002f04:	2303      	movs	r3, #3
	if (bytes[index] != '*')
 8002f06:	292a      	cmp	r1, #42	; 0x2a
 8002f08:	d107      	bne.n	8002f1a <RFprotocol_bytes_2_setUID+0x52>
	}
	index += 1;
	if (bytes[index] != chksum)
 8002f0a:	79e1      	ldrb	r1, [r4, #7]
	{
		DBG_print("\r\n Chksum:%X/%X", bytes[index], chksum);
		return 4;
	}
	return 0;
 8002f0c:	2300      	movs	r3, #0
	if (bytes[index] != chksum)
 8002f0e:	428a      	cmp	r2, r1
 8002f10:	d003      	beq.n	8002f1a <RFprotocol_bytes_2_setUID+0x52>
		DBG_print("\r\n Chksum:%X/%X", bytes[index], chksum);
 8002f12:	4803      	ldr	r0, [pc, #12]	; (8002f20 <RFprotocol_bytes_2_setUID+0x58>)
 8002f14:	f7ff f9f6 	bl	8002304 <DBG_print>
		return 4;
 8002f18:	2304      	movs	r3, #4
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	bd10      	pop	{r4, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	08004232 	.word	0x08004232

08002f24 <NVIC_SystemReset>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 8002f24:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 8002f28:	4a02      	ldr	r2, [pc, #8]	; (8002f34 <NVIC_SystemReset+0x10>)
 8002f2a:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <NVIC_SystemReset+0x14>)
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	e7fe      	b.n	8002f32 <NVIC_SystemReset+0xe>
 8002f34:	05fa0004 	.word	0x05fa0004
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <delay_ms>:
}
/*---------------------------------------------------------------------------
 *
 ----------------------------------------------------------------------------*/
void delay_ms(uint32_t t)
{
 8002f3c:	b510      	push	{r4, lr}
	TIM_setCt(3, 0);
 8002f3e:	2100      	movs	r1, #0
{
 8002f40:	0004      	movs	r4, r0
	TIM_setCt(3, 0);
 8002f42:	2003      	movs	r0, #3
 8002f44:	f7fe fd1e 	bl	8001984 <TIM_setCt>
	while (TIM_getCt(3) < t);
 8002f48:	2003      	movs	r0, #3
 8002f4a:	f7fe fd09 	bl	8001960 <TIM_getCt>
 8002f4e:	42a0      	cmp	r0, r4
 8002f50:	d3fa      	bcc.n	8002f48 <delay_ms+0xc>
}
 8002f52:	bd10      	pop	{r4, pc}

08002f54 <nRF24L01_wCEpin>:
	IO_wrt(RF24_CE_PORT, RF24_CE_PIN, (IOstt == IO_HI) ? 1 : 0);
 8002f54:	3801      	subs	r0, #1
 8002f56:	4242      	negs	r2, r0
 8002f58:	4142      	adcs	r2, r0
{
 8002f5a:	b510      	push	{r4, lr}
	IO_wrt(RF24_CE_PORT, RF24_CE_PIN, (IOstt == IO_HI) ? 1 : 0);
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	2107      	movs	r1, #7
 8002f60:	2001      	movs	r0, #1
 8002f62:	f7fe fadb 	bl	800151c <IO_wrt>
}
 8002f66:	bd10      	pop	{r4, pc}

08002f68 <nRF24L01_wCSpin>:
	IO_wrt(RF24_nCS_PORT, RF24_nCS_PIN, (IOstt == IO_HI) ? 1 : 0);
 8002f68:	3801      	subs	r0, #1
 8002f6a:	4242      	negs	r2, r0
 8002f6c:	4142      	adcs	r2, r0
{
 8002f6e:	b510      	push	{r4, lr}
	IO_wrt(RF24_nCS_PORT, RF24_nCS_PIN, (IOstt == IO_HI) ? 1 : 0);
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	2106      	movs	r1, #6
 8002f74:	2001      	movs	r0, #1
 8002f76:	f7fe fad1 	bl	800151c <IO_wrt>
}
 8002f7a:	bd10      	pop	{r4, pc}

08002f7c <nRF24L01_wrSPI>:
{
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	0001      	movs	r1, r0
	return SPI_wr1Byte(1, byte);
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7fe fc4b 	bl	800181c <SPI_wr1Byte>
}
 8002f86:	bd10      	pop	{r4, pc}

08002f88 <DBG_printc>:
{
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	0001      	movs	r1, r0
	UART_sendc(1, c);
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f7fe fd91 	bl	8001ab4 <UART_sendc>
}
 8002f92:	bd10      	pop	{r4, pc}

08002f94 <setup_RFmodule>:
}
/*---------------------------------------------------------------------------
 *
 ----------------------------------------------------------------------------*/
void setup_RFmodule(void)
{
 8002f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f96:	b085      	sub	sp, #20
	uint32_t RXaddr = REMOTE_UID;
	uint8_t res;

	//DBG_print("\r\n %s:Start", __func__);
	iniStruct.PRX1_addrLen = ADDRLEN_4BYTES;
	memcpy(iniStruct.PRX1_addr, &RXaddr, 4);
 8002f98:	4669      	mov	r1, sp
	iniStruct.PRX1_addrLen = ADDRLEN_4BYTES;
 8002f9a:	2502      	movs	r5, #2
	uint32_t RXaddr = REMOTE_UID;
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <setup_RFmodule+0x6c>)
	iniStruct.PRX1_addrLen = ADDRLEN_4BYTES;
 8002f9e:	ac01      	add	r4, sp, #4
	uint32_t RXaddr = REMOTE_UID;
 8002fa0:	681b      	ldr	r3, [r3, #0]
	memcpy(iniStruct.PRX1_addr, &RXaddr, 4);
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	1d88      	adds	r0, r1, #6
	uint32_t RXaddr = REMOTE_UID;
 8002fa6:	9300      	str	r3, [sp, #0]
	iniStruct.PRX1_addrLen = ADDRLEN_4BYTES;
 8002fa8:	7065      	strb	r5, [r4, #1]
	memcpy(iniStruct.PRX1_addr, &RXaddr, 4);
 8002faa:	f000 fb72 	bl	8003692 <memcpy>
	iniStruct.RFch = 2;
	iniStruct.TxPwr = TXPWR_HIGHEST;
 8002fae:	2303      	movs	r3, #3
	iniStruct.dataRates = DATARATES_1M;
 8002fb0:	2601      	movs	r6, #1
	iniStruct.TxPwr = TXPWR_HIGHEST;
 8002fb2:	71e3      	strb	r3, [r4, #7]
	iniStruct.enACK = 0;
 8002fb4:	2300      	movs	r3, #0
	iniStruct.RFch = 2;
 8002fb6:	7025      	strb	r5, [r4, #0]
	iniStruct.dataRates = DATARATES_1M;
 8002fb8:	7226      	strb	r6, [r4, #8]
	iniStruct.enACK = 0;
 8002fba:	7263      	strb	r3, [r4, #9]
 8002fbc:	3508      	adds	r5, #8
	for (uint8_t retry = 0; retry < 10; retry++)
	{
		SPI_runClkSrc(1);
 8002fbe:	0030      	movs	r0, r6
 8002fc0:	f7fe fc25 	bl	800180e <SPI_runClkSrc>
		res = nRF24L01_ini(iniStruct);
 8002fc4:	6861      	ldr	r1, [r4, #4]
 8002fc6:	68a2      	ldr	r2, [r4, #8]
 8002fc8:	6820      	ldr	r0, [r4, #0]
 8002fca:	f7fe fe0b 	bl	8001be4 <nRF24L01_ini>
 8002fce:	0007      	movs	r7, r0
		SPI_stopClkSrc(1);
 8002fd0:	0030      	movs	r0, r6
 8002fd2:	f7fe fc15 	bl	8001800 <SPI_stopClkSrc>
		DBG_print("\r\n %s:res=%u", __func__, res);
 8002fd6:	003a      	movs	r2, r7
 8002fd8:	490a      	ldr	r1, [pc, #40]	; (8003004 <setup_RFmodule+0x70>)
 8002fda:	480b      	ldr	r0, [pc, #44]	; (8003008 <setup_RFmodule+0x74>)
 8002fdc:	f7ff f992 	bl	8002304 <DBG_print>
		if (!res)
 8002fe0:	2f00      	cmp	r7, #0
 8002fe2:	d104      	bne.n	8002fee <setup_RFmodule+0x5a>
		{
			//LED_blink(1000, 1);
			nRF24L01_rdy = 1;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <setup_RFmodule+0x78>)
 8002fe8:	701a      	strb	r2, [r3, #0]
			break;
		}
		delay_ms(500);
	}
}
 8002fea:	b005      	add	sp, #20
 8002fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		delay_ms(500);
 8002fee:	20fa      	movs	r0, #250	; 0xfa
 8002ff0:	3d01      	subs	r5, #1
 8002ff2:	0040      	lsls	r0, r0, #1
 8002ff4:	b2ed      	uxtb	r5, r5
 8002ff6:	f7ff ffa1 	bl	8002f3c <delay_ms>
	for (uint8_t retry = 0; retry < 10; retry++)
 8002ffa:	2d00      	cmp	r5, #0
 8002ffc:	d1df      	bne.n	8002fbe <setup_RFmodule+0x2a>
 8002ffe:	e7f4      	b.n	8002fea <setup_RFmodule+0x56>
 8003000:	200002cc 	.word	0x200002cc
 8003004:	08004269 	.word	0x08004269
 8003008:	080042cb 	.word	0x080042cb
 800300c:	200002db 	.word	0x200002db

08003010 <transmit_data>:
{
 8003010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003012:	b091      	sub	sp, #68	; 0x44
 8003014:	af03      	add	r7, sp, #12
			, RXlen = 0//
 8003016:	261b      	movs	r6, #27
{
 8003018:	0005      	movs	r5, r0
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	0008      	movs	r0, r1
 800301e:	0011      	movs	r1, r2
 8003020:	001a      	movs	r2, r3
			, RXlen = 0//
 8003022:	2300      	movs	r3, #0
	RFprotocol_transmitData_2_bytes(transDat, TXdat);
 8003024:	ac0b      	add	r4, sp, #44	; 0x2c
			, RXlen = 0//
 8003026:	446e      	add	r6, sp
 8003028:	7033      	strb	r3, [r6, #0]
	RFprotocol_transmitData_2_bytes(transDat, TXdat);
 800302a:	0023      	movs	r3, r4
 800302c:	f7ff fef4 	bl	8002e18 <RFprotocol_transmitData_2_bytes>
	SPI_runClkSrc(1);
 8003030:	2001      	movs	r0, #1
	memcpy(RXaddrBytes, &rxAddr, 4);
 8003032:	9502      	str	r5, [sp, #8]
 8003034:	9508      	str	r5, [sp, #32]
	SPI_runClkSrc(1);
 8003036:	f7fe fbea 	bl	800180e <SPI_runClkSrc>
	res = nRF24L01_snd(100, 4, RXaddrBytes, RFPROTOCOL_TRANSMIT_DATA_SIZE, TXdat);
 800303a:	9400      	str	r4, [sp, #0]
 800303c:	2312      	movs	r3, #18
 800303e:	aa08      	add	r2, sp, #32
 8003040:	2104      	movs	r1, #4
 8003042:	2064      	movs	r0, #100	; 0x64
 8003044:	f7fe ff06 	bl	8001e54 <nRF24L01_snd>
 8003048:	1e04      	subs	r4, r0, #0
	if (!res)
 800304a:	d11a      	bne.n	8003082 <transmit_data+0x72>
 800304c:	250a      	movs	r5, #10
 800304e:	34fe      	adds	r4, #254	; 0xfe
			nRF24L01_recv(RFPROTOCOL_ACK_SIZE, RXdat, &RXlen);
 8003050:	0032      	movs	r2, r6
 8003052:	a909      	add	r1, sp, #36	; 0x24
 8003054:	2007      	movs	r0, #7
 8003056:	f7fe fff1 	bl	800203c <nRF24L01_recv>
			if (RXlen >= (RFPROTOCOL_ACK_SIZE - 1))
 800305a:	7833      	ldrb	r3, [r6, #0]
 800305c:	2b05      	cmp	r3, #5
 800305e:	d91b      	bls.n	8003098 <transmit_data+0x88>
				res = RFprotocol_bytes_2_ACK(RXdat, &ACKdat);
 8003060:	a907      	add	r1, sp, #28
 8003062:	a809      	add	r0, sp, #36	; 0x24
 8003064:	f7ff ff08 	bl	8002e78 <RFprotocol_bytes_2_ACK>
 8003068:	1e04      	subs	r4, r0, #0
				if (!res)
 800306a:	d115      	bne.n	8003098 <transmit_data+0x88>
					if (ACKdat.timestamp != transDat.timestamp)
 800306c:	466b      	mov	r3, sp
 800306e:	8b9a      	ldrh	r2, [r3, #28]
 8003070:	88bb      	ldrh	r3, [r7, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d118      	bne.n	80030a8 <transmit_data+0x98>
						DBG_print("\r\n %s:ACKpassed", __func__);
 8003076:	490d      	ldr	r1, [pc, #52]	; (80030ac <transmit_data+0x9c>)
 8003078:	480d      	ldr	r0, [pc, #52]	; (80030b0 <transmit_data+0xa0>)
 800307a:	f7ff f943 	bl	8002304 <DBG_print>
		nRF24L01_exitRXmode();
 800307e:	f7fe ffbb 	bl	8001ff8 <nRF24L01_exitRXmode>
	SPI_stopClkSrc(1);
 8003082:	2001      	movs	r0, #1
 8003084:	f7fe fbbc 	bl	8001800 <SPI_stopClkSrc>
	DBG_print("\r\n %s:res=%u", __func__, res);
 8003088:	0022      	movs	r2, r4
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <transmit_data+0x9c>)
 800308c:	4809      	ldr	r0, [pc, #36]	; (80030b4 <transmit_data+0xa4>)
 800308e:	f7ff f939 	bl	8002304 <DBG_print>
}
 8003092:	0020      	movs	r0, r4
 8003094:	b011      	add	sp, #68	; 0x44
 8003096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003098:	3d01      	subs	r5, #1
			delay_ms(10);
 800309a:	200a      	movs	r0, #10
 800309c:	b2ad      	uxth	r5, r5
 800309e:	f7ff ff4d 	bl	8002f3c <delay_ms>
		for (timepass = 0; timepass < timeout; timepass += 10)
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d1d4      	bne.n	8003050 <transmit_data+0x40>
 80030a6:	e7ea      	b.n	800307e <transmit_data+0x6e>
						res = 0xFF;
 80030a8:	24ff      	movs	r4, #255	; 0xff
 80030aa:	e7e8      	b.n	800307e <transmit_data+0x6e>
 80030ac:	08004242 	.word	0x08004242
 80030b0:	080042d8 	.word	0x080042d8
 80030b4:	080042cb 	.word	0x080042cb

080030b8 <LED_blink>:
{
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	000c      	movs	r4, r1
		delay_ms(cycleTime / 2);
 80030bc:	0845      	lsrs	r5, r0, #1
	while (blinkTimes-- > 0)
 80030be:	2c00      	cmp	r4, #0
 80030c0:	d100      	bne.n	80030c4 <LED_blink+0xc>
}
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
		delay_ms(cycleTime / 2);
 80030c4:	0028      	movs	r0, r5
 80030c6:	f7ff ff39 	bl	8002f3c <delay_ms>
		IO_wrt(LED_PORT, LED_PIN, 1);
 80030ca:	2201      	movs	r2, #1
 80030cc:	2100      	movs	r1, #0
 80030ce:	2005      	movs	r0, #5
 80030d0:	f7fe fa24 	bl	800151c <IO_wrt>
		delay_ms(cycleTime / 2);
 80030d4:	0028      	movs	r0, r5
 80030d6:	f7ff ff31 	bl	8002f3c <delay_ms>
		IO_wrt(LED_PORT, LED_PIN, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2005      	movs	r0, #5
 80030de:	0011      	movs	r1, r2
 80030e0:	3c01      	subs	r4, #1
 80030e2:	f7fe fa1b 	bl	800151c <IO_wrt>
 80030e6:	b2a4      	uxth	r4, r4
 80030e8:	e7e9      	b.n	80030be <LED_blink+0x6>
	...

080030ec <main>:
{
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	b08b      	sub	sp, #44	; 0x2c
	SystemInit();
 80030f0:	f000 fa1a 	bl	8003528 <SystemInit>
	RCC_HSEConfig(RCC_HSE_OFF);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7ff fb83 	bl	8002800 <RCC_HSEConfig>
	RCC_HSICmd(ENABLE);
 80030fa:	2001      	movs	r0, #1
 80030fc:	f7ff fb88 	bl	8002810 <RCC_HSICmd>
	RCC_PLLCmd(DISABLE);
 8003100:	2000      	movs	r0, #0
 8003102:	f7ff fb93 	bl	800282c <RCC_PLLCmd>
	RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
 8003106:	2000      	movs	r0, #0
 8003108:	f7ff fba2 	bl	8002850 <RCC_SYSCLKConfig>
	IO_setup(RF24_CE_PORT, RF24_CE_PIN, IODIR_OPP);
 800310c:	2203      	movs	r2, #3
 800310e:	2107      	movs	r1, #7
 8003110:	2001      	movs	r0, #1
 8003112:	f7fe f96b 	bl	80013ec <IO_setup>
	IO_setup(RF24_nCS_PORT, RF24_nCS_PIN, IODIR_OPP);
 8003116:	2203      	movs	r2, #3
 8003118:	2106      	movs	r1, #6
 800311a:	2001      	movs	r0, #1
 800311c:	f7fe f966 	bl	80013ec <IO_setup>
	IO_setup(LED_PORT, LED_PIN, IODIR_OPP);
 8003120:	2203      	movs	r2, #3
 8003122:	2100      	movs	r1, #0
 8003124:	2005      	movs	r0, #5
	IO_EXTI_setup(SW1_PORT, SW1_PIN, IODIR_INF, EXTITRIG_RISE, NULL);
 8003126:	2400      	movs	r4, #0
	IO_setup(LED_PORT, LED_PIN, IODIR_OPP);
 8003128:	f7fe f960 	bl	80013ec <IO_setup>
	IO_EXTI_setup(SW1_PORT, SW1_PIN, IODIR_INF, EXTITRIG_RISE, NULL);
 800312c:	2101      	movs	r1, #1
 800312e:	0023      	movs	r3, r4
 8003130:	0008      	movs	r0, r1
 8003132:	0022      	movs	r2, r4
 8003134:	9400      	str	r4, [sp, #0]
 8003136:	f7fe f9ab 	bl	8001490 <IO_EXTI_setup>
	IO_EXTI_setup(SW2_PORT, SW2_PIN, IODIR_INF, EXTITRIG_RISE, NULL);
 800313a:	0023      	movs	r3, r4
 800313c:	0022      	movs	r2, r4
 800313e:	0021      	movs	r1, r4
 8003140:	2001      	movs	r0, #1
 8003142:	9400      	str	r4, [sp, #0]
 8003144:	f7fe f9a4 	bl	8001490 <IO_EXTI_setup>
	IO_EXTI_setup(SW3_PORT, SW3_PIN, IODIR_INF, EXTITRIG_RISE, NULL);
 8003148:	0023      	movs	r3, r4
 800314a:	0022      	movs	r2, r4
 800314c:	2107      	movs	r1, #7
 800314e:	0020      	movs	r0, r4
 8003150:	9400      	str	r4, [sp, #0]
 8003152:	f7fe f99d 	bl	8001490 <IO_EXTI_setup>
	IO_EXTI_setup(SW4_PORT, SW4_PIN, IODIR_INF, EXTITRIG_RISE, NULL);
 8003156:	0023      	movs	r3, r4
 8003158:	0022      	movs	r2, r4
 800315a:	2106      	movs	r1, #6
 800315c:	0020      	movs	r0, r4
 800315e:	9400      	str	r4, [sp, #0]
 8003160:	f7fe f996 	bl	8001490 <IO_EXTI_setup>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8003164:	2080      	movs	r0, #128	; 0x80
 8003166:	2101      	movs	r1, #1
 8003168:	0540      	lsls	r0, r0, #21
 800316a:	f7ff fc55 	bl	8002a18 <RCC_APB1PeriphClockCmd>
	PWR_WakeUpPinCmd(PWR_WakeUpPin_1, ENABLE);
 800316e:	2080      	movs	r0, #128	; 0x80
 8003170:	2101      	movs	r1, #1
 8003172:	0040      	lsls	r0, r0, #1
 8003174:	f7ff fb38 	bl	80027e8 <PWR_WakeUpPinCmd>
	IO_wrt(LED_PORT, LED_PIN, 0);
 8003178:	0022      	movs	r2, r4
 800317a:	0021      	movs	r1, r4
 800317c:	2005      	movs	r0, #5
 800317e:	f7fe f9cd 	bl	800151c <IO_wrt>
	UART_setup(1, 0, 115200, NULL);
 8003182:	22e1      	movs	r2, #225	; 0xe1
 8003184:	0023      	movs	r3, r4
 8003186:	0252      	lsls	r2, r2, #9
 8003188:	0021      	movs	r1, r4
 800318a:	2001      	movs	r0, #1
 800318c:	f7fe fc26 	bl	80019dc <UART_setup>
	DBG_setup(DBG_printc);
 8003190:	4872      	ldr	r0, [pc, #456]	; (800335c <main+0x270>)
 8003192:	f7ff f8a1 	bl	80022d8 <DBG_setup>
	SPI_setup(1, SPI_MODE_0, 0, SPI_SPEED_MAX);
 8003196:	2302      	movs	r3, #2
 8003198:	0022      	movs	r2, r4
 800319a:	0021      	movs	r1, r4
 800319c:	2001      	movs	r0, #1
 800319e:	f7fe fabb 	bl	8001718 <SPI_setup>
	TIM_setup(3, TIMFREQ_1KHz, NULL);
 80031a2:	2103      	movs	r1, #3
 80031a4:	0022      	movs	r2, r4
 80031a6:	0008      	movs	r0, r1
 80031a8:	f7fe fb4e 	bl	8001848 <TIM_setup>
	IFLASH_setup(NULL);
 80031ac:	0020      	movs	r0, r4
 80031ae:	f7fe f89d 	bl	80012ec <IFLASH_setup>
	nRF24L01_setup(delay_ms, nRF24L01_wCSpin, nRF24L01_wCEpin, nRF24L01_wrSPI);
 80031b2:	4b6b      	ldr	r3, [pc, #428]	; (8003360 <main+0x274>)
 80031b4:	4a6b      	ldr	r2, [pc, #428]	; (8003364 <main+0x278>)
 80031b6:	496c      	ldr	r1, [pc, #432]	; (8003368 <main+0x27c>)
 80031b8:	486c      	ldr	r0, [pc, #432]	; (800336c <main+0x280>)
 80031ba:	f7fe fd01 	bl	8001bc0 <nRF24L01_setup>
		IFLASH_rd(FLASH_PAGEADDR(REMOTEID_FLASHPAGE), 6, id);
 80031be:	ad07      	add	r5, sp, #28
	DBG_print("\r\n Start");
 80031c0:	486b      	ldr	r0, [pc, #428]	; (8003370 <main+0x284>)
 80031c2:	f7ff f89f 	bl	8002304 <DBG_print>
		IFLASH_rd(FLASH_PAGEADDR(REMOTEID_FLASHPAGE), 6, id);
 80031c6:	002a      	movs	r2, r5
 80031c8:	2106      	movs	r1, #6
 80031ca:	486a      	ldr	r0, [pc, #424]	; (8003374 <main+0x288>)
 80031cc:	f7fe f8a6 	bl	800131c <IFLASH_rd>
				id[i] = 0;
 80031d0:	0023      	movs	r3, r4
			if (id[i] == 0xFF)
 80031d2:	5d2a      	ldrb	r2, [r5, r4]
 80031d4:	2aff      	cmp	r2, #255	; 0xff
 80031d6:	d100      	bne.n	80031da <main+0xee>
				id[i] = 0;
 80031d8:	552b      	strb	r3, [r5, r4]
 80031da:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < 6; i++)
 80031dc:	2c06      	cmp	r4, #6
 80031de:	d1f8      	bne.n	80031d2 <main+0xe6>
		REMOTE_UID = REMOTE_BASEID | atoi(id);
 80031e0:	0028      	movs	r0, r5
 80031e2:	f000 fa1d 	bl	8003620 <atoi>
 80031e6:	4f64      	ldr	r7, [pc, #400]	; (8003378 <main+0x28c>)
 80031e8:	4e64      	ldr	r6, [pc, #400]	; (800337c <main+0x290>)
 80031ea:	4338      	orrs	r0, r7
 80031ec:	6030      	str	r0, [r6, #0]
	DBG_print("\r\n UID:%X", REMOTE_UID);
 80031ee:	6831      	ldr	r1, [r6, #0]
 80031f0:	4863      	ldr	r0, [pc, #396]	; (8003380 <main+0x294>)
 80031f2:	f7ff f887 	bl	8002304 <DBG_print>
	if (REMOTE_UID == REMOTE_BASEID)
 80031f6:	6833      	ldr	r3, [r6, #0]
 80031f8:	42bb      	cmp	r3, r7
 80031fa:	d13a      	bne.n	8003272 <main+0x186>
		setup_RFmodule();
 80031fc:	f7ff feca 	bl	8002f94 <setup_RFmodule>
	uint8_t RXdat[RFPROTOCOL_SETUID_SIZE], RXlen = 0, UIDs[6], res;
 8003200:	3403      	adds	r4, #3
 8003202:	ab02      	add	r3, sp, #8
	uint16_t newUID = 0;
 8003204:	260a      	movs	r6, #10
	uint8_t RXdat[RFPROTOCOL_SETUID_SIZE], RXlen = 0, UIDs[6], res;
 8003206:	18e4      	adds	r4, r4, r3
 8003208:	2300      	movs	r3, #0
	uint16_t newUID = 0;
 800320a:	aa02      	add	r2, sp, #8
 800320c:	18b6      	adds	r6, r6, r2
	DBG_print("\r\n %s:Start", __func__);
 800320e:	495d      	ldr	r1, [pc, #372]	; (8003384 <main+0x298>)
 8003210:	485d      	ldr	r0, [pc, #372]	; (8003388 <main+0x29c>)
	uint8_t RXdat[RFPROTOCOL_SETUID_SIZE], RXlen = 0, UIDs[6], res;
 8003212:	7023      	strb	r3, [r4, #0]
	uint16_t newUID = 0;
 8003214:	8033      	strh	r3, [r6, #0]
		LED_blink(1000, 1);
 8003216:	2701      	movs	r7, #1
	DBG_print("\r\n %s:Start", __func__);
 8003218:	f7ff f874 	bl	8002304 <DBG_print>
		LED_blink(1000, 1);
 800321c:	20fa      	movs	r0, #250	; 0xfa
 800321e:	0039      	movs	r1, r7
 8003220:	0080      	lsls	r0, r0, #2
 8003222:	f7ff ff49 	bl	80030b8 <LED_blink>
		SPI_runClkSrc(1);
 8003226:	0038      	movs	r0, r7
 8003228:	f7fe faf1 	bl	800180e <SPI_runClkSrc>
		nRF24L01_recv(RFPROTOCOL_SETUID_SIZE, RXdat, &RXlen);
 800322c:	0022      	movs	r2, r4
 800322e:	0029      	movs	r1, r5
 8003230:	2009      	movs	r0, #9
 8003232:	f7fe ff03 	bl	800203c <nRF24L01_recv>
		SPI_stopClkSrc(1);
 8003236:	0038      	movs	r0, r7
 8003238:	f7fe fae2 	bl	8001800 <SPI_stopClkSrc>
		DBG_print("\r\n %s:RXlen=%u", __func__, RXlen);
 800323c:	7822      	ldrb	r2, [r4, #0]
 800323e:	4951      	ldr	r1, [pc, #324]	; (8003384 <main+0x298>)
 8003240:	4852      	ldr	r0, [pc, #328]	; (800338c <main+0x2a0>)
 8003242:	f7ff f85f 	bl	8002304 <DBG_print>
		if (RXlen >= (RFPROTOCOL_SETUID_SIZE - 1))
 8003246:	7823      	ldrb	r3, [r4, #0]
 8003248:	2b07      	cmp	r3, #7
 800324a:	d9e7      	bls.n	800321c <main+0x130>
			res = RFprotocol_bytes_2_setUID(RXdat, &newUID);
 800324c:	0031      	movs	r1, r6
 800324e:	0028      	movs	r0, r5
 8003250:	f7ff fe3a 	bl	8002ec8 <RFprotocol_bytes_2_setUID>
			if (!res)
 8003254:	2800      	cmp	r0, #0
 8003256:	d1e1      	bne.n	800321c <main+0x130>
				snprintf(UIDs, 6, "%u", newUID);
 8003258:	4a4d      	ldr	r2, [pc, #308]	; (8003390 <main+0x2a4>)
 800325a:	2106      	movs	r1, #6
 800325c:	8833      	ldrh	r3, [r6, #0]
 800325e:	a805      	add	r0, sp, #20
 8003260:	f000 fa28 	bl	80036b4 <sniprintf>
				IFLASH_wrt(FLASH_PAGEADDR(REMOTEID_FLASHPAGE), 6, UIDs);
 8003264:	aa05      	add	r2, sp, #20
 8003266:	2106      	movs	r1, #6
 8003268:	4842      	ldr	r0, [pc, #264]	; (8003374 <main+0x288>)
 800326a:	f7fe f873 	bl	8001354 <IFLASH_wrt>
	NVIC_SystemReset();
 800326e:	f7ff fe59 	bl	8002f24 <NVIC_SystemReset>
		bit0 = IO_rd(SW1_PORT, SW1_PIN);
 8003272:	2101      	movs	r1, #1
 8003274:	0008      	movs	r0, r1
 8003276:	f7fe f977 	bl	8001568 <IO_rd>
		bit1 = IO_rd(SW2_PORT, SW2_PIN);
 800327a:	2100      	movs	r1, #0
		bit0 = IO_rd(SW1_PORT, SW1_PIN);
 800327c:	9002      	str	r0, [sp, #8]
		bit1 = IO_rd(SW2_PORT, SW2_PIN);
 800327e:	2001      	movs	r0, #1
 8003280:	f7fe f972 	bl	8001568 <IO_rd>
		bit2 = IO_rd(SW3_PORT, SW3_PIN);
 8003284:	2107      	movs	r1, #7
		bit1 = IO_rd(SW2_PORT, SW2_PIN);
 8003286:	9003      	str	r0, [sp, #12]
		bit2 = IO_rd(SW3_PORT, SW3_PIN);
 8003288:	2000      	movs	r0, #0
 800328a:	f7fe f96d 	bl	8001568 <IO_rd>
		bit3 = IO_rd(SW4_PORT, SW4_PIN);
 800328e:	0021      	movs	r1, r4
		bit2 = IO_rd(SW3_PORT, SW3_PIN);
 8003290:	0007      	movs	r7, r0
		bit3 = IO_rd(SW4_PORT, SW4_PIN);
 8003292:	2000      	movs	r0, #0
 8003294:	f7fe f968 	bl	8001568 <IO_rd>
		key_2send |= bit0 ? 0x1 : 0;
 8003298:	9b02      	ldr	r3, [sp, #8]
		key_2send |= bit3 ? 0x8 : 0;
 800329a:	4c3e      	ldr	r4, [pc, #248]	; (8003394 <main+0x2a8>)
		key_2send |= bit0 ? 0x1 : 0;
 800329c:	1e5a      	subs	r2, r3, #1
 800329e:	4193      	sbcs	r3, r2
		key_2send |= bit1 ? 0x2 : 0;
 80032a0:	9a03      	ldr	r2, [sp, #12]
 80032a2:	1e51      	subs	r1, r2, #1
 80032a4:	418a      	sbcs	r2, r1
 80032a6:	0052      	lsls	r2, r2, #1
 80032a8:	431a      	orrs	r2, r3
		key_2send |= bit2 ? 0x4 : 0;
 80032aa:	003b      	movs	r3, r7
 80032ac:	1e59      	subs	r1, r3, #1
 80032ae:	418b      	sbcs	r3, r1
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	431a      	orrs	r2, r3
		key_2send |= bit3 ? 0x8 : 0;
 80032b4:	0003      	movs	r3, r0
 80032b6:	1e59      	subs	r1, r3, #1
 80032b8:	418b      	sbcs	r3, r1
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4313      	orrs	r3, r2
 80032be:	7023      	strb	r3, [r4, #0]
		DBG_print("\r\n KEY:%u %u %u %u = %u"//
 80032c0:	9a03      	ldr	r2, [sp, #12]
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	9000      	str	r0, [sp, #0]
 80032c6:	003b      	movs	r3, r7
 80032c8:	9902      	ldr	r1, [sp, #8]
 80032ca:	4833      	ldr	r0, [pc, #204]	; (8003398 <main+0x2ac>)
 80032cc:	f7ff f81a 	bl	8002304 <DBG_print>
	if (key_2send)
 80032d0:	7823      	ldrb	r3, [r4, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d032      	beq.n	800333c <main+0x250>
		transDat.SenderAddr = REMOTE_UID;
 80032d6:	6832      	ldr	r2, [r6, #0]
		transDat.data[0] = key_2send;
 80032d8:	722b      	strb	r3, [r5, #8]
		transDat.SenderAddr = REMOTE_UID;
 80032da:	9207      	str	r2, [sp, #28]
		transDat.timestamp = timerCtUp;
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <main+0x2b0>)
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	80aa      	strh	r2, [r5, #4]
		transDat.command = RFPROTOCOL_CMDBYTE_KEYPRESS;
 80032e2:	2211      	movs	r2, #17
 80032e4:	80ea      	strh	r2, [r5, #6]
		setup_RFmodule();
 80032e6:	f7ff fe55 	bl	8002f94 <setup_RFmodule>
		if (nRF24L01_rdy)
 80032ea:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <main+0x2b4>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d019      	beq.n	8003326 <main+0x23a>
 80032f2:	2603      	movs	r6, #3
				if (!transmit_data(HOST_UID, transDat))
 80032f4:	6829      	ldr	r1, [r5, #0]
 80032f6:	686a      	ldr	r2, [r5, #4]
 80032f8:	68ab      	ldr	r3, [r5, #8]
 80032fa:	482a      	ldr	r0, [pc, #168]	; (80033a4 <main+0x2b8>)
 80032fc:	f7ff fe88 	bl	8003010 <transmit_data>
 8003300:	2800      	cmp	r0, #0
 8003302:	d108      	bne.n	8003316 <main+0x22a>
					LED_blink(300, 1);
 8003304:	2101      	movs	r1, #1
 8003306:	302d      	adds	r0, #45	; 0x2d
 8003308:	30ff      	adds	r0, #255	; 0xff
				LED_blink(300, 2);
 800330a:	f7ff fed5 	bl	80030b8 <LED_blink>
			t_RFsent = 1;
 800330e:	2201      	movs	r2, #1
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <main+0x2bc>)
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	e00b      	b.n	800332e <main+0x242>
 8003316:	3e01      	subs	r6, #1
 8003318:	b2f6      	uxtb	r6, r6
			for (retry = 0; retry < maxRetry; retry++)
 800331a:	2e00      	cmp	r6, #0
 800331c:	d1ea      	bne.n	80032f4 <main+0x208>
				LED_blink(300, 2);
 800331e:	2096      	movs	r0, #150	; 0x96
 8003320:	2102      	movs	r1, #2
 8003322:	0040      	lsls	r0, r0, #1
 8003324:	e7f1      	b.n	800330a <main+0x21e>
			LED_blink(250, 4);
 8003326:	2104      	movs	r1, #4
 8003328:	20fa      	movs	r0, #250	; 0xfa
 800332a:	f7ff fec5 	bl	80030b8 <LED_blink>
		LED_blink(500, 1);
 800332e:	20fa      	movs	r0, #250	; 0xfa
 8003330:	2101      	movs	r1, #1
 8003332:	0040      	lsls	r0, r0, #1
 8003334:	f7ff fec0 	bl	80030b8 <LED_blink>
		key_2send = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	7023      	strb	r3, [r4, #0]
	DBG_print("\r\n PowerDown");
 800333c:	481b      	ldr	r0, [pc, #108]	; (80033ac <main+0x2c0>)
 800333e:	f7fe ffe1 	bl	8002304 <DBG_print>
	SPI_runClkSrc(1);
 8003342:	2001      	movs	r0, #1
 8003344:	f7fe fa63 	bl	800180e <SPI_runClkSrc>
	nRF24L01_pwrDown();
 8003348:	f7fe fe2e 	bl	8001fa8 <nRF24L01_pwrDown>
	SPI_stopClkSrc(1);
 800334c:	2001      	movs	r0, #1
 800334e:	f7fe fa57 	bl	8001800 <SPI_stopClkSrc>
	delay_ms(500);
 8003352:	20fa      	movs	r0, #250	; 0xfa
 8003354:	0040      	lsls	r0, r0, #1
 8003356:	f7ff fdf1 	bl	8002f3c <delay_ms>
 800335a:	e788      	b.n	800326e <main+0x182>
 800335c:	08002f89 	.word	0x08002f89
 8003360:	08002f7d 	.word	0x08002f7d
 8003364:	08002f55 	.word	0x08002f55
 8003368:	08002f69 	.word	0x08002f69
 800336c:	08002f3d 	.word	0x08002f3d
 8003370:	08004278 	.word	0x08004278
 8003374:	08007c00 	.word	0x08007c00
 8003378:	1a2b0000 	.word	0x1a2b0000
 800337c:	200002cc 	.word	0x200002cc
 8003380:	08004281 	.word	0x08004281
 8003384:	08004250 	.word	0x08004250
 8003388:	0800428b 	.word	0x0800428b
 800338c:	08004297 	.word	0x08004297
 8003390:	080042bb 	.word	0x080042bb
 8003394:	200002d9 	.word	0x200002d9
 8003398:	080042a6 	.word	0x080042a6
 800339c:	200002dc 	.word	0x200002dc
 80033a0:	200002db 	.word	0x200002db
 80033a4:	1a2b3c4d 	.word	0x1a2b3c4d
 80033a8:	20000018 	.word	0x20000018
 80033ac:	080042be 	.word	0x080042be

080033b0 <SysTick_Handler>:
	if (IO_rd(SW1_PORT, SW1_PIN))
 80033b0:	2101      	movs	r1, #1
	delayms_timerTick++;
 80033b2:	4a3f      	ldr	r2, [pc, #252]	; (80034b0 <SysTick_Handler+0x100>)
{
 80033b4:	b570      	push	{r4, r5, r6, lr}
	delayms_timerTick++;
 80033b6:	6813      	ldr	r3, [r2, #0]
	if (IO_rd(SW1_PORT, SW1_PIN))
 80033b8:	0008      	movs	r0, r1
	delayms_timerTick++;
 80033ba:	3301      	adds	r3, #1
 80033bc:	6013      	str	r3, [r2, #0]
	timerCtUp++;
 80033be:	4a3d      	ldr	r2, [pc, #244]	; (80034b4 <SysTick_Handler+0x104>)
		readKey = 2;
 80033c0:	2402      	movs	r4, #2
	timerCtUp++;
 80033c2:	6813      	ldr	r3, [r2, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	6013      	str	r3, [r2, #0]
	if (IO_rd(SW1_PORT, SW1_PIN))
 80033c8:	f7fe f8ce 	bl	8001568 <IO_rd>
	if (IO_rd(SW2_PORT, SW2_PIN))
 80033cc:	2100      	movs	r1, #0
	if (IO_rd(SW1_PORT, SW1_PIN))
 80033ce:	0005      	movs	r5, r0
	if (IO_rd(SW2_PORT, SW2_PIN))
 80033d0:	2001      	movs	r0, #1
 80033d2:	f7fe f8c9 	bl	8001568 <IO_rd>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d102      	bne.n	80033e0 <SysTick_Handler+0x30>
	if (IO_rd(SW1_PORT, SW1_PIN))
 80033da:	1e6c      	subs	r4, r5, #1
 80033dc:	41a5      	sbcs	r5, r4
	uint8_t readKey = 0;
 80033de:	b2ec      	uxtb	r4, r5
	if (IO_rd(SW3_PORT, SW3_PIN))
 80033e0:	2107      	movs	r1, #7
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fe f8c0 	bl	8001568 <IO_rd>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d000      	beq.n	80033ee <SysTick_Handler+0x3e>
		readKey = 3;
 80033ec:	2403      	movs	r4, #3
	if (IO_rd(SW4_PORT, SW4_PIN))
 80033ee:	2106      	movs	r1, #6
 80033f0:	2000      	movs	r0, #0
 80033f2:	f7fe f8b9 	bl	8001568 <IO_rd>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d000      	beq.n	80033fc <SysTick_Handler+0x4c>
		readKey = 4;
 80033fa:	2404      	movs	r4, #4
	if (!IO_rd(ANYSW_PORT, ANYSW_PIN))
 80033fc:	2100      	movs	r1, #0
 80033fe:	0008      	movs	r0, r1
 8003400:	f7fe f8b2 	bl	8001568 <IO_rd>
 8003404:	492c      	ldr	r1, [pc, #176]	; (80034b8 <SysTick_Handler+0x108>)
 8003406:	2800      	cmp	r0, #0
 8003408:	d01e      	beq.n	8003448 <SysTick_Handler+0x98>
	if (readKey)
 800340a:	2c00      	cmp	r4, #0
 800340c:	d00e      	beq.n	800342c <SysTick_Handler+0x7c>
		if (readKey != lastKey)
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <SysTick_Handler+0x10c>)
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	42a2      	cmp	r2, r4
 8003414:	d008      	beq.n	8003428 <SysTick_Handler+0x78>
			key_2send = readKey;
 8003416:	4a2a      	ldr	r2, [pc, #168]	; (80034c0 <SysTick_Handler+0x110>)
			lastKey = readKey;
 8003418:	701c      	strb	r4, [r3, #0]
			key_2send = readKey;
 800341a:	7014      	strb	r4, [r2, #0]
			if (readKey == 1)
 800341c:	2c01      	cmp	r4, #1
 800341e:	d115      	bne.n	800344c <SysTick_Handler+0x9c>
				countKey1++;
 8003420:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <SysTick_Handler+0x114>)
 8003422:	7813      	ldrb	r3, [r2, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	7013      	strb	r3, [r2, #0]
		t_pressKey = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	600b      	str	r3, [r1, #0]
	if (t_pressKey >= (300 / TIMERTICK_RATE))
 800342c:	680b      	ldr	r3, [r1, #0]
 800342e:	2b1d      	cmp	r3, #29
 8003430:	d93a      	bls.n	80034a8 <SysTick_Handler+0xf8>
		lastKey = 0;
 8003432:	2200      	movs	r2, #0
 8003434:	4b21      	ldr	r3, [pc, #132]	; (80034bc <SysTick_Handler+0x10c>)
 8003436:	701a      	strb	r2, [r3, #0]
	if (t_RFsent)
 8003438:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <SysTick_Handler+0x118>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2a00      	cmp	r2, #0
 800343e:	d002      	beq.n	8003446 <SysTick_Handler+0x96>
		t_RFsent++;
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	3201      	adds	r2, #1
 8003444:	601a      	str	r2, [r3, #0]
}
 8003446:	bd70      	pop	{r4, r5, r6, pc}
		readKey = 5;
 8003448:	2405      	movs	r4, #5
 800344a:	e7e0      	b.n	800340e <SysTick_Handler+0x5e>
 800344c:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <SysTick_Handler+0x11c>)
			else if (readKey == 2)
 800344e:	2c02      	cmp	r4, #2
 8003450:	d103      	bne.n	800345a <SysTick_Handler+0xaa>
				countKey2++;
 8003452:	781a      	ldrb	r2, [r3, #0]
 8003454:	3201      	adds	r2, #1
				countKey2 = 0;
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e7e6      	b.n	8003428 <SysTick_Handler+0x78>
				if ((countKey1 == 2) && (countKey2 == 4))
 800345a:	481a      	ldr	r0, [pc, #104]	; (80034c4 <SysTick_Handler+0x114>)
 800345c:	7802      	ldrb	r2, [r0, #0]
 800345e:	2a02      	cmp	r2, #2
 8003460:	d104      	bne.n	800346c <SysTick_Handler+0xbc>
 8003462:	781a      	ldrb	r2, [r3, #0]
 8003464:	2a04      	cmp	r2, #4
 8003466:	d109      	bne.n	800347c <SysTick_Handler+0xcc>
					NVIC_SystemReset();
 8003468:	f7ff fd5c 	bl	8002f24 <NVIC_SystemReset>
				else if ((countKey1 == 1) && (countKey2 == 3))
 800346c:	2a01      	cmp	r2, #1
 800346e:	d111      	bne.n	8003494 <SysTick_Handler+0xe4>
 8003470:	781c      	ldrb	r4, [r3, #0]
 8003472:	2c03      	cmp	r4, #3
 8003474:	d10b      	bne.n	800348e <SysTick_Handler+0xde>
					eraseRemoteUID = 1;
 8003476:	4c16      	ldr	r4, [pc, #88]	; (80034d0 <SysTick_Handler+0x120>)
						eraseRemoteUID = 3;
 8003478:	7022      	strb	r2, [r4, #0]
 800347a:	e008      	b.n	800348e <SysTick_Handler+0xde>
				else if ((countKey1 == 2) && (countKey2 == 2))
 800347c:	2a02      	cmp	r2, #2
 800347e:	d106      	bne.n	800348e <SysTick_Handler+0xde>
					if (eraseRemoteUID == 1)
 8003480:	4c13      	ldr	r4, [pc, #76]	; (80034d0 <SysTick_Handler+0x120>)
 8003482:	7825      	ldrb	r5, [r4, #0]
 8003484:	2d01      	cmp	r5, #1
 8003486:	d0f7      	beq.n	8003478 <SysTick_Handler+0xc8>
						eraseRemoteUID = 0;
 8003488:	2400      	movs	r4, #0
 800348a:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <SysTick_Handler+0x120>)
 800348c:	7014      	strb	r4, [r2, #0]
				countKey1 = 0;
 800348e:	2200      	movs	r2, #0
 8003490:	7002      	strb	r2, [r0, #0]
 8003492:	e7e0      	b.n	8003456 <SysTick_Handler+0xa6>
				else if ((countKey1 == 3) && (countKey2 == 1))
 8003494:	2a03      	cmp	r2, #3
 8003496:	d1fa      	bne.n	800348e <SysTick_Handler+0xde>
 8003498:	781c      	ldrb	r4, [r3, #0]
 800349a:	2c01      	cmp	r4, #1
 800349c:	d1f7      	bne.n	800348e <SysTick_Handler+0xde>
					if (eraseRemoteUID == 2)
 800349e:	4c0c      	ldr	r4, [pc, #48]	; (80034d0 <SysTick_Handler+0x120>)
 80034a0:	7825      	ldrb	r5, [r4, #0]
 80034a2:	2d02      	cmp	r5, #2
 80034a4:	d1f0      	bne.n	8003488 <SysTick_Handler+0xd8>
 80034a6:	e7e7      	b.n	8003478 <SysTick_Handler+0xc8>
		t_pressKey++;
 80034a8:	680b      	ldr	r3, [r1, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	600b      	str	r3, [r1, #0]
 80034ae:	e7c3      	b.n	8003438 <SysTick_Handler+0x88>
 80034b0:	200002d4 	.word	0x200002d4
 80034b4:	200002dc 	.word	0x200002dc
 80034b8:	2000001c 	.word	0x2000001c
 80034bc:	200002da 	.word	0x200002da
 80034c0:	200002d9 	.word	0x200002d9
 80034c4:	200002d0 	.word	0x200002d0
 80034c8:	20000018 	.word	0x20000018
 80034cc:	200002d1 	.word	0x200002d1
 80034d0:	200002d8 	.word	0x200002d8

080034d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034d4:	480d      	ldr	r0, [pc, #52]	; (800350c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80034d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80034da:	e003      	b.n	80034e4 <LoopCopyDataInit>

080034dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80034de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80034e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80034e2:	3104      	adds	r1, #4

080034e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80034e4:	480b      	ldr	r0, [pc, #44]	; (8003514 <LoopForever+0xa>)
  ldr r3, =_edata
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <LoopForever+0xe>)
  adds r2, r0, r1
 80034e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80034ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80034ec:	d3f6      	bcc.n	80034dc <CopyDataInit>
  ldr r2, =_sbss
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <LoopForever+0x12>)
  b LoopFillZerobss
 80034f0:	e002      	b.n	80034f8 <LoopFillZerobss>

080034f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80034f2:	2300      	movs	r3, #0
  str  r3, [r2]
 80034f4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f6:	3204      	adds	r2, #4

080034f8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <LoopForever+0x16>)
  cmp r2, r3
 80034fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80034fc:	d3f9      	bcc.n	80034f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80034fe:	f000 f813 	bl	8003528 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003502:	f000 f893 	bl	800362c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003506:	f7ff fdf1 	bl	80030ec <main>

0800350a <LoopForever>:

LoopForever:
    b LoopForever
 800350a:	e7fe      	b.n	800350a <LoopForever>
  ldr   r0, =_estack
 800350c:	20001000 	.word	0x20001000
  ldr r3, =_sidata
 8003510:	08004430 	.word	0x08004430
  ldr r0, =_sdata
 8003514:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003518:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 800351c:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8003520:	200002f0 	.word	0x200002f0

08003524 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC1_IRQHandler>
	...

08003528 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8003528:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800352a:	2101      	movs	r1, #1
 800352c:	4b34      	ldr	r3, [pc, #208]	; (8003600 <SystemInit+0xd8>)
#if defined(STM32F051)  
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800352e:	4835      	ldr	r0, [pc, #212]	; (8003604 <SystemInit+0xdc>)
  RCC->CR |= (uint32_t)0x00000001;
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	4002      	ands	r2, r0
 800353a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4832      	ldr	r0, [pc, #200]	; (8003608 <SystemInit+0xe0>)
 8003540:	4002      	ands	r2, r0
 8003542:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4831      	ldr	r0, [pc, #196]	; (800360c <SystemInit+0xe4>)
 8003548:	4002      	ands	r2, r0
 800354a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	4830      	ldr	r0, [pc, #192]	; (8003610 <SystemInit+0xe8>)
 8003550:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003552:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8003554:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	4382      	bics	r2, r0
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 800355c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355e:	482d      	ldr	r0, [pc, #180]	; (8003614 <SystemInit+0xec>)
 8003560:	4002      	ands	r2, r0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8003564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003566:	2080      	movs	r0, #128	; 0x80
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8003568:	438a      	bics	r2, r1
 800356a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->CIR = 0x00000000;
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003570:	9200      	str	r2, [sp, #0]
 8003572:	9201      	str	r2, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003574:	2280      	movs	r2, #128	; 0x80
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	0252      	lsls	r2, r2, #9
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800357e:	0280      	lsls	r0, r0, #10
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003580:	22a0      	movs	r2, #160	; 0xa0
 8003582:	0004      	movs	r4, r0
 8003584:	01d2      	lsls	r2, r2, #7
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003586:	6819      	ldr	r1, [r3, #0]
 8003588:	4001      	ands	r1, r0
 800358a:	9101      	str	r1, [sp, #4]
    StartUpCounter++;  
 800358c:	9900      	ldr	r1, [sp, #0]
 800358e:	3101      	adds	r1, #1
 8003590:	9100      	str	r1, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003592:	9901      	ldr	r1, [sp, #4]
 8003594:	2900      	cmp	r1, #0
 8003596:	d102      	bne.n	800359e <SystemInit+0x76>
 8003598:	9900      	ldr	r1, [sp, #0]
 800359a:	4291      	cmp	r1, r2
 800359c:	d1f3      	bne.n	8003586 <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4022      	ands	r2, r4
 80035a2:	d000      	beq.n	80035a6 <SystemInit+0x7e>
  {
    HSEStatus = (uint32_t)0x01;
 80035a4:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80035a6:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80035a8:	9a01      	ldr	r2, [sp, #4]
 80035aa:	2a01      	cmp	r2, #1
 80035ac:	d126      	bne.n	80035fc <SystemInit+0xd4>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80035ae:	2111      	movs	r1, #17
 80035b0:	4a19      	ldr	r2, [pc, #100]	; (8003618 <SystemInit+0xf0>)
 80035b2:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80035b4:	685a      	ldr	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80035b6:	4919      	ldr	r1, [pc, #100]	; (800361c <SystemInit+0xf4>)
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80035b8:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	400a      	ands	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL2);
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	0252      	lsls	r2, r2, #9
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	6819      	ldr	r1, [r3, #0]
 80035d2:	0452      	lsls	r2, r2, #17
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	0492      	lsls	r2, r2, #18
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	4211      	tst	r1, r2
 80035e0:	d0fc      	beq.n	80035dc <SystemInit+0xb4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80035e2:	2103      	movs	r1, #3
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	438a      	bics	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80035ea:	2202      	movs	r2, #2
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	430a      	orrs	r2, r1

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80035f0:	210c      	movs	r1, #12
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80035f2:	605a      	str	r2, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	400a      	ands	r2, r1
 80035f8:	2a08      	cmp	r2, #8
 80035fa:	d1fb      	bne.n	80035f4 <SystemInit+0xcc>
}
 80035fc:	bd13      	pop	{r0, r1, r4, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	40021000 	.word	0x40021000
 8003604:	08ffb80c 	.word	0x08ffb80c
 8003608:	fef6ffff 	.word	0xfef6ffff
 800360c:	fffbffff 	.word	0xfffbffff
 8003610:	ffc0ffff 	.word	0xffc0ffff
 8003614:	fffffeac 	.word	0xfffffeac
 8003618:	40022000 	.word	0x40022000
 800361c:	ffc07fff 	.word	0xffc07fff

08003620 <atoi>:
 8003620:	b510      	push	{r4, lr}
 8003622:	220a      	movs	r2, #10
 8003624:	2100      	movs	r1, #0
 8003626:	f000 f8fd 	bl	8003824 <strtol>
 800362a:	bd10      	pop	{r4, pc}

0800362c <__libc_init_array>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	2600      	movs	r6, #0
 8003630:	4d0c      	ldr	r5, [pc, #48]	; (8003664 <__libc_init_array+0x38>)
 8003632:	4c0d      	ldr	r4, [pc, #52]	; (8003668 <__libc_init_array+0x3c>)
 8003634:	1b64      	subs	r4, r4, r5
 8003636:	10a4      	asrs	r4, r4, #2
 8003638:	42a6      	cmp	r6, r4
 800363a:	d109      	bne.n	8003650 <__libc_init_array+0x24>
 800363c:	2600      	movs	r6, #0
 800363e:	f000 fd2d 	bl	800409c <_init>
 8003642:	4d0a      	ldr	r5, [pc, #40]	; (800366c <__libc_init_array+0x40>)
 8003644:	4c0a      	ldr	r4, [pc, #40]	; (8003670 <__libc_init_array+0x44>)
 8003646:	1b64      	subs	r4, r4, r5
 8003648:	10a4      	asrs	r4, r4, #2
 800364a:	42a6      	cmp	r6, r4
 800364c:	d105      	bne.n	800365a <__libc_init_array+0x2e>
 800364e:	bd70      	pop	{r4, r5, r6, pc}
 8003650:	00b3      	lsls	r3, r6, #2
 8003652:	58eb      	ldr	r3, [r5, r3]
 8003654:	4798      	blx	r3
 8003656:	3601      	adds	r6, #1
 8003658:	e7ee      	b.n	8003638 <__libc_init_array+0xc>
 800365a:	00b3      	lsls	r3, r6, #2
 800365c:	58eb      	ldr	r3, [r5, r3]
 800365e:	4798      	blx	r3
 8003660:	3601      	adds	r6, #1
 8003662:	e7f2      	b.n	800364a <__libc_init_array+0x1e>
 8003664:	08004428 	.word	0x08004428
 8003668:	08004428 	.word	0x08004428
 800366c:	08004428 	.word	0x08004428
 8003670:	0800442c 	.word	0x0800442c

08003674 <memcmp>:
 8003674:	b530      	push	{r4, r5, lr}
 8003676:	2400      	movs	r4, #0
 8003678:	42a2      	cmp	r2, r4
 800367a:	d101      	bne.n	8003680 <memcmp+0xc>
 800367c:	2000      	movs	r0, #0
 800367e:	e005      	b.n	800368c <memcmp+0x18>
 8003680:	5d03      	ldrb	r3, [r0, r4]
 8003682:	1c65      	adds	r5, r4, #1
 8003684:	5d0c      	ldrb	r4, [r1, r4]
 8003686:	42a3      	cmp	r3, r4
 8003688:	d001      	beq.n	800368e <memcmp+0x1a>
 800368a:	1b18      	subs	r0, r3, r4
 800368c:	bd30      	pop	{r4, r5, pc}
 800368e:	002c      	movs	r4, r5
 8003690:	e7f2      	b.n	8003678 <memcmp+0x4>

08003692 <memcpy>:
 8003692:	2300      	movs	r3, #0
 8003694:	b510      	push	{r4, lr}
 8003696:	429a      	cmp	r2, r3
 8003698:	d100      	bne.n	800369c <memcpy+0xa>
 800369a:	bd10      	pop	{r4, pc}
 800369c:	5ccc      	ldrb	r4, [r1, r3]
 800369e:	54c4      	strb	r4, [r0, r3]
 80036a0:	3301      	adds	r3, #1
 80036a2:	e7f8      	b.n	8003696 <memcpy+0x4>

080036a4 <memset>:
 80036a4:	0003      	movs	r3, r0
 80036a6:	1882      	adds	r2, r0, r2
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d100      	bne.n	80036ae <memset+0xa>
 80036ac:	4770      	bx	lr
 80036ae:	7019      	strb	r1, [r3, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	e7f9      	b.n	80036a8 <memset+0x4>

080036b4 <sniprintf>:
 80036b4:	b40c      	push	{r2, r3}
 80036b6:	b530      	push	{r4, r5, lr}
 80036b8:	4b16      	ldr	r3, [pc, #88]	; (8003714 <sniprintf+0x60>)
 80036ba:	b09d      	sub	sp, #116	; 0x74
 80036bc:	1e0c      	subs	r4, r1, #0
 80036be:	681d      	ldr	r5, [r3, #0]
 80036c0:	da08      	bge.n	80036d4 <sniprintf+0x20>
 80036c2:	238b      	movs	r3, #139	; 0x8b
 80036c4:	2001      	movs	r0, #1
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	4240      	negs	r0, r0
 80036ca:	b01d      	add	sp, #116	; 0x74
 80036cc:	bc30      	pop	{r4, r5}
 80036ce:	bc08      	pop	{r3}
 80036d0:	b002      	add	sp, #8
 80036d2:	4718      	bx	r3
 80036d4:	2382      	movs	r3, #130	; 0x82
 80036d6:	a902      	add	r1, sp, #8
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	818b      	strh	r3, [r1, #12]
 80036dc:	2300      	movs	r3, #0
 80036de:	9002      	str	r0, [sp, #8]
 80036e0:	6108      	str	r0, [r1, #16]
 80036e2:	429c      	cmp	r4, r3
 80036e4:	d000      	beq.n	80036e8 <sniprintf+0x34>
 80036e6:	1e63      	subs	r3, r4, #1
 80036e8:	608b      	str	r3, [r1, #8]
 80036ea:	614b      	str	r3, [r1, #20]
 80036ec:	2301      	movs	r3, #1
 80036ee:	425b      	negs	r3, r3
 80036f0:	81cb      	strh	r3, [r1, #14]
 80036f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80036f4:	ab21      	add	r3, sp, #132	; 0x84
 80036f6:	0028      	movs	r0, r5
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	f000 f97d 	bl	80039f8 <_svfiprintf_r>
 80036fe:	1c43      	adds	r3, r0, #1
 8003700:	da01      	bge.n	8003706 <sniprintf+0x52>
 8003702:	238b      	movs	r3, #139	; 0x8b
 8003704:	602b      	str	r3, [r5, #0]
 8003706:	2c00      	cmp	r4, #0
 8003708:	d0df      	beq.n	80036ca <sniprintf+0x16>
 800370a:	2300      	movs	r3, #0
 800370c:	9a02      	ldr	r2, [sp, #8]
 800370e:	7013      	strb	r3, [r2, #0]
 8003710:	e7db      	b.n	80036ca <sniprintf+0x16>
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	20000020 	.word	0x20000020

08003718 <_strtol_l.isra.0>:
 8003718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371a:	001f      	movs	r7, r3
 800371c:	000e      	movs	r6, r1
 800371e:	b087      	sub	sp, #28
 8003720:	9005      	str	r0, [sp, #20]
 8003722:	9103      	str	r1, [sp, #12]
 8003724:	9202      	str	r2, [sp, #8]
 8003726:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003728:	7834      	ldrb	r4, [r6, #0]
 800372a:	f000 f88f 	bl	800384c <__locale_ctype_ptr_l>
 800372e:	2208      	movs	r2, #8
 8003730:	1900      	adds	r0, r0, r4
 8003732:	7843      	ldrb	r3, [r0, #1]
 8003734:	1c75      	adds	r5, r6, #1
 8003736:	4013      	ands	r3, r2
 8003738:	d10c      	bne.n	8003754 <_strtol_l.isra.0+0x3c>
 800373a:	2c2d      	cmp	r4, #45	; 0x2d
 800373c:	d10c      	bne.n	8003758 <_strtol_l.isra.0+0x40>
 800373e:	3301      	adds	r3, #1
 8003740:	782c      	ldrb	r4, [r5, #0]
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	1cb5      	adds	r5, r6, #2
 8003746:	2f00      	cmp	r7, #0
 8003748:	d00c      	beq.n	8003764 <_strtol_l.isra.0+0x4c>
 800374a:	2f10      	cmp	r7, #16
 800374c:	d114      	bne.n	8003778 <_strtol_l.isra.0+0x60>
 800374e:	2c30      	cmp	r4, #48	; 0x30
 8003750:	d00a      	beq.n	8003768 <_strtol_l.isra.0+0x50>
 8003752:	e011      	b.n	8003778 <_strtol_l.isra.0+0x60>
 8003754:	002e      	movs	r6, r5
 8003756:	e7e6      	b.n	8003726 <_strtol_l.isra.0+0xe>
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	2c2b      	cmp	r4, #43	; 0x2b
 800375c:	d1f3      	bne.n	8003746 <_strtol_l.isra.0+0x2e>
 800375e:	782c      	ldrb	r4, [r5, #0]
 8003760:	1cb5      	adds	r5, r6, #2
 8003762:	e7f0      	b.n	8003746 <_strtol_l.isra.0+0x2e>
 8003764:	2c30      	cmp	r4, #48	; 0x30
 8003766:	d12f      	bne.n	80037c8 <_strtol_l.isra.0+0xb0>
 8003768:	2220      	movs	r2, #32
 800376a:	782b      	ldrb	r3, [r5, #0]
 800376c:	4393      	bics	r3, r2
 800376e:	2b58      	cmp	r3, #88	; 0x58
 8003770:	d151      	bne.n	8003816 <_strtol_l.isra.0+0xfe>
 8003772:	2710      	movs	r7, #16
 8003774:	786c      	ldrb	r4, [r5, #1]
 8003776:	3502      	adds	r5, #2
 8003778:	9b01      	ldr	r3, [sp, #4]
 800377a:	4a29      	ldr	r2, [pc, #164]	; (8003820 <_strtol_l.isra.0+0x108>)
 800377c:	0039      	movs	r1, r7
 800377e:	189e      	adds	r6, r3, r2
 8003780:	0030      	movs	r0, r6
 8003782:	f7fc fd5b 	bl	800023c <__aeabi_uidivmod>
 8003786:	0030      	movs	r0, r6
 8003788:	9104      	str	r1, [sp, #16]
 800378a:	0039      	movs	r1, r7
 800378c:	f7fc fcd0 	bl	8000130 <__udivsi3>
 8003790:	2101      	movs	r1, #1
 8003792:	2300      	movs	r3, #0
 8003794:	4249      	negs	r1, r1
 8003796:	0002      	movs	r2, r0
 8003798:	468c      	mov	ip, r1
 800379a:	0018      	movs	r0, r3
 800379c:	0021      	movs	r1, r4
 800379e:	3930      	subs	r1, #48	; 0x30
 80037a0:	2909      	cmp	r1, #9
 80037a2:	d813      	bhi.n	80037cc <_strtol_l.isra.0+0xb4>
 80037a4:	000c      	movs	r4, r1
 80037a6:	42a7      	cmp	r7, r4
 80037a8:	dd1c      	ble.n	80037e4 <_strtol_l.isra.0+0xcc>
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	d009      	beq.n	80037c2 <_strtol_l.isra.0+0xaa>
 80037ae:	4663      	mov	r3, ip
 80037b0:	4282      	cmp	r2, r0
 80037b2:	d306      	bcc.n	80037c2 <_strtol_l.isra.0+0xaa>
 80037b4:	d102      	bne.n	80037bc <_strtol_l.isra.0+0xa4>
 80037b6:	9904      	ldr	r1, [sp, #16]
 80037b8:	42a1      	cmp	r1, r4
 80037ba:	db02      	blt.n	80037c2 <_strtol_l.isra.0+0xaa>
 80037bc:	2301      	movs	r3, #1
 80037be:	4378      	muls	r0, r7
 80037c0:	1820      	adds	r0, r4, r0
 80037c2:	782c      	ldrb	r4, [r5, #0]
 80037c4:	3501      	adds	r5, #1
 80037c6:	e7e9      	b.n	800379c <_strtol_l.isra.0+0x84>
 80037c8:	270a      	movs	r7, #10
 80037ca:	e7d5      	b.n	8003778 <_strtol_l.isra.0+0x60>
 80037cc:	0021      	movs	r1, r4
 80037ce:	3941      	subs	r1, #65	; 0x41
 80037d0:	2919      	cmp	r1, #25
 80037d2:	d801      	bhi.n	80037d8 <_strtol_l.isra.0+0xc0>
 80037d4:	3c37      	subs	r4, #55	; 0x37
 80037d6:	e7e6      	b.n	80037a6 <_strtol_l.isra.0+0x8e>
 80037d8:	0021      	movs	r1, r4
 80037da:	3961      	subs	r1, #97	; 0x61
 80037dc:	2919      	cmp	r1, #25
 80037de:	d801      	bhi.n	80037e4 <_strtol_l.isra.0+0xcc>
 80037e0:	3c57      	subs	r4, #87	; 0x57
 80037e2:	e7e0      	b.n	80037a6 <_strtol_l.isra.0+0x8e>
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	d108      	bne.n	80037fa <_strtol_l.isra.0+0xe2>
 80037e8:	9a05      	ldr	r2, [sp, #20]
 80037ea:	3323      	adds	r3, #35	; 0x23
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	9b02      	ldr	r3, [sp, #8]
 80037f0:	0030      	movs	r0, r6
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <_strtol_l.isra.0+0xf6>
 80037f6:	b007      	add	sp, #28
 80037f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037fa:	9a01      	ldr	r2, [sp, #4]
 80037fc:	2a00      	cmp	r2, #0
 80037fe:	d000      	beq.n	8003802 <_strtol_l.isra.0+0xea>
 8003800:	4240      	negs	r0, r0
 8003802:	9a02      	ldr	r2, [sp, #8]
 8003804:	2a00      	cmp	r2, #0
 8003806:	d0f6      	beq.n	80037f6 <_strtol_l.isra.0+0xde>
 8003808:	9a03      	ldr	r2, [sp, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d000      	beq.n	8003810 <_strtol_l.isra.0+0xf8>
 800380e:	1e6a      	subs	r2, r5, #1
 8003810:	9b02      	ldr	r3, [sp, #8]
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e7ef      	b.n	80037f6 <_strtol_l.isra.0+0xde>
 8003816:	2430      	movs	r4, #48	; 0x30
 8003818:	2f00      	cmp	r7, #0
 800381a:	d1ad      	bne.n	8003778 <_strtol_l.isra.0+0x60>
 800381c:	3708      	adds	r7, #8
 800381e:	e7ab      	b.n	8003778 <_strtol_l.isra.0+0x60>
 8003820:	7fffffff 	.word	0x7fffffff

08003824 <strtol>:
 8003824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003826:	0013      	movs	r3, r2
 8003828:	4a06      	ldr	r2, [pc, #24]	; (8003844 <strtol+0x20>)
 800382a:	0005      	movs	r5, r0
 800382c:	6810      	ldr	r0, [r2, #0]
 800382e:	6a04      	ldr	r4, [r0, #32]
 8003830:	2c00      	cmp	r4, #0
 8003832:	d100      	bne.n	8003836 <strtol+0x12>
 8003834:	4c04      	ldr	r4, [pc, #16]	; (8003848 <strtol+0x24>)
 8003836:	000a      	movs	r2, r1
 8003838:	9400      	str	r4, [sp, #0]
 800383a:	0029      	movs	r1, r5
 800383c:	f7ff ff6c 	bl	8003718 <_strtol_l.isra.0>
 8003840:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	20000020 	.word	0x20000020
 8003848:	20000084 	.word	0x20000084

0800384c <__locale_ctype_ptr_l>:
 800384c:	30ec      	adds	r0, #236	; 0xec
 800384e:	6800      	ldr	r0, [r0, #0]
 8003850:	4770      	bx	lr

08003852 <__ascii_mbtowc>:
 8003852:	b082      	sub	sp, #8
 8003854:	2900      	cmp	r1, #0
 8003856:	d100      	bne.n	800385a <__ascii_mbtowc+0x8>
 8003858:	a901      	add	r1, sp, #4
 800385a:	1e10      	subs	r0, r2, #0
 800385c:	d006      	beq.n	800386c <__ascii_mbtowc+0x1a>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <__ascii_mbtowc+0x1e>
 8003862:	7813      	ldrb	r3, [r2, #0]
 8003864:	600b      	str	r3, [r1, #0]
 8003866:	7810      	ldrb	r0, [r2, #0]
 8003868:	1e43      	subs	r3, r0, #1
 800386a:	4198      	sbcs	r0, r3
 800386c:	b002      	add	sp, #8
 800386e:	4770      	bx	lr
 8003870:	2002      	movs	r0, #2
 8003872:	4240      	negs	r0, r0
 8003874:	e7fa      	b.n	800386c <__ascii_mbtowc+0x1a>
	...

08003878 <_malloc_r>:
 8003878:	2303      	movs	r3, #3
 800387a:	b570      	push	{r4, r5, r6, lr}
 800387c:	1ccd      	adds	r5, r1, #3
 800387e:	439d      	bics	r5, r3
 8003880:	3508      	adds	r5, #8
 8003882:	0006      	movs	r6, r0
 8003884:	2d0c      	cmp	r5, #12
 8003886:	d21e      	bcs.n	80038c6 <_malloc_r+0x4e>
 8003888:	250c      	movs	r5, #12
 800388a:	42a9      	cmp	r1, r5
 800388c:	d81d      	bhi.n	80038ca <_malloc_r+0x52>
 800388e:	0030      	movs	r0, r6
 8003890:	f000 fb79 	bl	8003f86 <__malloc_lock>
 8003894:	4a25      	ldr	r2, [pc, #148]	; (800392c <_malloc_r+0xb4>)
 8003896:	6814      	ldr	r4, [r2, #0]
 8003898:	0021      	movs	r1, r4
 800389a:	2900      	cmp	r1, #0
 800389c:	d119      	bne.n	80038d2 <_malloc_r+0x5a>
 800389e:	4c24      	ldr	r4, [pc, #144]	; (8003930 <_malloc_r+0xb8>)
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d103      	bne.n	80038ae <_malloc_r+0x36>
 80038a6:	0030      	movs	r0, r6
 80038a8:	f000 fb32 	bl	8003f10 <_sbrk_r>
 80038ac:	6020      	str	r0, [r4, #0]
 80038ae:	0029      	movs	r1, r5
 80038b0:	0030      	movs	r0, r6
 80038b2:	f000 fb2d 	bl	8003f10 <_sbrk_r>
 80038b6:	1c43      	adds	r3, r0, #1
 80038b8:	d12c      	bne.n	8003914 <_malloc_r+0x9c>
 80038ba:	230c      	movs	r3, #12
 80038bc:	0030      	movs	r0, r6
 80038be:	6033      	str	r3, [r6, #0]
 80038c0:	f000 fb62 	bl	8003f88 <__malloc_unlock>
 80038c4:	e003      	b.n	80038ce <_malloc_r+0x56>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	dadf      	bge.n	800388a <_malloc_r+0x12>
 80038ca:	230c      	movs	r3, #12
 80038cc:	6033      	str	r3, [r6, #0]
 80038ce:	2000      	movs	r0, #0
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
 80038d2:	680b      	ldr	r3, [r1, #0]
 80038d4:	1b5b      	subs	r3, r3, r5
 80038d6:	d41a      	bmi.n	800390e <_malloc_r+0x96>
 80038d8:	2b0b      	cmp	r3, #11
 80038da:	d903      	bls.n	80038e4 <_malloc_r+0x6c>
 80038dc:	600b      	str	r3, [r1, #0]
 80038de:	18cc      	adds	r4, r1, r3
 80038e0:	6025      	str	r5, [r4, #0]
 80038e2:	e003      	b.n	80038ec <_malloc_r+0x74>
 80038e4:	428c      	cmp	r4, r1
 80038e6:	d10e      	bne.n	8003906 <_malloc_r+0x8e>
 80038e8:	6863      	ldr	r3, [r4, #4]
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	0030      	movs	r0, r6
 80038ee:	f000 fb4b 	bl	8003f88 <__malloc_unlock>
 80038f2:	0020      	movs	r0, r4
 80038f4:	2207      	movs	r2, #7
 80038f6:	300b      	adds	r0, #11
 80038f8:	1d23      	adds	r3, r4, #4
 80038fa:	4390      	bics	r0, r2
 80038fc:	1ac3      	subs	r3, r0, r3
 80038fe:	d0e7      	beq.n	80038d0 <_malloc_r+0x58>
 8003900:	425a      	negs	r2, r3
 8003902:	50e2      	str	r2, [r4, r3]
 8003904:	e7e4      	b.n	80038d0 <_malloc_r+0x58>
 8003906:	684b      	ldr	r3, [r1, #4]
 8003908:	6063      	str	r3, [r4, #4]
 800390a:	000c      	movs	r4, r1
 800390c:	e7ee      	b.n	80038ec <_malloc_r+0x74>
 800390e:	000c      	movs	r4, r1
 8003910:	6849      	ldr	r1, [r1, #4]
 8003912:	e7c2      	b.n	800389a <_malloc_r+0x22>
 8003914:	2303      	movs	r3, #3
 8003916:	1cc4      	adds	r4, r0, #3
 8003918:	439c      	bics	r4, r3
 800391a:	42a0      	cmp	r0, r4
 800391c:	d0e0      	beq.n	80038e0 <_malloc_r+0x68>
 800391e:	1a21      	subs	r1, r4, r0
 8003920:	0030      	movs	r0, r6
 8003922:	f000 faf5 	bl	8003f10 <_sbrk_r>
 8003926:	1c43      	adds	r3, r0, #1
 8003928:	d1da      	bne.n	80038e0 <_malloc_r+0x68>
 800392a:	e7c6      	b.n	80038ba <_malloc_r+0x42>
 800392c:	200002e0 	.word	0x200002e0
 8003930:	200002e4 	.word	0x200002e4

08003934 <__ssputs_r>:
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003936:	688e      	ldr	r6, [r1, #8]
 8003938:	b085      	sub	sp, #20
 800393a:	0007      	movs	r7, r0
 800393c:	000c      	movs	r4, r1
 800393e:	9203      	str	r2, [sp, #12]
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	429e      	cmp	r6, r3
 8003944:	d839      	bhi.n	80039ba <__ssputs_r+0x86>
 8003946:	2390      	movs	r3, #144	; 0x90
 8003948:	898a      	ldrh	r2, [r1, #12]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	421a      	tst	r2, r3
 800394e:	d034      	beq.n	80039ba <__ssputs_r+0x86>
 8003950:	2503      	movs	r5, #3
 8003952:	6909      	ldr	r1, [r1, #16]
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	1a5b      	subs	r3, r3, r1
 8003958:	9302      	str	r3, [sp, #8]
 800395a:	6963      	ldr	r3, [r4, #20]
 800395c:	9802      	ldr	r0, [sp, #8]
 800395e:	435d      	muls	r5, r3
 8003960:	0feb      	lsrs	r3, r5, #31
 8003962:	195d      	adds	r5, r3, r5
 8003964:	9b01      	ldr	r3, [sp, #4]
 8003966:	106d      	asrs	r5, r5, #1
 8003968:	3301      	adds	r3, #1
 800396a:	181b      	adds	r3, r3, r0
 800396c:	42ab      	cmp	r3, r5
 800396e:	d900      	bls.n	8003972 <__ssputs_r+0x3e>
 8003970:	001d      	movs	r5, r3
 8003972:	0553      	lsls	r3, r2, #21
 8003974:	d532      	bpl.n	80039dc <__ssputs_r+0xa8>
 8003976:	0029      	movs	r1, r5
 8003978:	0038      	movs	r0, r7
 800397a:	f7ff ff7d 	bl	8003878 <_malloc_r>
 800397e:	1e06      	subs	r6, r0, #0
 8003980:	d109      	bne.n	8003996 <__ssputs_r+0x62>
 8003982:	230c      	movs	r3, #12
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	2340      	movs	r3, #64	; 0x40
 8003988:	2001      	movs	r0, #1
 800398a:	89a2      	ldrh	r2, [r4, #12]
 800398c:	4240      	negs	r0, r0
 800398e:	4313      	orrs	r3, r2
 8003990:	81a3      	strh	r3, [r4, #12]
 8003992:	b005      	add	sp, #20
 8003994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003996:	9a02      	ldr	r2, [sp, #8]
 8003998:	6921      	ldr	r1, [r4, #16]
 800399a:	f7ff fe7a 	bl	8003692 <memcpy>
 800399e:	89a3      	ldrh	r3, [r4, #12]
 80039a0:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <__ssputs_r+0xc0>)
 80039a2:	401a      	ands	r2, r3
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	4313      	orrs	r3, r2
 80039a8:	81a3      	strh	r3, [r4, #12]
 80039aa:	9b02      	ldr	r3, [sp, #8]
 80039ac:	6126      	str	r6, [r4, #16]
 80039ae:	18f6      	adds	r6, r6, r3
 80039b0:	6026      	str	r6, [r4, #0]
 80039b2:	6165      	str	r5, [r4, #20]
 80039b4:	9e01      	ldr	r6, [sp, #4]
 80039b6:	1aed      	subs	r5, r5, r3
 80039b8:	60a5      	str	r5, [r4, #8]
 80039ba:	9b01      	ldr	r3, [sp, #4]
 80039bc:	42b3      	cmp	r3, r6
 80039be:	d200      	bcs.n	80039c2 <__ssputs_r+0x8e>
 80039c0:	001e      	movs	r6, r3
 80039c2:	0032      	movs	r2, r6
 80039c4:	9903      	ldr	r1, [sp, #12]
 80039c6:	6820      	ldr	r0, [r4, #0]
 80039c8:	f000 facb 	bl	8003f62 <memmove>
 80039cc:	68a3      	ldr	r3, [r4, #8]
 80039ce:	2000      	movs	r0, #0
 80039d0:	1b9b      	subs	r3, r3, r6
 80039d2:	60a3      	str	r3, [r4, #8]
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	199e      	adds	r6, r3, r6
 80039d8:	6026      	str	r6, [r4, #0]
 80039da:	e7da      	b.n	8003992 <__ssputs_r+0x5e>
 80039dc:	002a      	movs	r2, r5
 80039de:	0038      	movs	r0, r7
 80039e0:	f000 fb1e 	bl	8004020 <_realloc_r>
 80039e4:	1e06      	subs	r6, r0, #0
 80039e6:	d1e0      	bne.n	80039aa <__ssputs_r+0x76>
 80039e8:	6921      	ldr	r1, [r4, #16]
 80039ea:	0038      	movs	r0, r7
 80039ec:	f000 face 	bl	8003f8c <_free_r>
 80039f0:	e7c7      	b.n	8003982 <__ssputs_r+0x4e>
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	fffffb7f 	.word	0xfffffb7f

080039f8 <_svfiprintf_r>:
 80039f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fa:	b09f      	sub	sp, #124	; 0x7c
 80039fc:	9002      	str	r0, [sp, #8]
 80039fe:	9305      	str	r3, [sp, #20]
 8003a00:	898b      	ldrh	r3, [r1, #12]
 8003a02:	000f      	movs	r7, r1
 8003a04:	0016      	movs	r6, r2
 8003a06:	061b      	lsls	r3, r3, #24
 8003a08:	d511      	bpl.n	8003a2e <_svfiprintf_r+0x36>
 8003a0a:	690b      	ldr	r3, [r1, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10e      	bne.n	8003a2e <_svfiprintf_r+0x36>
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	f7ff ff31 	bl	8003878 <_malloc_r>
 8003a16:	6038      	str	r0, [r7, #0]
 8003a18:	6138      	str	r0, [r7, #16]
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d105      	bne.n	8003a2a <_svfiprintf_r+0x32>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	9a02      	ldr	r2, [sp, #8]
 8003a22:	3801      	subs	r0, #1
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	b01f      	add	sp, #124	; 0x7c
 8003a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a2a:	2340      	movs	r3, #64	; 0x40
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	ad06      	add	r5, sp, #24
 8003a32:	616b      	str	r3, [r5, #20]
 8003a34:	3320      	adds	r3, #32
 8003a36:	766b      	strb	r3, [r5, #25]
 8003a38:	3310      	adds	r3, #16
 8003a3a:	76ab      	strb	r3, [r5, #26]
 8003a3c:	0034      	movs	r4, r6
 8003a3e:	7823      	ldrb	r3, [r4, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d147      	bne.n	8003ad4 <_svfiprintf_r+0xdc>
 8003a44:	1ba3      	subs	r3, r4, r6
 8003a46:	9304      	str	r3, [sp, #16]
 8003a48:	d00d      	beq.n	8003a66 <_svfiprintf_r+0x6e>
 8003a4a:	1ba3      	subs	r3, r4, r6
 8003a4c:	0032      	movs	r2, r6
 8003a4e:	0039      	movs	r1, r7
 8003a50:	9802      	ldr	r0, [sp, #8]
 8003a52:	f7ff ff6f 	bl	8003934 <__ssputs_r>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	d100      	bne.n	8003a5c <_svfiprintf_r+0x64>
 8003a5a:	e0b5      	b.n	8003bc8 <_svfiprintf_r+0x1d0>
 8003a5c:	696a      	ldr	r2, [r5, #20]
 8003a5e:	9b04      	ldr	r3, [sp, #16]
 8003a60:	4694      	mov	ip, r2
 8003a62:	4463      	add	r3, ip
 8003a64:	616b      	str	r3, [r5, #20]
 8003a66:	7823      	ldrb	r3, [r4, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d100      	bne.n	8003a6e <_svfiprintf_r+0x76>
 8003a6c:	e0ac      	b.n	8003bc8 <_svfiprintf_r+0x1d0>
 8003a6e:	2201      	movs	r2, #1
 8003a70:	2300      	movs	r3, #0
 8003a72:	4252      	negs	r2, r2
 8003a74:	606a      	str	r2, [r5, #4]
 8003a76:	a902      	add	r1, sp, #8
 8003a78:	3254      	adds	r2, #84	; 0x54
 8003a7a:	1852      	adds	r2, r2, r1
 8003a7c:	3401      	adds	r4, #1
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	60eb      	str	r3, [r5, #12]
 8003a82:	60ab      	str	r3, [r5, #8]
 8003a84:	7013      	strb	r3, [r2, #0]
 8003a86:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a88:	4e58      	ldr	r6, [pc, #352]	; (8003bec <_svfiprintf_r+0x1f4>)
 8003a8a:	2205      	movs	r2, #5
 8003a8c:	7821      	ldrb	r1, [r4, #0]
 8003a8e:	0030      	movs	r0, r6
 8003a90:	f000 fa5c 	bl	8003f4c <memchr>
 8003a94:	1c62      	adds	r2, r4, #1
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d120      	bne.n	8003adc <_svfiprintf_r+0xe4>
 8003a9a:	6829      	ldr	r1, [r5, #0]
 8003a9c:	06cb      	lsls	r3, r1, #27
 8003a9e:	d504      	bpl.n	8003aaa <_svfiprintf_r+0xb2>
 8003aa0:	2353      	movs	r3, #83	; 0x53
 8003aa2:	ae02      	add	r6, sp, #8
 8003aa4:	3020      	adds	r0, #32
 8003aa6:	199b      	adds	r3, r3, r6
 8003aa8:	7018      	strb	r0, [r3, #0]
 8003aaa:	070b      	lsls	r3, r1, #28
 8003aac:	d504      	bpl.n	8003ab8 <_svfiprintf_r+0xc0>
 8003aae:	2353      	movs	r3, #83	; 0x53
 8003ab0:	202b      	movs	r0, #43	; 0x2b
 8003ab2:	ae02      	add	r6, sp, #8
 8003ab4:	199b      	adds	r3, r3, r6
 8003ab6:	7018      	strb	r0, [r3, #0]
 8003ab8:	7823      	ldrb	r3, [r4, #0]
 8003aba:	2b2a      	cmp	r3, #42	; 0x2a
 8003abc:	d016      	beq.n	8003aec <_svfiprintf_r+0xf4>
 8003abe:	2000      	movs	r0, #0
 8003ac0:	210a      	movs	r1, #10
 8003ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac4:	7822      	ldrb	r2, [r4, #0]
 8003ac6:	3a30      	subs	r2, #48	; 0x30
 8003ac8:	2a09      	cmp	r2, #9
 8003aca:	d955      	bls.n	8003b78 <_svfiprintf_r+0x180>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d015      	beq.n	8003afc <_svfiprintf_r+0x104>
 8003ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ad2:	e013      	b.n	8003afc <_svfiprintf_r+0x104>
 8003ad4:	2b25      	cmp	r3, #37	; 0x25
 8003ad6:	d0b5      	beq.n	8003a44 <_svfiprintf_r+0x4c>
 8003ad8:	3401      	adds	r4, #1
 8003ada:	e7b0      	b.n	8003a3e <_svfiprintf_r+0x46>
 8003adc:	2301      	movs	r3, #1
 8003ade:	1b80      	subs	r0, r0, r6
 8003ae0:	4083      	lsls	r3, r0
 8003ae2:	6829      	ldr	r1, [r5, #0]
 8003ae4:	0014      	movs	r4, r2
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	e7cd      	b.n	8003a88 <_svfiprintf_r+0x90>
 8003aec:	9b05      	ldr	r3, [sp, #20]
 8003aee:	1d18      	adds	r0, r3, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	9005      	str	r0, [sp, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db39      	blt.n	8003b6c <_svfiprintf_r+0x174>
 8003af8:	9309      	str	r3, [sp, #36]	; 0x24
 8003afa:	0014      	movs	r4, r2
 8003afc:	7823      	ldrb	r3, [r4, #0]
 8003afe:	2b2e      	cmp	r3, #46	; 0x2e
 8003b00:	d10b      	bne.n	8003b1a <_svfiprintf_r+0x122>
 8003b02:	7863      	ldrb	r3, [r4, #1]
 8003b04:	1c62      	adds	r2, r4, #1
 8003b06:	2b2a      	cmp	r3, #42	; 0x2a
 8003b08:	d13e      	bne.n	8003b88 <_svfiprintf_r+0x190>
 8003b0a:	9b05      	ldr	r3, [sp, #20]
 8003b0c:	3402      	adds	r4, #2
 8003b0e:	1d1a      	adds	r2, r3, #4
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	9205      	str	r2, [sp, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	db34      	blt.n	8003b82 <_svfiprintf_r+0x18a>
 8003b18:	9307      	str	r3, [sp, #28]
 8003b1a:	4e35      	ldr	r6, [pc, #212]	; (8003bf0 <_svfiprintf_r+0x1f8>)
 8003b1c:	7821      	ldrb	r1, [r4, #0]
 8003b1e:	2203      	movs	r2, #3
 8003b20:	0030      	movs	r0, r6
 8003b22:	f000 fa13 	bl	8003f4c <memchr>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d006      	beq.n	8003b38 <_svfiprintf_r+0x140>
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	1b80      	subs	r0, r0, r6
 8003b2e:	4083      	lsls	r3, r0
 8003b30:	682a      	ldr	r2, [r5, #0]
 8003b32:	3401      	adds	r4, #1
 8003b34:	4313      	orrs	r3, r2
 8003b36:	602b      	str	r3, [r5, #0]
 8003b38:	7821      	ldrb	r1, [r4, #0]
 8003b3a:	2206      	movs	r2, #6
 8003b3c:	482d      	ldr	r0, [pc, #180]	; (8003bf4 <_svfiprintf_r+0x1fc>)
 8003b3e:	1c66      	adds	r6, r4, #1
 8003b40:	7629      	strb	r1, [r5, #24]
 8003b42:	f000 fa03 	bl	8003f4c <memchr>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d046      	beq.n	8003bd8 <_svfiprintf_r+0x1e0>
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <_svfiprintf_r+0x200>)
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d12f      	bne.n	8003bb0 <_svfiprintf_r+0x1b8>
 8003b50:	6829      	ldr	r1, [r5, #0]
 8003b52:	9b05      	ldr	r3, [sp, #20]
 8003b54:	2207      	movs	r2, #7
 8003b56:	05c9      	lsls	r1, r1, #23
 8003b58:	d528      	bpl.n	8003bac <_svfiprintf_r+0x1b4>
 8003b5a:	189b      	adds	r3, r3, r2
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	3308      	adds	r3, #8
 8003b60:	9305      	str	r3, [sp, #20]
 8003b62:	696b      	ldr	r3, [r5, #20]
 8003b64:	9a03      	ldr	r2, [sp, #12]
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	616b      	str	r3, [r5, #20]
 8003b6a:	e767      	b.n	8003a3c <_svfiprintf_r+0x44>
 8003b6c:	425b      	negs	r3, r3
 8003b6e:	60eb      	str	r3, [r5, #12]
 8003b70:	2302      	movs	r3, #2
 8003b72:	430b      	orrs	r3, r1
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	e7c0      	b.n	8003afa <_svfiprintf_r+0x102>
 8003b78:	434b      	muls	r3, r1
 8003b7a:	3401      	adds	r4, #1
 8003b7c:	189b      	adds	r3, r3, r2
 8003b7e:	2001      	movs	r0, #1
 8003b80:	e7a0      	b.n	8003ac4 <_svfiprintf_r+0xcc>
 8003b82:	2301      	movs	r3, #1
 8003b84:	425b      	negs	r3, r3
 8003b86:	e7c7      	b.n	8003b18 <_svfiprintf_r+0x120>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	0014      	movs	r4, r2
 8003b8c:	200a      	movs	r0, #10
 8003b8e:	001a      	movs	r2, r3
 8003b90:	606b      	str	r3, [r5, #4]
 8003b92:	7821      	ldrb	r1, [r4, #0]
 8003b94:	3930      	subs	r1, #48	; 0x30
 8003b96:	2909      	cmp	r1, #9
 8003b98:	d903      	bls.n	8003ba2 <_svfiprintf_r+0x1aa>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0bd      	beq.n	8003b1a <_svfiprintf_r+0x122>
 8003b9e:	9207      	str	r2, [sp, #28]
 8003ba0:	e7bb      	b.n	8003b1a <_svfiprintf_r+0x122>
 8003ba2:	4342      	muls	r2, r0
 8003ba4:	3401      	adds	r4, #1
 8003ba6:	1852      	adds	r2, r2, r1
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e7f2      	b.n	8003b92 <_svfiprintf_r+0x19a>
 8003bac:	3307      	adds	r3, #7
 8003bae:	e7d5      	b.n	8003b5c <_svfiprintf_r+0x164>
 8003bb0:	ab05      	add	r3, sp, #20
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	003a      	movs	r2, r7
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <_svfiprintf_r+0x204>)
 8003bb8:	0029      	movs	r1, r5
 8003bba:	9802      	ldr	r0, [sp, #8]
 8003bbc:	e000      	b.n	8003bc0 <_svfiprintf_r+0x1c8>
 8003bbe:	bf00      	nop
 8003bc0:	9003      	str	r0, [sp, #12]
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	d1cc      	bne.n	8003b62 <_svfiprintf_r+0x16a>
 8003bc8:	89bb      	ldrh	r3, [r7, #12]
 8003bca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003bcc:	065b      	lsls	r3, r3, #25
 8003bce:	d400      	bmi.n	8003bd2 <_svfiprintf_r+0x1da>
 8003bd0:	e729      	b.n	8003a26 <_svfiprintf_r+0x2e>
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	4240      	negs	r0, r0
 8003bd6:	e726      	b.n	8003a26 <_svfiprintf_r+0x2e>
 8003bd8:	ab05      	add	r3, sp, #20
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	003a      	movs	r2, r7
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <_svfiprintf_r+0x204>)
 8003be0:	0029      	movs	r1, r5
 8003be2:	9802      	ldr	r0, [sp, #8]
 8003be4:	f000 f87a 	bl	8003cdc <_printf_i>
 8003be8:	e7ea      	b.n	8003bc0 <_svfiprintf_r+0x1c8>
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	080042f2 	.word	0x080042f2
 8003bf0:	080042f8 	.word	0x080042f8
 8003bf4:	080042fc 	.word	0x080042fc
 8003bf8:	00000000 	.word	0x00000000
 8003bfc:	08003935 	.word	0x08003935

08003c00 <_printf_common>:
 8003c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c02:	0015      	movs	r5, r2
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	688a      	ldr	r2, [r1, #8]
 8003c08:	690b      	ldr	r3, [r1, #16]
 8003c0a:	9000      	str	r0, [sp, #0]
 8003c0c:	000c      	movs	r4, r1
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	da00      	bge.n	8003c14 <_printf_common+0x14>
 8003c12:	0013      	movs	r3, r2
 8003c14:	0022      	movs	r2, r4
 8003c16:	602b      	str	r3, [r5, #0]
 8003c18:	3243      	adds	r2, #67	; 0x43
 8003c1a:	7812      	ldrb	r2, [r2, #0]
 8003c1c:	2a00      	cmp	r2, #0
 8003c1e:	d001      	beq.n	8003c24 <_printf_common+0x24>
 8003c20:	3301      	adds	r3, #1
 8003c22:	602b      	str	r3, [r5, #0]
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	069b      	lsls	r3, r3, #26
 8003c28:	d502      	bpl.n	8003c30 <_printf_common+0x30>
 8003c2a:	682b      	ldr	r3, [r5, #0]
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	602b      	str	r3, [r5, #0]
 8003c30:	2706      	movs	r7, #6
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	401f      	ands	r7, r3
 8003c36:	d027      	beq.n	8003c88 <_printf_common+0x88>
 8003c38:	0023      	movs	r3, r4
 8003c3a:	3343      	adds	r3, #67	; 0x43
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	4193      	sbcs	r3, r2
 8003c42:	6822      	ldr	r2, [r4, #0]
 8003c44:	0692      	lsls	r2, r2, #26
 8003c46:	d430      	bmi.n	8003caa <_printf_common+0xaa>
 8003c48:	0022      	movs	r2, r4
 8003c4a:	9901      	ldr	r1, [sp, #4]
 8003c4c:	3243      	adds	r2, #67	; 0x43
 8003c4e:	9800      	ldr	r0, [sp, #0]
 8003c50:	9e08      	ldr	r6, [sp, #32]
 8003c52:	47b0      	blx	r6
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d025      	beq.n	8003ca4 <_printf_common+0xa4>
 8003c58:	2306      	movs	r3, #6
 8003c5a:	6820      	ldr	r0, [r4, #0]
 8003c5c:	682a      	ldr	r2, [r5, #0]
 8003c5e:	68e1      	ldr	r1, [r4, #12]
 8003c60:	4003      	ands	r3, r0
 8003c62:	2500      	movs	r5, #0
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d103      	bne.n	8003c70 <_printf_common+0x70>
 8003c68:	1a8d      	subs	r5, r1, r2
 8003c6a:	43eb      	mvns	r3, r5
 8003c6c:	17db      	asrs	r3, r3, #31
 8003c6e:	401d      	ands	r5, r3
 8003c70:	68a3      	ldr	r3, [r4, #8]
 8003c72:	6922      	ldr	r2, [r4, #16]
 8003c74:	4293      	cmp	r3, r2
 8003c76:	dd01      	ble.n	8003c7c <_printf_common+0x7c>
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	18ed      	adds	r5, r5, r3
 8003c7c:	2700      	movs	r7, #0
 8003c7e:	42bd      	cmp	r5, r7
 8003c80:	d120      	bne.n	8003cc4 <_printf_common+0xc4>
 8003c82:	2000      	movs	r0, #0
 8003c84:	e010      	b.n	8003ca8 <_printf_common+0xa8>
 8003c86:	3701      	adds	r7, #1
 8003c88:	68e3      	ldr	r3, [r4, #12]
 8003c8a:	682a      	ldr	r2, [r5, #0]
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	429f      	cmp	r7, r3
 8003c90:	dad2      	bge.n	8003c38 <_printf_common+0x38>
 8003c92:	0022      	movs	r2, r4
 8003c94:	2301      	movs	r3, #1
 8003c96:	3219      	adds	r2, #25
 8003c98:	9901      	ldr	r1, [sp, #4]
 8003c9a:	9800      	ldr	r0, [sp, #0]
 8003c9c:	9e08      	ldr	r6, [sp, #32]
 8003c9e:	47b0      	blx	r6
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d1f0      	bne.n	8003c86 <_printf_common+0x86>
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	4240      	negs	r0, r0
 8003ca8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003caa:	2030      	movs	r0, #48	; 0x30
 8003cac:	18e1      	adds	r1, r4, r3
 8003cae:	3143      	adds	r1, #67	; 0x43
 8003cb0:	7008      	strb	r0, [r1, #0]
 8003cb2:	0021      	movs	r1, r4
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	3145      	adds	r1, #69	; 0x45
 8003cb8:	7809      	ldrb	r1, [r1, #0]
 8003cba:	18a2      	adds	r2, r4, r2
 8003cbc:	3243      	adds	r2, #67	; 0x43
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	7011      	strb	r1, [r2, #0]
 8003cc2:	e7c1      	b.n	8003c48 <_printf_common+0x48>
 8003cc4:	0022      	movs	r2, r4
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	321a      	adds	r2, #26
 8003cca:	9901      	ldr	r1, [sp, #4]
 8003ccc:	9800      	ldr	r0, [sp, #0]
 8003cce:	9e08      	ldr	r6, [sp, #32]
 8003cd0:	47b0      	blx	r6
 8003cd2:	1c43      	adds	r3, r0, #1
 8003cd4:	d0e6      	beq.n	8003ca4 <_printf_common+0xa4>
 8003cd6:	3701      	adds	r7, #1
 8003cd8:	e7d1      	b.n	8003c7e <_printf_common+0x7e>
	...

08003cdc <_printf_i>:
 8003cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cde:	b08b      	sub	sp, #44	; 0x2c
 8003ce0:	9206      	str	r2, [sp, #24]
 8003ce2:	000a      	movs	r2, r1
 8003ce4:	3243      	adds	r2, #67	; 0x43
 8003ce6:	9307      	str	r3, [sp, #28]
 8003ce8:	9005      	str	r0, [sp, #20]
 8003cea:	9204      	str	r2, [sp, #16]
 8003cec:	7e0a      	ldrb	r2, [r1, #24]
 8003cee:	000c      	movs	r4, r1
 8003cf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003cf2:	2a6e      	cmp	r2, #110	; 0x6e
 8003cf4:	d100      	bne.n	8003cf8 <_printf_i+0x1c>
 8003cf6:	e08f      	b.n	8003e18 <_printf_i+0x13c>
 8003cf8:	d817      	bhi.n	8003d2a <_printf_i+0x4e>
 8003cfa:	2a63      	cmp	r2, #99	; 0x63
 8003cfc:	d02c      	beq.n	8003d58 <_printf_i+0x7c>
 8003cfe:	d808      	bhi.n	8003d12 <_printf_i+0x36>
 8003d00:	2a00      	cmp	r2, #0
 8003d02:	d100      	bne.n	8003d06 <_printf_i+0x2a>
 8003d04:	e099      	b.n	8003e3a <_printf_i+0x15e>
 8003d06:	2a58      	cmp	r2, #88	; 0x58
 8003d08:	d054      	beq.n	8003db4 <_printf_i+0xd8>
 8003d0a:	0026      	movs	r6, r4
 8003d0c:	3642      	adds	r6, #66	; 0x42
 8003d0e:	7032      	strb	r2, [r6, #0]
 8003d10:	e029      	b.n	8003d66 <_printf_i+0x8a>
 8003d12:	2a64      	cmp	r2, #100	; 0x64
 8003d14:	d001      	beq.n	8003d1a <_printf_i+0x3e>
 8003d16:	2a69      	cmp	r2, #105	; 0x69
 8003d18:	d1f7      	bne.n	8003d0a <_printf_i+0x2e>
 8003d1a:	6821      	ldr	r1, [r4, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	0608      	lsls	r0, r1, #24
 8003d20:	d523      	bpl.n	8003d6a <_printf_i+0x8e>
 8003d22:	1d11      	adds	r1, r2, #4
 8003d24:	6019      	str	r1, [r3, #0]
 8003d26:	6815      	ldr	r5, [r2, #0]
 8003d28:	e025      	b.n	8003d76 <_printf_i+0x9a>
 8003d2a:	2a73      	cmp	r2, #115	; 0x73
 8003d2c:	d100      	bne.n	8003d30 <_printf_i+0x54>
 8003d2e:	e088      	b.n	8003e42 <_printf_i+0x166>
 8003d30:	d808      	bhi.n	8003d44 <_printf_i+0x68>
 8003d32:	2a6f      	cmp	r2, #111	; 0x6f
 8003d34:	d029      	beq.n	8003d8a <_printf_i+0xae>
 8003d36:	2a70      	cmp	r2, #112	; 0x70
 8003d38:	d1e7      	bne.n	8003d0a <_printf_i+0x2e>
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	6809      	ldr	r1, [r1, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	6022      	str	r2, [r4, #0]
 8003d42:	e003      	b.n	8003d4c <_printf_i+0x70>
 8003d44:	2a75      	cmp	r2, #117	; 0x75
 8003d46:	d020      	beq.n	8003d8a <_printf_i+0xae>
 8003d48:	2a78      	cmp	r2, #120	; 0x78
 8003d4a:	d1de      	bne.n	8003d0a <_printf_i+0x2e>
 8003d4c:	0022      	movs	r2, r4
 8003d4e:	2178      	movs	r1, #120	; 0x78
 8003d50:	3245      	adds	r2, #69	; 0x45
 8003d52:	7011      	strb	r1, [r2, #0]
 8003d54:	4a6c      	ldr	r2, [pc, #432]	; (8003f08 <_printf_i+0x22c>)
 8003d56:	e030      	b.n	8003dba <_printf_i+0xde>
 8003d58:	000e      	movs	r6, r1
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	3642      	adds	r6, #66	; 0x42
 8003d5e:	1d11      	adds	r1, r2, #4
 8003d60:	6019      	str	r1, [r3, #0]
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	7033      	strb	r3, [r6, #0]
 8003d66:	2301      	movs	r3, #1
 8003d68:	e079      	b.n	8003e5e <_printf_i+0x182>
 8003d6a:	0649      	lsls	r1, r1, #25
 8003d6c:	d5d9      	bpl.n	8003d22 <_printf_i+0x46>
 8003d6e:	1d11      	adds	r1, r2, #4
 8003d70:	6019      	str	r1, [r3, #0]
 8003d72:	2300      	movs	r3, #0
 8003d74:	5ed5      	ldrsh	r5, [r2, r3]
 8003d76:	2d00      	cmp	r5, #0
 8003d78:	da03      	bge.n	8003d82 <_printf_i+0xa6>
 8003d7a:	232d      	movs	r3, #45	; 0x2d
 8003d7c:	9a04      	ldr	r2, [sp, #16]
 8003d7e:	426d      	negs	r5, r5
 8003d80:	7013      	strb	r3, [r2, #0]
 8003d82:	4b62      	ldr	r3, [pc, #392]	; (8003f0c <_printf_i+0x230>)
 8003d84:	270a      	movs	r7, #10
 8003d86:	9303      	str	r3, [sp, #12]
 8003d88:	e02f      	b.n	8003dea <_printf_i+0x10e>
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	6819      	ldr	r1, [r3, #0]
 8003d8e:	0605      	lsls	r5, r0, #24
 8003d90:	d503      	bpl.n	8003d9a <_printf_i+0xbe>
 8003d92:	1d08      	adds	r0, r1, #4
 8003d94:	6018      	str	r0, [r3, #0]
 8003d96:	680d      	ldr	r5, [r1, #0]
 8003d98:	e005      	b.n	8003da6 <_printf_i+0xca>
 8003d9a:	0640      	lsls	r0, r0, #25
 8003d9c:	d5f9      	bpl.n	8003d92 <_printf_i+0xb6>
 8003d9e:	680d      	ldr	r5, [r1, #0]
 8003da0:	1d08      	adds	r0, r1, #4
 8003da2:	6018      	str	r0, [r3, #0]
 8003da4:	b2ad      	uxth	r5, r5
 8003da6:	4b59      	ldr	r3, [pc, #356]	; (8003f0c <_printf_i+0x230>)
 8003da8:	2708      	movs	r7, #8
 8003daa:	9303      	str	r3, [sp, #12]
 8003dac:	2a6f      	cmp	r2, #111	; 0x6f
 8003dae:	d018      	beq.n	8003de2 <_printf_i+0x106>
 8003db0:	270a      	movs	r7, #10
 8003db2:	e016      	b.n	8003de2 <_printf_i+0x106>
 8003db4:	3145      	adds	r1, #69	; 0x45
 8003db6:	700a      	strb	r2, [r1, #0]
 8003db8:	4a54      	ldr	r2, [pc, #336]	; (8003f0c <_printf_i+0x230>)
 8003dba:	9203      	str	r2, [sp, #12]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	6821      	ldr	r1, [r4, #0]
 8003dc0:	1d10      	adds	r0, r2, #4
 8003dc2:	6018      	str	r0, [r3, #0]
 8003dc4:	6815      	ldr	r5, [r2, #0]
 8003dc6:	0608      	lsls	r0, r1, #24
 8003dc8:	d522      	bpl.n	8003e10 <_printf_i+0x134>
 8003dca:	07cb      	lsls	r3, r1, #31
 8003dcc:	d502      	bpl.n	8003dd4 <_printf_i+0xf8>
 8003dce:	2320      	movs	r3, #32
 8003dd0:	4319      	orrs	r1, r3
 8003dd2:	6021      	str	r1, [r4, #0]
 8003dd4:	2710      	movs	r7, #16
 8003dd6:	2d00      	cmp	r5, #0
 8003dd8:	d103      	bne.n	8003de2 <_printf_i+0x106>
 8003dda:	2320      	movs	r3, #32
 8003ddc:	6822      	ldr	r2, [r4, #0]
 8003dde:	439a      	bics	r2, r3
 8003de0:	6022      	str	r2, [r4, #0]
 8003de2:	0023      	movs	r3, r4
 8003de4:	2200      	movs	r2, #0
 8003de6:	3343      	adds	r3, #67	; 0x43
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	6863      	ldr	r3, [r4, #4]
 8003dec:	60a3      	str	r3, [r4, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	db5c      	blt.n	8003eac <_printf_i+0x1d0>
 8003df2:	2204      	movs	r2, #4
 8003df4:	6821      	ldr	r1, [r4, #0]
 8003df6:	4391      	bics	r1, r2
 8003df8:	6021      	str	r1, [r4, #0]
 8003dfa:	2d00      	cmp	r5, #0
 8003dfc:	d158      	bne.n	8003eb0 <_printf_i+0x1d4>
 8003dfe:	9e04      	ldr	r6, [sp, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d064      	beq.n	8003ece <_printf_i+0x1f2>
 8003e04:	0026      	movs	r6, r4
 8003e06:	9b03      	ldr	r3, [sp, #12]
 8003e08:	3642      	adds	r6, #66	; 0x42
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	7033      	strb	r3, [r6, #0]
 8003e0e:	e05e      	b.n	8003ece <_printf_i+0x1f2>
 8003e10:	0648      	lsls	r0, r1, #25
 8003e12:	d5da      	bpl.n	8003dca <_printf_i+0xee>
 8003e14:	b2ad      	uxth	r5, r5
 8003e16:	e7d8      	b.n	8003dca <_printf_i+0xee>
 8003e18:	6809      	ldr	r1, [r1, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	0608      	lsls	r0, r1, #24
 8003e1e:	d505      	bpl.n	8003e2c <_printf_i+0x150>
 8003e20:	1d11      	adds	r1, r2, #4
 8003e22:	6019      	str	r1, [r3, #0]
 8003e24:	6813      	ldr	r3, [r2, #0]
 8003e26:	6962      	ldr	r2, [r4, #20]
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e006      	b.n	8003e3a <_printf_i+0x15e>
 8003e2c:	0649      	lsls	r1, r1, #25
 8003e2e:	d5f7      	bpl.n	8003e20 <_printf_i+0x144>
 8003e30:	1d11      	adds	r1, r2, #4
 8003e32:	6019      	str	r1, [r3, #0]
 8003e34:	6813      	ldr	r3, [r2, #0]
 8003e36:	8aa2      	ldrh	r2, [r4, #20]
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	9e04      	ldr	r6, [sp, #16]
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	e054      	b.n	8003eec <_printf_i+0x210>
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	1d11      	adds	r1, r2, #4
 8003e46:	6019      	str	r1, [r3, #0]
 8003e48:	6816      	ldr	r6, [r2, #0]
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	6862      	ldr	r2, [r4, #4]
 8003e4e:	0030      	movs	r0, r6
 8003e50:	f000 f87c 	bl	8003f4c <memchr>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d001      	beq.n	8003e5c <_printf_i+0x180>
 8003e58:	1b80      	subs	r0, r0, r6
 8003e5a:	6060      	str	r0, [r4, #4]
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	6123      	str	r3, [r4, #16]
 8003e60:	2300      	movs	r3, #0
 8003e62:	9a04      	ldr	r2, [sp, #16]
 8003e64:	7013      	strb	r3, [r2, #0]
 8003e66:	e041      	b.n	8003eec <_printf_i+0x210>
 8003e68:	6923      	ldr	r3, [r4, #16]
 8003e6a:	0032      	movs	r2, r6
 8003e6c:	9906      	ldr	r1, [sp, #24]
 8003e6e:	9805      	ldr	r0, [sp, #20]
 8003e70:	9d07      	ldr	r5, [sp, #28]
 8003e72:	47a8      	blx	r5
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d043      	beq.n	8003f00 <_printf_i+0x224>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	2500      	movs	r5, #0
 8003e7c:	079b      	lsls	r3, r3, #30
 8003e7e:	d40f      	bmi.n	8003ea0 <_printf_i+0x1c4>
 8003e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e82:	68e0      	ldr	r0, [r4, #12]
 8003e84:	4298      	cmp	r0, r3
 8003e86:	da3d      	bge.n	8003f04 <_printf_i+0x228>
 8003e88:	0018      	movs	r0, r3
 8003e8a:	e03b      	b.n	8003f04 <_printf_i+0x228>
 8003e8c:	0022      	movs	r2, r4
 8003e8e:	2301      	movs	r3, #1
 8003e90:	3219      	adds	r2, #25
 8003e92:	9906      	ldr	r1, [sp, #24]
 8003e94:	9805      	ldr	r0, [sp, #20]
 8003e96:	9e07      	ldr	r6, [sp, #28]
 8003e98:	47b0      	blx	r6
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	d030      	beq.n	8003f00 <_printf_i+0x224>
 8003e9e:	3501      	adds	r5, #1
 8003ea0:	68e3      	ldr	r3, [r4, #12]
 8003ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	429d      	cmp	r5, r3
 8003ea8:	dbf0      	blt.n	8003e8c <_printf_i+0x1b0>
 8003eaa:	e7e9      	b.n	8003e80 <_printf_i+0x1a4>
 8003eac:	2d00      	cmp	r5, #0
 8003eae:	d0a9      	beq.n	8003e04 <_printf_i+0x128>
 8003eb0:	9e04      	ldr	r6, [sp, #16]
 8003eb2:	0028      	movs	r0, r5
 8003eb4:	0039      	movs	r1, r7
 8003eb6:	f7fc f9c1 	bl	800023c <__aeabi_uidivmod>
 8003eba:	9b03      	ldr	r3, [sp, #12]
 8003ebc:	3e01      	subs	r6, #1
 8003ebe:	5c5b      	ldrb	r3, [r3, r1]
 8003ec0:	0028      	movs	r0, r5
 8003ec2:	7033      	strb	r3, [r6, #0]
 8003ec4:	0039      	movs	r1, r7
 8003ec6:	f7fc f933 	bl	8000130 <__udivsi3>
 8003eca:	1e05      	subs	r5, r0, #0
 8003ecc:	d1f1      	bne.n	8003eb2 <_printf_i+0x1d6>
 8003ece:	2f08      	cmp	r7, #8
 8003ed0:	d109      	bne.n	8003ee6 <_printf_i+0x20a>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	07db      	lsls	r3, r3, #31
 8003ed6:	d506      	bpl.n	8003ee6 <_printf_i+0x20a>
 8003ed8:	6863      	ldr	r3, [r4, #4]
 8003eda:	6922      	ldr	r2, [r4, #16]
 8003edc:	4293      	cmp	r3, r2
 8003ede:	dc02      	bgt.n	8003ee6 <_printf_i+0x20a>
 8003ee0:	2330      	movs	r3, #48	; 0x30
 8003ee2:	3e01      	subs	r6, #1
 8003ee4:	7033      	strb	r3, [r6, #0]
 8003ee6:	9b04      	ldr	r3, [sp, #16]
 8003ee8:	1b9b      	subs	r3, r3, r6
 8003eea:	6123      	str	r3, [r4, #16]
 8003eec:	9b07      	ldr	r3, [sp, #28]
 8003eee:	aa09      	add	r2, sp, #36	; 0x24
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	0021      	movs	r1, r4
 8003ef4:	9b06      	ldr	r3, [sp, #24]
 8003ef6:	9805      	ldr	r0, [sp, #20]
 8003ef8:	f7ff fe82 	bl	8003c00 <_printf_common>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d1b3      	bne.n	8003e68 <_printf_i+0x18c>
 8003f00:	2001      	movs	r0, #1
 8003f02:	4240      	negs	r0, r0
 8003f04:	b00b      	add	sp, #44	; 0x2c
 8003f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f08:	08004314 	.word	0x08004314
 8003f0c:	08004303 	.word	0x08004303

08003f10 <_sbrk_r>:
 8003f10:	2300      	movs	r3, #0
 8003f12:	b570      	push	{r4, r5, r6, lr}
 8003f14:	4c06      	ldr	r4, [pc, #24]	; (8003f30 <_sbrk_r+0x20>)
 8003f16:	0005      	movs	r5, r0
 8003f18:	0008      	movs	r0, r1
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	f000 f8ae 	bl	800407c <_sbrk>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d103      	bne.n	8003f2c <_sbrk_r+0x1c>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d000      	beq.n	8003f2c <_sbrk_r+0x1c>
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	bd70      	pop	{r4, r5, r6, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	200002ec 	.word	0x200002ec

08003f34 <__ascii_wctomb>:
 8003f34:	1e0b      	subs	r3, r1, #0
 8003f36:	d004      	beq.n	8003f42 <__ascii_wctomb+0xe>
 8003f38:	2aff      	cmp	r2, #255	; 0xff
 8003f3a:	d904      	bls.n	8003f46 <__ascii_wctomb+0x12>
 8003f3c:	238a      	movs	r3, #138	; 0x8a
 8003f3e:	6003      	str	r3, [r0, #0]
 8003f40:	3b8b      	subs	r3, #139	; 0x8b
 8003f42:	0018      	movs	r0, r3
 8003f44:	4770      	bx	lr
 8003f46:	700a      	strb	r2, [r1, #0]
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e7fa      	b.n	8003f42 <__ascii_wctomb+0xe>

08003f4c <memchr>:
 8003f4c:	b2c9      	uxtb	r1, r1
 8003f4e:	1882      	adds	r2, r0, r2
 8003f50:	4290      	cmp	r0, r2
 8003f52:	d101      	bne.n	8003f58 <memchr+0xc>
 8003f54:	2000      	movs	r0, #0
 8003f56:	4770      	bx	lr
 8003f58:	7803      	ldrb	r3, [r0, #0]
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d0fb      	beq.n	8003f56 <memchr+0xa>
 8003f5e:	3001      	adds	r0, #1
 8003f60:	e7f6      	b.n	8003f50 <memchr+0x4>

08003f62 <memmove>:
 8003f62:	b510      	push	{r4, lr}
 8003f64:	4288      	cmp	r0, r1
 8003f66:	d902      	bls.n	8003f6e <memmove+0xc>
 8003f68:	188b      	adds	r3, r1, r2
 8003f6a:	4298      	cmp	r0, r3
 8003f6c:	d308      	bcc.n	8003f80 <memmove+0x1e>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d007      	beq.n	8003f84 <memmove+0x22>
 8003f74:	5ccc      	ldrb	r4, [r1, r3]
 8003f76:	54c4      	strb	r4, [r0, r3]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	e7f9      	b.n	8003f70 <memmove+0xe>
 8003f7c:	5c8b      	ldrb	r3, [r1, r2]
 8003f7e:	5483      	strb	r3, [r0, r2]
 8003f80:	3a01      	subs	r2, #1
 8003f82:	d2fb      	bcs.n	8003f7c <memmove+0x1a>
 8003f84:	bd10      	pop	{r4, pc}

08003f86 <__malloc_lock>:
 8003f86:	4770      	bx	lr

08003f88 <__malloc_unlock>:
 8003f88:	4770      	bx	lr
	...

08003f8c <_free_r>:
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	0005      	movs	r5, r0
 8003f90:	2900      	cmp	r1, #0
 8003f92:	d010      	beq.n	8003fb6 <_free_r+0x2a>
 8003f94:	1f0c      	subs	r4, r1, #4
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	da00      	bge.n	8003f9e <_free_r+0x12>
 8003f9c:	18e4      	adds	r4, r4, r3
 8003f9e:	0028      	movs	r0, r5
 8003fa0:	f7ff fff1 	bl	8003f86 <__malloc_lock>
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <_free_r+0x90>)
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <_free_r+0x2c>
 8003fac:	6063      	str	r3, [r4, #4]
 8003fae:	6014      	str	r4, [r2, #0]
 8003fb0:	0028      	movs	r0, r5
 8003fb2:	f7ff ffe9 	bl	8003f88 <__malloc_unlock>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	42a3      	cmp	r3, r4
 8003fba:	d909      	bls.n	8003fd0 <_free_r+0x44>
 8003fbc:	6821      	ldr	r1, [r4, #0]
 8003fbe:	1860      	adds	r0, r4, r1
 8003fc0:	4283      	cmp	r3, r0
 8003fc2:	d1f3      	bne.n	8003fac <_free_r+0x20>
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	1841      	adds	r1, r0, r1
 8003fca:	6021      	str	r1, [r4, #0]
 8003fcc:	e7ee      	b.n	8003fac <_free_r+0x20>
 8003fce:	0013      	movs	r3, r2
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	2a00      	cmp	r2, #0
 8003fd4:	d001      	beq.n	8003fda <_free_r+0x4e>
 8003fd6:	42a2      	cmp	r2, r4
 8003fd8:	d9f9      	bls.n	8003fce <_free_r+0x42>
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	1858      	adds	r0, r3, r1
 8003fde:	42a0      	cmp	r0, r4
 8003fe0:	d10b      	bne.n	8003ffa <_free_r+0x6e>
 8003fe2:	6820      	ldr	r0, [r4, #0]
 8003fe4:	1809      	adds	r1, r1, r0
 8003fe6:	1858      	adds	r0, r3, r1
 8003fe8:	6019      	str	r1, [r3, #0]
 8003fea:	4282      	cmp	r2, r0
 8003fec:	d1e0      	bne.n	8003fb0 <_free_r+0x24>
 8003fee:	6810      	ldr	r0, [r2, #0]
 8003ff0:	6852      	ldr	r2, [r2, #4]
 8003ff2:	1841      	adds	r1, r0, r1
 8003ff4:	6019      	str	r1, [r3, #0]
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	e7da      	b.n	8003fb0 <_free_r+0x24>
 8003ffa:	42a0      	cmp	r0, r4
 8003ffc:	d902      	bls.n	8004004 <_free_r+0x78>
 8003ffe:	230c      	movs	r3, #12
 8004000:	602b      	str	r3, [r5, #0]
 8004002:	e7d5      	b.n	8003fb0 <_free_r+0x24>
 8004004:	6821      	ldr	r1, [r4, #0]
 8004006:	1860      	adds	r0, r4, r1
 8004008:	4282      	cmp	r2, r0
 800400a:	d103      	bne.n	8004014 <_free_r+0x88>
 800400c:	6810      	ldr	r0, [r2, #0]
 800400e:	6852      	ldr	r2, [r2, #4]
 8004010:	1841      	adds	r1, r0, r1
 8004012:	6021      	str	r1, [r4, #0]
 8004014:	6062      	str	r2, [r4, #4]
 8004016:	605c      	str	r4, [r3, #4]
 8004018:	e7ca      	b.n	8003fb0 <_free_r+0x24>
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	200002e0 	.word	0x200002e0

08004020 <_realloc_r>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	0007      	movs	r7, r0
 8004024:	000d      	movs	r5, r1
 8004026:	0016      	movs	r6, r2
 8004028:	2900      	cmp	r1, #0
 800402a:	d105      	bne.n	8004038 <_realloc_r+0x18>
 800402c:	0011      	movs	r1, r2
 800402e:	f7ff fc23 	bl	8003878 <_malloc_r>
 8004032:	0004      	movs	r4, r0
 8004034:	0020      	movs	r0, r4
 8004036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004038:	2a00      	cmp	r2, #0
 800403a:	d103      	bne.n	8004044 <_realloc_r+0x24>
 800403c:	f7ff ffa6 	bl	8003f8c <_free_r>
 8004040:	0034      	movs	r4, r6
 8004042:	e7f7      	b.n	8004034 <_realloc_r+0x14>
 8004044:	f000 f812 	bl	800406c <_malloc_usable_size_r>
 8004048:	002c      	movs	r4, r5
 800404a:	4286      	cmp	r6, r0
 800404c:	d9f2      	bls.n	8004034 <_realloc_r+0x14>
 800404e:	0031      	movs	r1, r6
 8004050:	0038      	movs	r0, r7
 8004052:	f7ff fc11 	bl	8003878 <_malloc_r>
 8004056:	1e04      	subs	r4, r0, #0
 8004058:	d0ec      	beq.n	8004034 <_realloc_r+0x14>
 800405a:	0029      	movs	r1, r5
 800405c:	0032      	movs	r2, r6
 800405e:	f7ff fb18 	bl	8003692 <memcpy>
 8004062:	0029      	movs	r1, r5
 8004064:	0038      	movs	r0, r7
 8004066:	f7ff ff91 	bl	8003f8c <_free_r>
 800406a:	e7e3      	b.n	8004034 <_realloc_r+0x14>

0800406c <_malloc_usable_size_r>:
 800406c:	1f0b      	subs	r3, r1, #4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	1f18      	subs	r0, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	da01      	bge.n	800407a <_malloc_usable_size_r+0xe>
 8004076:	580b      	ldr	r3, [r1, r0]
 8004078:	18c0      	adds	r0, r0, r3
 800407a:	4770      	bx	lr

0800407c <_sbrk>:
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <_sbrk+0x18>)
 800407e:	0002      	movs	r2, r0
 8004080:	6819      	ldr	r1, [r3, #0]
 8004082:	2900      	cmp	r1, #0
 8004084:	d101      	bne.n	800408a <_sbrk+0xe>
 8004086:	4904      	ldr	r1, [pc, #16]	; (8004098 <_sbrk+0x1c>)
 8004088:	6019      	str	r1, [r3, #0]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	1882      	adds	r2, r0, r2
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	4770      	bx	lr
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	200002e8 	.word	0x200002e8
 8004098:	200002f0 	.word	0x200002f0

0800409c <_init>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr

080040a8 <_fini>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr
